/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 40);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__vector_util__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__matrix_util__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__type_util__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__attribute_util__ = __webpack_require__(54);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__common_util__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__time_util__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__assert_util__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__default_util__ = __webpack_require__(55);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__image_util__ = __webpack_require__(56);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__array_util__ = __webpack_require__(25);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_9__array_util__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_6__assert_util__; });
/* unused harmony reexport defaults */
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_8__image_util__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "i", function() { return __WEBPACK_IMPORTED_MODULE_0__vector_util__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_1__matrix_util__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_2__type_util__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_4__common_util__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_3__attribute_util__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_5__time_util__; });













/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_matrix_common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__gl_matrix_mat2__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__gl_matrix_mat2d__ = __webpack_require__(49);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__gl_matrix_mat3__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__gl_matrix_mat4__ = __webpack_require__(50);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__gl_matrix_quat__ = __webpack_require__(51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__gl_matrix_vec2__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__gl_matrix_vec3__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__gl_matrix_vec4__ = __webpack_require__(19);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__gl_matrix_common__; });
/* unused harmony reexport mat2 */
/* unused harmony reexport mat2d */
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_3__gl_matrix_mat3__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_4__gl_matrix_mat4__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_5__gl_matrix_quat__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_6__gl_matrix_vec2__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_7__gl_matrix_vec3__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_8__gl_matrix_vec4__; });
/**
 * @fileoverview gl-matrix - High performance matrix and vector operations
 * @author Brandon Jones
 * @author Colin MacKenzie IV
 * @version 2.4.0
 */

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */
// END HEADER













/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Shader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ShaderProgram; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return ShaderTypes; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_resource__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(0);


var ShaderTypes;
(function (ShaderTypes) {
    ShaderTypes[ShaderTypes["VERTEX"] = 0] = "VERTEX";
    ShaderTypes[ShaderTypes["FRAGMENT"] = 1] = "FRAGMENT";
})(ShaderTypes || (ShaderTypes = {}));
class Shader extends __WEBPACK_IMPORTED_MODULE_0__common_resource__["a" /* Resource */] {
    constructor(gl, src) {
        super();
        this.gl = gl;
        this.source = src.source;
        this.type = Shader.getShaderType(gl, src.type);
        this.isValid = true;
        this.setup();
    }
    getGLShader() {
        return this.shader;
    }
    setup() {
        const gl = this.gl;
        let shader = gl.createShader(this.type);
        gl.shaderSource(shader, this.source);
        gl.compileShader(shader);
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            let message = 'Shader compilation error: ' +
                gl.getShaderInfoLog(shader);
            console.error(message);
            gl.deleteShader(shader);
            shader = null;
            this.isValid = false;
        }
        this.shader = shader;
    }
    static getShaderType(gl, type) {
        if (type === ShaderTypes.FRAGMENT)
            return gl.FRAGMENT_SHADER;
        if (type === ShaderTypes.VERTEX)
            return gl.VERTEX_SHADER;
        throw new Error('Unrecognized shader type.');
    }
}
//
//	program
//
class ShaderProgram extends __WEBPACK_IMPORTED_MODULE_0__common_resource__["a" /* Resource */] {
    constructor(gl) {
        super();
        this._isBound = false;
        this.isValid = true;
        this.isFinalized = false;
        this.gl = gl;
        this.uniformLocations = {};
        this.attributeLocations = {};
    }
    attach(shaders) {
        this.assertNotFinalized('attach');
        for (let shader of shaders) {
            if (!shader.isValid)
                throw new Error('Attempted to attach an invalid shader.');
        }
        this.shaders = shaders;
        this.finalize();
    }
    bind() {
        this.assertFinalized('bind');
        this.gl.useProgram(this.program);
        this._isBound = true;
    }
    unbind() {
        this.assertFinalized('unbind');
        this.gl.useProgram(null);
        this._isBound = false;
    }
    hasUniform(name) {
        return this.getUniformLocation(name, true) !== null;
    }
    isBound() {
        return this._isBound;
    }
    setUniform(name, value) {
        if (__WEBPACK_IMPORTED_MODULE_1__util_util__["h" /* types */].isNumber(value)) {
            this.setf(name, value);
        }
        else if (__WEBPACK_IMPORTED_MODULE_1__util_util__["h" /* types */].isInteger(value)) {
            this.seti(name, value.get());
        }
        else if (__WEBPACK_IMPORTED_MODULE_1__util_util__["h" /* types */].isBoolean(value)) {
            this.setb(name, value);
        }
        else if (Array.isArray(value)) {
            this.setVec3f(name, value);
        }
        else if (__WEBPACK_IMPORTED_MODULE_1__util_util__["h" /* types */].isTexture(value)) {
            this.seti(name, value.index);
        }
        else if (__WEBPACK_IMPORTED_MODULE_1__util_util__["h" /* types */].isMat4(value)) {
            this.setMat4f(name, value);
        }
        else if (__WEBPACK_IMPORTED_MODULE_1__util_util__["h" /* types */].isVec3(value)) {
            this.setVec3f(name, value);
        }
    }
    setf(name, value) {
        this.gl.uniform1f(this.getUniformLocation(name), value);
    }
    setb(name, value) {
        this.gl.uniform1i(this.getUniformLocation(name), value ? 1 : 0);
    }
    seti(name, value) {
        this.gl.uniform1i(this.getUniformLocation(name), value);
    }
    setMat4f(name, value) {
        this.gl.uniformMatrix4fv(this.getUniformLocation(name), false, value);
    }
    setVec3f(name, value) {
        value = __WEBPACK_IMPORTED_MODULE_1__util_util__["i" /* vector */].requireVec3(value);
        this.gl.uniform3fv(this.getUniformLocation(name), value);
    }
    finalize() {
        this.assertNotFinalized('finalize');
        const gl = this.gl;
        const shaders = this.shaders;
        let program = gl.createProgram();
        for (let i = 0; i < shaders.length; i++) {
            gl.attachShader(program, shaders[i].getGLShader());
        }
        gl.linkProgram(program);
        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
            let message = 'Shader program initialization error: ' +
                gl.getProgramInfoLog(program);
            console.error(message);
            program = null;
            this.isValid = false;
        }
        this.program = program;
        this.isFinalized = true;
    }
    getAttributeLocation(name) {
        let loc = this.attributeLocations[name];
        if (loc !== undefined)
            return loc;
        loc = this.gl.getAttribLocation(this.program, name);
        this.attributeLocations[name] = loc;
        return loc;
    }
    getProgram() {
        return this.program;
    }
    getUniformLocation(name, silent = false) {
        this.assertFinalized('uniform');
        let loc = this.uniformLocations[name];
        if (loc === undefined) {
            loc = this.gl.getUniformLocation(this.program, name);
            this.uniformLocations[name] = loc;
        }
        if (loc === null && !silent) {
            console.warn(`"${name}" is not a recognized uniform name.`);
        }
        return loc;
    }
    assertNotFinalized(op) {
        if (this.isFinalized)
            throw new Error(`Cannot call method / op "${op}" after finalizing the program.`);
    }
    assertFinalized(op) {
        if (!this.isFinalized)
            throw new Error(`Cannot call method / op "${op}" before finalizing the program.`);
    }
}



/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export clamp */
/* harmony export (immutable) */ __webpack_exports__["b"] = clampScalar;
/* harmony export (immutable) */ __webpack_exports__["h"] = signedClamp;
/* harmony export (immutable) */ __webpack_exports__["a"] = abs;
/* harmony export (immutable) */ __webpack_exports__["g"] = radians;
/* unused harmony export vecsum */
/* harmony export (immutable) */ __webpack_exports__["i"] = vecmean;
/* harmony export (immutable) */ __webpack_exports__["c"] = distance;
/* unused harmony export max */
/* unused harmony export min */
/* harmony export (immutable) */ __webpack_exports__["d"] = isPow2;
/* unused harmony export arraySum */
/* harmony export (immutable) */ __webpack_exports__["e"] = lookAt;
/* unused harmony export extractPosition */
/* harmony export (immutable) */ __webpack_exports__["f"] = quatToRotationMatrix;
/* unused harmony export extractRotationMat3 */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_gl_matrix__ = __webpack_require__(1);

function clamp(val, min, max) {
    for (let i = 0; i < val.length; i++) {
        if (val[i] < min)
            val[i] = min;
        if (val[i] > max)
            val[i] = max;
    }
}
function clampScalar(val, min, max) {
    return val < min ? min : val > max ? max : val;
}
function signedClamp(val, min, max) {
    for (let i = 0; i < val.length; i++) {
        let _val = val[i];
        let sign = _val < 0 ? -1 : 1;
        if (Math.abs(_val) < min) {
            val[i] = min * sign;
        }
        if (Math.abs(_val) > max) {
            val[i] = max * sign;
        }
    }
}
function abs(val) {
    for (let i = 0; i < val.length; i++) {
        val[i] = Math.abs(val[i]);
    }
}
function radians(val) {
    return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["a" /* glMatrix */].toRadian(val);
}
function vecsum(arr) {
    if (arr.length === 0)
        return null;
    let res;
    if (arr[0].length === 2) {
        res = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["e" /* vec2 */].fromValues(0, 0);
    }
    else if (arr[0].length === 3) {
        res = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].fromValues(0, 0, 0);
    }
    for (let i = 0; i < arr.length; i++) {
        for (let j = 0; j < res.length; j++) {
            res[j] += arr[i][j];
        }
    }
    return res;
}
function vecmean(arr) {
    let sum = vecsum(arr);
    if (sum === null)
        return null;
    let mean = sum;
    for (let i = 0; i < mean.length; i++) {
        mean[i] /= arr.length;
    }
    return mean;
}
function distance(a, b) {
    return Math.sqrt(Math.pow(b[0] - a[0], 2) + Math.pow(b[1] - a[1], 2));
}
function max(arr) {
    let max = -Infinity;
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] > max)
            max = arr[i];
    }
    return max;
}
function min(arr) {
    let min = Infinity;
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] < min)
            min = arr[i];
    }
    return min;
}
function isPow2(n) {
    if (n === 0)
        return false;
    while (n !== 1) {
        if (n % 2 !== 0)
            return false;
        n = n / 2;
    }
    return true;
}
function arraySum(arr) {
    let sum = 0;
    for (let i = 0; i < arr.length; i++) {
        sum += arr[i];
    }
    return sum;
}
function lookAt(out, eye, center, up) {
    let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
    let eyex = eye[0];
    let eyey = eye[1];
    let eyez = eye[2];
    let upx = up[0];
    let upy = up[1];
    let upz = up[2];
    let centerx = center[0];
    let centery = center[1];
    let centerz = center[2];
    if (Math.abs(eyex - centerx) < __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["a" /* glMatrix */].EPSILON &&
        Math.abs(eyey - centery) < __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["a" /* glMatrix */].EPSILON &&
        Math.abs(eyez - centerz) < __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["a" /* glMatrix */].EPSILON) {
        return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].identity(out);
    }
    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;
    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;
    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    }
    else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }
    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;
    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    }
    else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }
    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;
    return out;
}
function extractPosition(a) {
    return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].fromValues(a[12], a[13], a[14]);
}
function quatToRotationMatrix(q, te) {
    //	https://github.com/mrdoob/three.js/blob/dev/src/math/Matrix4.js
    let x = q[0], y = q[1], z = q[1], w = q[3];
    let x2 = x + x, y2 = y + y, z2 = z + z;
    let xx = x * x2, xy = x * y2, xz = x * z2;
    let yy = y * y2, yz = y * z2, zz = z * z2;
    let wx = w * x2, wy = w * y2, wz = w * z2;
    const setLastCol = te === undefined || te === null;
    if (setLastCol)
        te = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].create();
    te[0] = 1 - (yy + zz);
    te[4] = xy - wz;
    te[8] = xz + wy;
    te[1] = xy + wz;
    te[5] = 1 - (xx + zz);
    te[9] = yz - wx;
    te[2] = xz - wy;
    te[6] = yz + wx;
    te[10] = 1 - (xx + yy);
    if (setLastCol) {
        te[3] = 0;
        te[7] = 0;
        te[11] = 0;
    }
    // bottom row
    te[12] = 0;
    te[13] = 0;
    te[14] = 0;
    te[15] = 1;
    return te;
}
function extractRotationMat3(a) {
    return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["b" /* mat3 */].fromValues(
    //
    a[0], a[1], a[2], 
    //
    a[4], a[5], a[6], 
    //
    a[8], a[9], a[10]);
}


/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARRAY_TYPE", function() { return ARRAY_TYPE; });
/* harmony export (immutable) */ __webpack_exports__["setMatrixArrayType"] = setMatrixArrayType;
/* harmony export (immutable) */ __webpack_exports__["toRadian"] = toRadian;
/* harmony export (immutable) */ __webpack_exports__["equals"] = equals;
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

/**
 * Common utilities
 * @module glMatrix
 */

// Configuration Constants
const EPSILON = 0.000001;
/* harmony export (immutable) */ __webpack_exports__["EPSILON"] = EPSILON;

let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
const RANDOM = Math.random;
/* harmony export (immutable) */ __webpack_exports__["RANDOM"] = RANDOM;


/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Type} type Array type, such as Float32Array or Array
 */
function setMatrixArrayType(type) {
  ARRAY_TYPE = type;
}

const degree = Math.PI / 180;

/**
 * Convert Degree To Radian
 *
 * @param {Number} a Angle in Degrees
 */
function toRadian(a) {
  return a * degree;
}

/**
 * Tests whether or not the arguments have approximately the same value, within an absolute
 * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
 * than or equal to 1.0, and a relative tolerance is used for larger values)
 *
 * @param {Number} a The first number to test.
 * @param {Number} b The second number to test.
 * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
 */
function equals(a, b) {
  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));
}


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["getAttributeName"] = getAttributeName;
/* harmony export (immutable) */ __webpack_exports__["getVaryingName"] = getVaryingName;
/* harmony export (immutable) */ __webpack_exports__["getUniformName"] = getUniformName;
/* harmony export (immutable) */ __webpack_exports__["getBuiltinUniformName"] = getBuiltinUniformName;
/* harmony export (immutable) */ __webpack_exports__["getGLSLTypeName"] = getGLSLTypeName;
/* harmony export (immutable) */ __webpack_exports__["getGLSLPrecisionName"] = getGLSLPrecisionName;
/* harmony export (immutable) */ __webpack_exports__["getLightTypeName"] = getLightTypeName;
/* harmony export (immutable) */ __webpack_exports__["getUniformNamesFromUniformArrayT"] = getUniformNamesFromUniformArrayT;
/* harmony export (immutable) */ __webpack_exports__["makeAttribute"] = makeAttribute;
/* harmony export (immutable) */ __webpack_exports__["makeVarying"] = makeVarying;
/* harmony export (immutable) */ __webpack_exports__["makeUniformArray"] = makeUniformArray;
/* harmony export (immutable) */ __webpack_exports__["makeUniform"] = makeUniform;
/* harmony export (immutable) */ __webpack_exports__["makeBuiltinUniform"] = makeBuiltinUniform;
/* harmony export (immutable) */ __webpack_exports__["makeBuiltinUniformArray"] = makeBuiltinUniformArray;
/* harmony export (immutable) */ __webpack_exports__["makeMainNameFromBuiltinUniform"] = makeMainNameFromBuiltinUniform;
/* harmony export (immutable) */ __webpack_exports__["makeMainNameFromUniform"] = makeMainNameFromUniform;
/* harmony export (immutable) */ __webpack_exports__["makeTextureOrTBuiltinUniformToT"] = makeTextureOrTBuiltinUniformToT;
/* harmony export (immutable) */ __webpack_exports__["makeTextureOrTUniformToT"] = makeTextureOrTUniformToT;
/* harmony export (immutable) */ __webpack_exports__["makeHeader"] = makeHeader;
/* harmony export (immutable) */ __webpack_exports__["makePassedAttribute"] = makePassedAttribute;
/* harmony export (immutable) */ __webpack_exports__["makePassedAttributes"] = makePassedAttributes;
/* harmony export (immutable) */ __webpack_exports__["makeFuncOrArrayFunc"] = makeFuncOrArrayFunc;
/* harmony export (immutable) */ __webpack_exports__["makeMain"] = makeMain;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__shader_uniforms__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shader_attributes__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shader_types__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shader_varying__ = __webpack_require__(68);






const defaultAttributeMapFunc = __WEBPACK_IMPORTED_MODULE_1__shader_attributes__["a" /* ShaderAttributeDataType3D */];
/* harmony export (immutable) */ __webpack_exports__["defaultAttributeMapFunc"] = defaultAttributeMapFunc;

function getAttributeName(name) {
    return Object(__WEBPACK_IMPORTED_MODULE_1__shader_attributes__["b" /* makeAttributeString */])(name);
}
function getVaryingName(name) {
    return Object(__WEBPACK_IMPORTED_MODULE_4__shader_varying__["a" /* makeVaryingString */])(name);
}
function getUniformName(name) {
    return __WEBPACK_IMPORTED_MODULE_0__shader_uniforms__["c" /* requireUniformString */](name);
}
function getBuiltinUniformName(name) {
    return getUniformName(name);
}
function getGLSLTypeName(name) {
    return __WEBPACK_IMPORTED_MODULE_2__shader_types__["b" /* GLSLTypeMap */].getType(name);
}
function getGLSLPrecisionName(name) {
    return __WEBPACK_IMPORTED_MODULE_2__shader_types__["a" /* GLSLPrecisionMap */].getPrecision(name);
}
function getLightTypeName(name) {
    return __WEBPACK_IMPORTED_MODULE_2__shader_types__["c" /* LightTypesMap */].getLightType(name);
}
function getUniformNamesFromUniformArrayT(arr) {
    return arr.map(val => val.name);
}
function makeAttribute(name, kind) {
    let attr = getAttributeName(name);
    let kindStr = __WEBPACK_IMPORTED_MODULE_2__shader_types__["b" /* GLSLTypeMap */].getType(kind);
    return `attribute ${kindStr} ${attr};`;
}
function makeVarying(name, kind) {
    let varying = getVaryingName(name);
    let kindStr = __WEBPACK_IMPORTED_MODULE_2__shader_types__["b" /* GLSLTypeMap */].getType(kind);
    return `varying ${kindStr} ${varying};`;
}
function makeUniformArray(name, kind, N) {
    let uniform = getUniformName(name);
    let kindStr = __WEBPACK_IMPORTED_MODULE_2__shader_types__["b" /* GLSLTypeMap */].getType(kind);
    return `uniform ${kindStr} ${uniform}[${N}];`;
}
function makeUniform(name, kind) {
    let uniform = getUniformName(name);
    let kindStr = __WEBPACK_IMPORTED_MODULE_2__shader_types__["b" /* GLSLTypeMap */].getType(kind);
    return `uniform ${kindStr} ${uniform};`;
}
function makeBuiltinUniform(name, kind) {
    return makeUniform(name, kind);
}
function makeBuiltinUniformArray(name, kind, N) {
    return makeUniformArray(name, kind, N);
}
function makeMainNameFromBuiltinUniform(name) {
    return makeMainNameFromUniform(name);
}
function makeMainNameFromUniform(name) {
    let name_ = getUniformName(name);
    return `${name_}_`;
}
function _makeTextureOrTUniformToT(name, assignedType, isTexture, components) {
    let uniformName = getUniformName(name);
    let assignedName = makeMainNameFromUniform(name);
    let uvName = getVaryingName('uv');
    if (isTexture) {
        return `${assignedType} ${assignedName} = texture2D(${uniformName}, ${uvName}).${components};`;
    }
    else {
        return `${assignedType} ${assignedName} = ${uniformName};`;
    }
}
function requireTextureComponents(un, assignedT) {
    if (un.components)
        return un.components;
    if (assignedT === 'float')
        return 'r';
    if (assignedT === 'vec2')
        return 'rg';
    if (assignedT === 'vec3')
        return 'rgb';
    if (assignedT === 'vec4')
        return 'rgba';
    throw new Error(`Unsupported texture-to-type conversion for type "${assignedT}".`);
}
function makeTextureOrTBuiltinUniformToT(un, assignedT) {
    let isTexture = un.kind === 'sampler2D';
    let components = requireTextureComponents(un, assignedT);
    return _makeTextureOrTUniformToT(un.name, assignedT, isTexture, components);
}
function makeTextureOrTUniformToT(un, assignedT) {
    let isTexture = un.kind === 'sampler2D';
    let components = requireTextureComponents(un, assignedT);
    return _makeTextureOrTUniformToT(un.name, assignedT, isTexture, components);
}
function makeHeader(mapFunc, attributes, varying, uns, userUniforms) {
    let lines = [];
    attributes.map(attr => lines.push(makeAttribute(attr, mapFunc(attr))));
    varying.map(varying_ => lines.push(makeVarying(varying_, mapFunc(varying_))));
    uns.map(un => {
        if (un.isArray)
            lines.push(makeBuiltinUniformArray(un.name, un.kind, un.length));
        else
            lines.push(makeBuiltinUniform(un.name, un.kind));
    });
    userUniforms.map(un => {
        if (un.isArray)
            lines.push(makeUniformArray(un.name, un.kind, un.length));
        else
            lines.push(makeUniform(un.name, un.kind));
    });
    return lines.join('\n');
}
function makePassedAttribute(mapFunc, attr) {
    let varyingName = Object(__WEBPACK_IMPORTED_MODULE_4__shader_varying__["a" /* makeVaryingString */])(attr);
    let attrName = Object(__WEBPACK_IMPORTED_MODULE_1__shader_attributes__["b" /* makeAttributeString */])(attr);
    return `${varyingName} = ${attrName};`;
}
function makePassedAttributes(mapFunc, attributes) {
    return attributes.map(attr => makePassedAttribute(mapFunc, attr)).join('\n');
}
function makeFuncOrArrayFunc(src, funcs) {
    funcs = __WEBPACK_IMPORTED_MODULE_3__util_util__["a" /* array */].ensureArray(funcs);
    funcs.map(func => src.push(func()));
}
function makeMain(funcs) {
    funcs = __WEBPACK_IMPORTED_MODULE_3__util_util__["a" /* array */].ensureArray(funcs);
    let lines = ['void main() {'];
    let statements = [];
    funcs.map(func => statements.push(func()));
    lines.push(statements.join('\n\t'));
    lines.push('}');
    return lines.join('\n');
}


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Mesh; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__vertex__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_resource__ = __webpack_require__(7);


class Mesh extends __WEBPACK_IMPORTED_MODULE_1__common_resource__["a" /* Resource */] {
    constructor(gl) {
        super();
        this.isFinalized = false;
        this._isBound = false;
        this.boundTo = '';
        this.vertices = [];
        this.indices = new Uint16Array(0);
        this.gl = gl;
        this.vbo = this.gl.createBuffer();
        this.ebo = this.gl.createBuffer();
    }
    addVertex(vertex) {
        this.assertNotFinalized('addVertex');
        if (this.vertices.length !== 0) {
            if (!vertex.sizesMatch(this.vertices[0]))
                throw new Error('All vertices must have consistent numbers of elements.');
        }
        this.vertices.push(vertex);
    }
    setIndices(indices) {
        this.assertNotFinalized('setIndices');
        this.indices = indices;
    }
    setTopology(topology) {
        this.assertNotFinalized('setTopology');
        this.topology = topology;
    }
    getDrawType() {
        const gl = this.gl;
        if (this.topology === __WEBPACK_IMPORTED_MODULE_0__vertex__["a" /* Topologies */].TRIANGLES) {
            return gl.TRIANGLES;
        }
        else if (this.topology === __WEBPACK_IMPORTED_MODULE_0__vertex__["a" /* Topologies */].TRIANGLE_STRIP) {
            return gl.TRIANGLE_STRIP;
        }
        else {
            throw new Error(`Unrecognized topology ${this.topology}`);
        }
    }
    draw() {
        this.assertFinalized('draw');
        const gl = this.gl;
        let nIndices = this.indices.length;
        let useIndices = nIndices > 0;
        let nVertices = this.vertices.length;
        let drawType = this.getDrawType();
        if (useIndices) {
            gl.drawElements(drawType, nIndices, gl.UNSIGNED_SHORT, 0);
        }
        else {
            gl.drawArrays(drawType, 0, nVertices);
        }
    }
    finalize() {
        this.assertNotFinalized('finalize');
        if (this.vertices.length === 0)
            return;
        this.storeBufferData();
        this.isFinalized = true;
    }
    isBound() {
        return this._isBound;
    }
    isBoundTo(prog) {
        return this.boundTo === prog.uuid;
    }
    bind(program) {
        this.assertFinalized('bind');
        if (this.vertices.length === 0)
            return;
        const gl = this.gl;
        let vert0 = this.vertices[0];
        let stride = vert0.size();
        let bytes = vert0.bytesPerElement();
        let offset = 0;
        let nIndices = this.indices.length;
        gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);
        let attrs = vert0.getAttributeNames();
        for (let i = 0; i < attrs.length; i++) {
            let loc = program.getAttributeLocation(attrs[i]);
            const size = vert0.sizeof(attrs[i]);
            if (loc !== -1) {
                gl.enableVertexAttribArray(loc);
                gl.vertexAttribPointer(loc, size, gl.FLOAT, false, stride * bytes, offset * bytes);
            }
            offset += size;
        }
        //	indices
        if (nIndices > 0) {
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.ebo);
        }
        this._isBound = true;
        this.boundTo = program.uuid;
    }
    unbind() {
        const gl = this.gl;
        const indices = this.indices;
        gl.bindBuffer(gl.ARRAY_BUFFER, null);
        if (indices.length > 0) {
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
        }
        this._isBound = false;
        this.boundTo = '';
    }
    dispose() {
        if (!this.isFinalized)
            return;
        const gl = this.gl;
        gl.deleteBuffer(this.vbo);
        gl.deleteBuffer(this.ebo);
    }
    storeBufferData() {
        const gl = this.gl;
        let data = this.getInterleavedData();
        let nIndices = this.indices.length;
        //	vbo
        gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);
        gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
        //	ebo
        if (nIndices > 0) {
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.ebo);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);
        }
    }
    getInterleavedData() {
        const vertices = this.vertices;
        let nVertices = vertices.length;
        if (nVertices == 0)
            return new Float32Array(0);
        let totalSize = nVertices * vertices[0].size();
        let allData = new Float32Array(totalSize);
        let allDataIndex = 0;
        for (let i = 0; i < nVertices; i++) {
            let data = vertices[i].getInterleavedData();
            for (let j = 0; j < data.length; j++) {
                allData[allDataIndex] = data[j];
                allDataIndex++;
            }
        }
        return allData;
    }
    assertNotFinalized(op) {
        if (!op)
            op = '(unspecified)';
        if (this.isFinalized)
            throw new Error(`Method / operation "${op}" was called after finalizing mesh.`);
    }
    assertFinalized(op = '(unspecified)') {
        if (!this.isFinalized)
            throw new Error(`Method / operation "${op}" was called before finalizing mesh.`);
    }
}



/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Resource; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_uuid__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_uuid___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_uuid__);

class Resource {
    constructor() {
        this.uuid = Object(__WEBPACK_IMPORTED_MODULE_0_uuid__["v4"])();
    }
    static equals(a, b) {
        if (a === null || b === null)
            return false;
        return a.uuid === b.uuid;
    }
    static compareUUID(a, b) {
        if (a.uuid === b.uuid)
            return 0;
        return 1;
    }
}



/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return Vertex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Topologies; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__shader_attributes__ = __webpack_require__(9);

class Vertex {
    constructor() {
        this.attributes = {};
        this.names = [];
        //
    }
    setPosition(pos) {
        this.assertValidArraySize(pos, 3, 'position');
        const name = Object(__WEBPACK_IMPORTED_MODULE_0__shader_attributes__["b" /* makeAttributeString */])(Object(__WEBPACK_IMPORTED_MODULE_0__shader_attributes__["c" /* requireAttributeString */])('position'));
        this.setAttribute(name, pos);
    }
    setUV(uv) {
        this.assertValidArraySize(uv, 2, 'uv');
        const name = Object(__WEBPACK_IMPORTED_MODULE_0__shader_attributes__["b" /* makeAttributeString */])(Object(__WEBPACK_IMPORTED_MODULE_0__shader_attributes__["c" /* requireAttributeString */])('uv'));
        this.setAttribute(name, uv);
    }
    setNormal(norm) {
        this.assertValidArraySize(norm, 3, 'normal');
        const name = Object(__WEBPACK_IMPORTED_MODULE_0__shader_attributes__["b" /* makeAttributeString */])(Object(__WEBPACK_IMPORTED_MODULE_0__shader_attributes__["c" /* requireAttributeString */])('normal'));
        this.setAttribute(name, norm);
    }
    setWeights(weights) {
        this.assertValidArraySize(weights, 3, 'weights');
        const name = Object(__WEBPACK_IMPORTED_MODULE_0__shader_attributes__["b" /* makeAttributeString */])(Object(__WEBPACK_IMPORTED_MODULE_0__shader_attributes__["c" /* requireAttributeString */])('joint_weight'));
        this.setAttribute(name, weights);
    }
    setIndices(indices) {
        this.assertValidArraySize(indices, 3, 'indices');
        const name = Object(__WEBPACK_IMPORTED_MODULE_0__shader_attributes__["b" /* makeAttributeString */])(Object(__WEBPACK_IMPORTED_MODULE_0__shader_attributes__["c" /* requireAttributeString */])('joint_index'));
        this.setAttribute(name, indices);
    }
    setAttribute(name, value) {
        let exists = this.hasAttribute(name);
        this.attributes[name] = value;
        if (exists)
            return;
        this.names.push(name);
        this.names.sort();
    }
    hasAttribute(name) {
        return this.attributes[name] !== undefined;
    }
    sizeof(name) {
        let attr = this.attributes[name];
        return attr === undefined ? 0 : attr.length;
    }
    size() {
        let attrNames = this.getAttributeNames();
        let sz = 0;
        for (let i = 0; i < attrNames.length; i++) {
            sz += this.sizeof(attrNames[i]);
        }
        return sz;
    }
    bytesPerElement() {
        return Float32Array.BYTES_PER_ELEMENT;
    }
    getAttributeNames() {
        return this.names;
    }
    getInterleavedData() {
        let data = new Float32Array(this.size());
        let i = 0;
        let attrNames = this.getAttributeNames();
        for (let j = 0; j < attrNames.length; j++) {
            let name = attrNames[j];
            let _data = this.attributes[name];
            for (let k = 0; k < _data.length; k++) {
                data[i] = _data[k];
                i++;
            }
        }
        return data;
    }
    sizesMatch(b) {
        let namesA = this.getAttributeNames();
        let namesB = b.getAttributeNames();
        if (namesA.length !== namesB.length)
            return false;
        for (let i = 0; i < namesA.length; i++) {
            let nameA = namesA[i];
            let nameB = namesB[i];
            if (nameA !== nameB)
                return false;
            if (this.sizeof(nameA) !== b.sizeof(nameA))
                return false;
        }
        return true;
    }
    assertValidArraySize(arr, size, type) {
        if (!type)
            type = '(unspecified)';
        if (arr.length !== size) {
            let message = `Expected attribute of type "${type}" to be of size ${size};
				instead was ${arr.length}`;
            throw new Error(message);
        }
    }
}
class Topologies {
}
Topologies.TRIANGLES = 0;
Topologies.TRIANGLE_STRIP = 1;



/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = requireAttributeString;
/* harmony export (immutable) */ __webpack_exports__["b"] = makeAttributeString;
const ShaderAttributeDataType3DMap = {
    'position': 'vec3',
    'normal': 'vec3',
    'uv': 'vec2',
    'joint_index': 'vec3',
    'joint_weight': 'vec3'
};
const ShaderAttributeDataType3D = (name) => {
    return ShaderAttributeDataType3DMap[name];
};
/* harmony export (immutable) */ __webpack_exports__["a"] = ShaderAttributeDataType3D;

function requireAttributeString(name) {
    return name;
}
function makeAttributeString(name) {
    return `in_${name}`;
}


/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = Tex2D;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__math_wgl_math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__common_resource__ = __webpack_require__(7);


class TextureOpts {
    static Default2D(gl) {
        let opts = new TextureOpts();
        opts.level = 0;
        opts.height = 0;
        opts.border = 0;
        opts.internalFormat = gl.RGBA;
        opts.sourceFormat = gl.RGBA;
        opts.type = gl.TEXTURE_2D;
        opts.dataType = gl.UNSIGNED_BYTE;
        opts.wrapS = gl.CLAMP_TO_EDGE;
        opts.wrapT = gl.CLAMP_TO_EDGE;
        opts.minFilter = gl.LINEAR;
        opts.magFilter = gl.LINEAR;
        opts.generateMips = false;
        return opts;
    }
}
/* harmony export (immutable) */ __webpack_exports__["c"] = TextureOpts;

function Tex2D(gl, data, opts) {
    if (!opts) {
        opts = TextureOpts.Default2D(gl);
        if (data && data instanceof HTMLImageElement) {
            opts.width = data.width;
            opts.height = data.height;
        }
    }
    return new Texture(gl, data, opts);
}
class Texture extends __WEBPACK_IMPORTED_MODULE_1__common_resource__["a" /* Resource */] {
    constructor(gl, data, opts) {
        super();
        this.gl = gl;
        this.opts = opts;
        this.data = data;
        this._exists = false;
        this._bound = false;
        this.create();
    }
    configure2D(tex) {
        const data = this.data;
        const opts = this.opts;
        const gl = this.gl;
        if (data === null || data instanceof Uint8Array) {
            this.configure2DData(data, tex);
        }
        else {
            this.configure2DImage(data, tex);
        }
        if (opts.generateMips && __WEBPACK_IMPORTED_MODULE_0__math_wgl_math__["d" /* isPow2 */](opts.width) && __WEBPACK_IMPORTED_MODULE_0__math_wgl_math__["d" /* isPow2 */](opts.height)) {
            gl.generateMipmap(gl.TEXTURE_2D);
        }
        else {
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, opts.wrapS);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, opts.wrapT);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, opts.minFilter);
        }
    }
    configure2DImage(data, tex) {
        const opts = this.opts;
        const gl = this.gl;
        gl.texImage2D(gl.TEXTURE_2D, opts.level, opts.internalFormat, opts.sourceFormat, opts.dataType, data);
        opts.width = data.width;
        opts.height = data.height;
    }
    configure2DData(data, tex) {
        const opts = this.opts;
        const gl = this.gl;
        gl.texImage2D(gl.TEXTURE_2D, opts.level, opts.internalFormat, opts.width, opts.height, opts.border, opts.sourceFormat, opts.dataType, data);
    }
    create() {
        this.assertDoesNotExist('create');
        const gl = this.gl;
        const opts = this.opts;
        const tex = gl.createTexture();
        gl.bindTexture(opts.type, tex);
        if (opts.type === gl.TEXTURE_2D) {
            this.configure2D(tex);
        }
        else {
            throw new Error(`Unrecognized texture type.`);
        }
        gl.bindTexture(opts.type, null);
        this._exists = true;
        this.handle = tex;
        return this.handle;
    }
    exists() {
        return this._exists;
    }
    isBound() {
        return this._bound;
    }
    clone() {
        //
        //	@TODO: Fix cloning
        //
        throw new Error('Cloning not yet implemented');
    }
    bind() {
        this.assertExists('bind');
        this.gl.bindTexture(this.opts.type, this.handle);
        this._bound = true;
    }
    unbind() {
        this.assertExists('unbind');
        this.gl.bindTexture(this.opts.type, null);
        this._bound = false;
    }
    dispose() {
        const gl = this.gl;
        if (!this.exists()) {
            console.warn('Attempted to dispose of a texture before creating it.');
            return;
        }
        gl.deleteTexture(this.handle);
        this._exists = false;
    }
    assertExists(op) {
        if (!this.exists())
            throw new Error(`Operation / method "${op}" requires a call to create().`);
    }
    assertDoesNotExist(op) {
        if (this.exists())
            throw new Error(`Operation / method "${op}" cannot be called once the texture exists.`);
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = Texture;



/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["assertNValues"] = assertNValues;
/* harmony export (immutable) */ __webpack_exports__["assertInteger"] = assertInteger;
/* harmony export (immutable) */ __webpack_exports__["assertNotNaN"] = assertNotNaN;
/* harmony export (immutable) */ __webpack_exports__["assertMatchingLengths"] = assertMatchingLengths;
function assertNValues(arr, N, contents = '(unspecified)') {
    if (arr.length !== N) {
        throw new Error(`Expected the array of ${contents} to contain ${N} values; ${arr.length} were present.`);
    }
}
function assertInteger(val, kind = '(unspecified)') {
    if (val % 1 !== 0)
        throw new Error(`Expected value of type "${kind}" to be an integer; was ${val}.`);
}
function assertNotNaN(val, kind = '(unspecified)') {
    if (isNaN(val))
        throw new Error(`Value of type "${kind}" was NaN.`);
}
function assertMatchingLengths(a, b, kind = '(unspecified)') {
    if (a.length !== b.length)
        throw new Error(`Arrays of type "${kind}" must have matching lengths.`);
}


/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "core", function() { return core; });
/* harmony export (immutable) */ __webpack_exports__["getGLSLType"] = getGLSLType;
/* harmony export (immutable) */ __webpack_exports__["isMat4"] = isMat4;
/* harmony export (immutable) */ __webpack_exports__["isVec3"] = isVec3;
/* harmony export (immutable) */ __webpack_exports__["isNumber"] = isNumber;
/* harmony export (immutable) */ __webpack_exports__["isBoolean"] = isBoolean;
/* harmony export (immutable) */ __webpack_exports__["isInteger"] = isInteger;
/* harmony export (immutable) */ __webpack_exports__["isPrimitive"] = isPrimitive;
/* harmony export (immutable) */ __webpack_exports__["isNElementArray"] = isNElementArray;
/* harmony export (immutable) */ __webpack_exports__["isTexture"] = isTexture;
/* harmony export (immutable) */ __webpack_exports__["isArray"] = isArray;
/* harmony export (immutable) */ __webpack_exports__["isGLMArrayType"] = isGLMArrayType;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__texture_texture__ = __webpack_require__(10);

var core;
(function (core) {
    core[core["mat4"] = 0] = "mat4";
    core[core["vec3"] = 1] = "vec3";
    core[core["Float32Array"] = 2] = "Float32Array";
    core[core["number"] = 3] = "number";
    core[core["boolean"] = 4] = "boolean";
    core[core["string"] = 5] = "string";
})(core || (core = {}));
function getGLSLType(data) {
    if (isTexture(data))
        return 'sampler2D';
    if (isNElementArray(data, 2))
        return 'vec2';
    if (isNElementArray(data, 3))
        return 'vec3';
    if (isNElementArray(data, 4))
        return 'vec4';
    if (isNumber(data))
        return 'float';
    console.log(data);
    throw new Error('Cannot resolve the glsl data type for the given js data.');
}
function isMat4(data) {
    return data.length === 16;
}
function isVec3(data) {
    return data.length === 3;
}
function isNumber(data) {
    return typeof data === 'number';
}
function isBoolean(data) {
    return typeof data === 'boolean';
}
function isInteger(data) {
    return data instanceof Integer;
}
function isPrimitive(data) {
    if (typeof data === 'number' || typeof data === 'boolean' || typeof data === 'string')
        return true;
    return false;
}
function isNElementArray(data, N) {
    if (isPrimitive(data)) {
        return false;
    }
    else if (isTexture(data)) {
        return false;
    }
    else if (isInteger(data)) {
        return false;
    }
    return ('length' in data) && (data.length === N);
}
function isTexture(data) {
    return data instanceof __WEBPACK_IMPORTED_MODULE_0__texture_texture__["b" /* Texture */];
}
function isArray(data) {
    if (Array.isArray(data))
        return true;
    return false;
}
function isGLMArrayType(data) {
    if (isPrimitive(data)) {
        return false;
    }
    else if (!(data instanceof Float32Array)) {
        return false;
    }
    else {
        return isMat4(data) || isVec3(data);
    }
}
class Integer {
    constructor(value) {
        this.set(value);
    }
    get() {
        return this._value;
    }
    set(value) {
        this._value = Math.round(value);
    }
}
/* harmony export (immutable) */ __webpack_exports__["Integer"] = Integer;



/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Model; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_resource__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mesh_mesh__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_gl_matrix__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util_util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__math_wgl_math__ = __webpack_require__(3);





class Model extends __WEBPACK_IMPORTED_MODULE_0__common_resource__["a" /* Resource */] {
    constructor(gl, mesh, material, program = null) {
        super();
        this.gl = gl;
        this.program = program;
        this.mesh = mesh;
        this.material = material;
        this.position = __WEBPACK_IMPORTED_MODULE_2_gl_matrix__["f" /* vec3 */].fromValues(0, 0, 0);
        this.rotation = __WEBPACK_IMPORTED_MODULE_2_gl_matrix__["f" /* vec3 */].fromValues(0, 0, 0);
        this.scale = __WEBPACK_IMPORTED_MODULE_2_gl_matrix__["f" /* vec3 */].fromValues(1, 1, 1);
        this.alias = '';
        this.transform = new __WEBPACK_IMPORTED_MODULE_3__util_util__["f" /* matrix */].transform;
        this.order = 0;
        this.parent = null;
        this.children = {};
        //	properties
        this.receivesLight = true;
        this.receivesShadow = true;
        this.visible = true;
        this.onBeforeRender = () => { };
        this.onAfterRender = () => { };
    }
    setMesh(mesh) {
        this.mesh = mesh;
    }
    setMaterial(material) {
        this.material = material;
    }
    setPosition(pos) {
        this.position = __WEBPACK_IMPORTED_MODULE_3__util_util__["i" /* vector */].requireVec3(pos);
    }
    setRotation(rot) {
        this.rotation = __WEBPACK_IMPORTED_MODULE_3__util_util__["i" /* vector */].requireVec3(rot);
    }
    setScale(scale) {
        this.scale = __WEBPACK_IMPORTED_MODULE_3__util_util__["i" /* vector */].requireVec3(scale);
    }
    getPosition() { return this.position; }
    getRotation() { return this.rotation; }
    getScale() { return this.scale; }
    getWorldMatrix() {
        let local = this.getLocalMatrix();
        if (this.parent === null)
            return local;
        let parentWorld = this.parent.getWorldMatrix();
        return __WEBPACK_IMPORTED_MODULE_2_gl_matrix__["c" /* mat4 */].mul(parentWorld, parentWorld, local);
    }
    getLocalMatrix() {
        let trans = this.transform;
        let pos = this.position;
        let rot = this.rotation;
        let scl = this.scale;
        return trans.identity()
            .translate(pos)
            .rotate(__WEBPACK_IMPORTED_MODULE_4__math_wgl_math__["g" /* radians */](rot[0]), [1, 0, 0])
            .rotate(__WEBPACK_IMPORTED_MODULE_4__math_wgl_math__["g" /* radians */](rot[1]), [0, 1, 0])
            .rotate(__WEBPACK_IMPORTED_MODULE_4__math_wgl_math__["g" /* radians */](rot[2]), [0, 0, 1])
            .scale(scl)
            .mat();
    }
    addChild(model) {
        this.children[model.uuid] = model;
        model.parent = this;
    }
    hasChild(model) {
        return this.children[model.uuid] !== undefined;
    }
    removeChild(model) {
        if (!this.hasChild(model)) {
            throw new Error(`Model "${model.alias}" is not a child of "${this.alias}".`);
        }
        this.children[model.uuid] = undefined;
        model.parent = null;
    }
    static compareMeshUUID(a, b) {
        return __WEBPACK_IMPORTED_MODULE_1__mesh_mesh__["a" /* Mesh */].compareUUID(a.mesh, b.mesh);
    }
    static compareOrder(a, b) {
        if (a.uuid === b.uuid)
            return 0;
        return a.order > b.order ? 1 : -1;
    }
    static compareOrderThenMeshUUID(a, b) {
        let res = Model.compareOrder(a, b);
        if (res !== 0)
            return res;
        return Model.compareMeshUUID(a, b);
    }
}



/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection
var rng;

var crypto = global.crypto || global.msCrypto; // for IE 11
if (crypto && crypto.getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef
  rng = function whatwgRNG() {
    crypto.getRandomValues(rnds8);
    return rnds8;
  };
}

if (!rng) {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);
  rng = function() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}

module.exports = rng;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(46)))

/***/ }),
/* 15 */
/***/ (function(module, exports) {

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  return bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] + '-' +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]] +
          bth[buf[i++]] + bth[buf[i++]];
}

module.exports = bytesToUuid;


/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MeshLibrary; });
class MeshLibrary {
}
MeshLibrary.quad = {
    data: [
        -1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0,
        -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
        1.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,
        1.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,
        1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0,
        -1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0
    ],
    indices: []
};
MeshLibrary.triangle = {
    data: [
        -1.0, -1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0,
        1.0, -1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0,
        0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0
    ],
    indices: []
};
MeshLibrary.skybox = {
    data: [
        -1.0, -1.0, -1.0, 0, 0,
        -1.0, 1.0, -1.0, 0, 0.5,
        1.0, -1.0, -1.0, 0.25, 0,
        -1.0, 1.0, -1.0, 0, 0.5,
        1.0, 1.0, -1.0, 0.25, 0.5,
        1.0, -1.0, -1.0, 0.25, 0,
        -1.0, -1.0, 1.0, 0.25, 0,
        1.0, -1.0, 1.0, 0.5, 0,
        -1.0, 1.0, 1.0, 0.25, 0.5,
        -1.0, 1.0, 1.0, 0.25, 0.5,
        1.0, -1.0, 1.0, 0.5, 0,
        1.0, 1.0, 1.0, 0.5, 0.5,
        -1.0, 1.0, -1.0, 0.5, 0,
        -1.0, 1.0, 1.0, 0.5, 0.5,
        1.0, 1.0, -1.0, 0.75, 0,
        -1.0, 1.0, 1.0, 0.5, 0.5,
        1.0, 1.0, 1.0, 0.75, 0.5,
        1.0, 1.0, -1.0, 0.75, 0,
        -1.0, -1.0, -1.0, 0, 0.5,
        1.0, -1.0, -1.0, 0.25, 0.5,
        -1.0, -1.0, 1.0, 0, 1,
        -1.0, -1.0, 1.0, 0, 1,
        1.0, -1.0, -1.0, 0.25, 0.5,
        1.0, -1.0, 1.0, 0.25, 1,
        -1.0, -1.0, -1.0, 0.25, 0.5,
        -1.0, -1.0, 1.0, 0.25, 1,
        -1.0, 1.0, -1.0, 0.5, 0.5,
        -1.0, -1.0, 1.0, 0.25, 1,
        -1.0, 1.0, 1.0, 0.5, 1,
        -1.0, 1.0, -1.0, 0.5, 0.5,
        1.0, -1.0, -1.0, 0.5, 0.5,
        1.0, 1.0, -1.0, 0.75, 0.5,
        1.0, -1.0, 1.0, 0.5, 1,
        1, -1, 1.0, 0.5, 1,
        1, 1, -1, 0.75, 0.5,
        1, 1, 1, 0.75, 1,
    ],
    indices: []
};
MeshLibrary.cube2 = {
    data: [
        -0.5, -0.5, -0.5, 0.0, 0.0, -1.0, 0.0, 0.0,
        0.5, -0.5, -0.5, 0.0, 0.0, -1.0, 1.0, 0.0,
        0.5, 0.5, -0.5, 0.0, 0.0, -1.0, 1.0, 1.0,
        0.5, 0.5, -0.5, 0.0, 0.0, -1.0, 1.0, 1.0,
        -0.5, 0.5, -0.5, 0.0, 0.0, -1.0, 0.0, 1.0,
        -0.5, -0.5, -0.5, 0.0, 0.0, -1.0, 0.0, 0.0,
        -0.5, -0.5, 0.5, 0.0, 0.0, 1.0, 0.0, 0.0,
        0.5, -0.5, 0.5, 0.0, 0.0, 1.0, 1.0, 0.0,
        0.5, 0.5, 0.5, 0.0, 0.0, 1.0, 1.0, 1.0,
        0.5, 0.5, 0.5, 0.0, 0.0, 1.0, 1.0, 1.0,
        -0.5, 0.5, 0.5, 0.0, 0.0, 1.0, 0.0, 1.0,
        -0.5, -0.5, 0.5, 0.0, 0.0, 1.0, 0.0, 0.0,
        -0.5, 0.5, 0.5, -1.0, 0.0, 0.0, 1.0, 0.0,
        -0.5, 0.5, -0.5, -1.0, 0.0, 0.0, 1.0, 1.0,
        -0.5, -0.5, -0.5, -1.0, 0.0, 0.0, 0.0, 1.0,
        -0.5, -0.5, -0.5, -1.0, 0.0, 0.0, 0.0, 1.0,
        -0.5, -0.5, 0.5, -1.0, 0.0, 0.0, 0.0, 0.0,
        -0.5, 0.5, 0.5, -1.0, 0.0, 0.0, 1.0, 0.0, 0.5,
        0.5, 0.5, 1.0, 0.0, 0.0, 1.0, 0.0, 0.5, 0.5,
        -0.5, 1.0, 0.0, 0.0, 1.0, 1.0, 0.5, -0.5, -0.5,
        1.0, 0.0, 0.0, 0.0, 1.0, 0.5, -0.5, -0.5,
        1.0, 0.0, 0.0, 0.0, 1.0, 0.5, -0.5, 0.5, 1.0,
        0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.5, 1.0, 0.0,
        0.0, 1.0, 0.0, -0.5, -0.5, -0.5, 0.0, -1.0,
        0.0, 0.0, 1.0, 0.5, -0.5, -0.5, 0.0, -1.0,
        0.0, 1.0, 1.0, 0.5, -0.5, 0.5, 0.0, -1.0,
        0.0, 1.0, 0.0, 0.5, -0.5, 0.5, 0.0, -1.0,
        0.0, 1.0, 0.0, -0.5, -0.5, 0.5, 0.0, -1.0,
        0.0, 0.0, 0.0, -0.5, -0.5, -0.5, 0.0, -1.0,
        0.0, 0.0, 1.0, -0.5, 0.5, -0.5, 0.0, 1.0,
        0.0, 0.0, 1.0, 0.5, 0.5, -0.5, 0.0, 1.0, 0.0,
        1.0, 1.0, 0.5, 0.5, 0.5, 0.0, 1.0, 0.0, 1.0, 0.0,
        0.5, 0.5, 0.5, 0.0, 1.0, 0.0, 1.0, 0.0, -0.5, 0.5,
        0.5, 0.0, 1.0, 0.0, 0.0, 0.0, -0.5, 0.5, -0.5,
        0.0, 1.0, 0.0, 0.0, 1.0
    ],
    indices: []
};
MeshLibrary.cube = {
    data: [
        -1.0, -1.0, 1.0,
        1.0, -1.0, 1.0,
        1.0, 1.0, 1.0,
        -1.0, 1.0, 1.0,
        -1.0, -1.0, -1.0,
        -1.0, 1.0, -1.0,
        1.0, 1.0, -1.0,
        1.0, -1.0, -1.0,
        -1.0, 1.0, -1.0,
        -1.0, 1.0, 1.0,
        1.0, 1.0, 1.0,
        1.0, 1.0, -1.0,
        -1.0, -1.0, -1.0,
        1.0, -1.0, -1.0,
        1.0, -1.0, 1.0,
        -1.0, -1.0, 1.0,
        1.0, -1.0, -1.0,
        1.0, 1.0, -1.0,
        1.0, 1.0, 1.0,
        1.0, -1.0, 1.0,
        -1.0, -1.0, -1.0,
        -1.0, -1.0, 1.0,
        -1.0, 1.0, 1.0,
        -1.0, 1.0, -1.0,
    ],
    indices: [
        0, 1, 2, 0, 2, 3,
        4, 5, 6, 4, 6, 7,
        8, 9, 10, 8, 10, 11,
        12, 13, 14, 12, 14, 15,
        16, 17, 18, 16, 18, 19,
        20, 21, 22, 20, 22, 23,
    ]
};



/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["create"] = create;
/* harmony export (immutable) */ __webpack_exports__["fromMat4"] = fromMat4;
/* harmony export (immutable) */ __webpack_exports__["clone"] = clone;
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;
/* harmony export (immutable) */ __webpack_exports__["fromValues"] = fromValues;
/* harmony export (immutable) */ __webpack_exports__["set"] = set;
/* harmony export (immutable) */ __webpack_exports__["identity"] = identity;
/* harmony export (immutable) */ __webpack_exports__["transpose"] = transpose;
/* harmony export (immutable) */ __webpack_exports__["invert"] = invert;
/* harmony export (immutable) */ __webpack_exports__["adjoint"] = adjoint;
/* harmony export (immutable) */ __webpack_exports__["determinant"] = determinant;
/* harmony export (immutable) */ __webpack_exports__["multiply"] = multiply;
/* harmony export (immutable) */ __webpack_exports__["translate"] = translate;
/* harmony export (immutable) */ __webpack_exports__["rotate"] = rotate;
/* harmony export (immutable) */ __webpack_exports__["scale"] = scale;
/* harmony export (immutable) */ __webpack_exports__["fromTranslation"] = fromTranslation;
/* harmony export (immutable) */ __webpack_exports__["fromRotation"] = fromRotation;
/* harmony export (immutable) */ __webpack_exports__["fromScaling"] = fromScaling;
/* harmony export (immutable) */ __webpack_exports__["fromMat2d"] = fromMat2d;
/* harmony export (immutable) */ __webpack_exports__["fromQuat"] = fromQuat;
/* harmony export (immutable) */ __webpack_exports__["normalFromMat4"] = normalFromMat4;
/* harmony export (immutable) */ __webpack_exports__["projection"] = projection;
/* harmony export (immutable) */ __webpack_exports__["str"] = str;
/* harmony export (immutable) */ __webpack_exports__["frob"] = frob;
/* harmony export (immutable) */ __webpack_exports__["add"] = add;
/* harmony export (immutable) */ __webpack_exports__["subtract"] = subtract;
/* harmony export (immutable) */ __webpack_exports__["multiplyScalar"] = multiplyScalar;
/* harmony export (immutable) */ __webpack_exports__["multiplyScalarAndAdd"] = multiplyScalarAndAdd;
/* harmony export (immutable) */ __webpack_exports__["exactEquals"] = exactEquals;
/* harmony export (immutable) */ __webpack_exports__["equals"] = equals;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(4);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 3x3 Matrix
 * @module mat3
 */

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](9);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}

/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {mat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */
function fromMat4(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[4];
  out[4] = a[5];
  out[5] = a[6];
  out[6] = a[8];
  out[7] = a[9];
  out[8] = a[10];
  return out;
}

/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {mat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */
function clone(a) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](9);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}

/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}

/**
 * Create a new mat3 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} A new mat3
 */
function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](9);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}

/**
 * Set the components of a mat3 to the given values
 *
 * @param {mat3} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} out
 */
function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}

/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}

/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    let a01 = a[1], a02 = a[2], a12 = a[5];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a01;
    out[5] = a[7];
    out[6] = a02;
    out[7] = a12;
  } else {
    out[0] = a[0];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a[1];
    out[4] = a[4];
    out[5] = a[7];
    out[6] = a[2];
    out[7] = a[5];
    out[8] = a[8];
  }

  return out;
}

/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
function invert(out, a) {
  let a00 = a[0], a01 = a[1], a02 = a[2];
  let a10 = a[3], a11 = a[4], a12 = a[5];
  let a20 = a[6], a21 = a[7], a22 = a[8];

  let b01 = a22 * a11 - a12 * a21;
  let b11 = -a22 * a10 + a12 * a20;
  let b21 = a21 * a10 - a11 * a20;

  // Calculate the determinant
  let det = a00 * b01 + a01 * b11 + a02 * b21;

  if (!det) {
    return null;
  }
  det = 1.0 / det;

  out[0] = b01 * det;
  out[1] = (-a22 * a01 + a02 * a21) * det;
  out[2] = (a12 * a01 - a02 * a11) * det;
  out[3] = b11 * det;
  out[4] = (a22 * a00 - a02 * a20) * det;
  out[5] = (-a12 * a00 + a02 * a10) * det;
  out[6] = b21 * det;
  out[7] = (-a21 * a00 + a01 * a20) * det;
  out[8] = (a11 * a00 - a01 * a10) * det;
  return out;
}

/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
function adjoint(out, a) {
  let a00 = a[0], a01 = a[1], a02 = a[2];
  let a10 = a[3], a11 = a[4], a12 = a[5];
  let a20 = a[6], a21 = a[7], a22 = a[8];

  out[0] = (a11 * a22 - a12 * a21);
  out[1] = (a02 * a21 - a01 * a22);
  out[2] = (a01 * a12 - a02 * a11);
  out[3] = (a12 * a20 - a10 * a22);
  out[4] = (a00 * a22 - a02 * a20);
  out[5] = (a02 * a10 - a00 * a12);
  out[6] = (a10 * a21 - a11 * a20);
  out[7] = (a01 * a20 - a00 * a21);
  out[8] = (a00 * a11 - a01 * a10);
  return out;
}

/**
 * Calculates the determinant of a mat3
 *
 * @param {mat3} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
  let a00 = a[0], a01 = a[1], a02 = a[2];
  let a10 = a[3], a11 = a[4], a12 = a[5];
  let a20 = a[6], a21 = a[7], a22 = a[8];

  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
}

/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
function multiply(out, a, b) {
  let a00 = a[0], a01 = a[1], a02 = a[2];
  let a10 = a[3], a11 = a[4], a12 = a[5];
  let a20 = a[6], a21 = a[7], a22 = a[8];

  let b00 = b[0], b01 = b[1], b02 = b[2];
  let b10 = b[3], b11 = b[4], b12 = b[5];
  let b20 = b[6], b21 = b[7], b22 = b[8];

  out[0] = b00 * a00 + b01 * a10 + b02 * a20;
  out[1] = b00 * a01 + b01 * a11 + b02 * a21;
  out[2] = b00 * a02 + b01 * a12 + b02 * a22;

  out[3] = b10 * a00 + b11 * a10 + b12 * a20;
  out[4] = b10 * a01 + b11 * a11 + b12 * a21;
  out[5] = b10 * a02 + b11 * a12 + b12 * a22;

  out[6] = b20 * a00 + b21 * a10 + b22 * a20;
  out[7] = b20 * a01 + b21 * a11 + b22 * a21;
  out[8] = b20 * a02 + b21 * a12 + b22 * a22;
  return out;
}

/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to translate
 * @param {vec2} v vector to translate by
 * @returns {mat3} out
 */
function translate(out, a, v) {
  let a00 = a[0], a01 = a[1], a02 = a[2],
    a10 = a[3], a11 = a[4], a12 = a[5],
    a20 = a[6], a21 = a[7], a22 = a[8],
    x = v[0], y = v[1];

  out[0] = a00;
  out[1] = a01;
  out[2] = a02;

  out[3] = a10;
  out[4] = a11;
  out[5] = a12;

  out[6] = x * a00 + y * a10 + a20;
  out[7] = x * a01 + y * a11 + a21;
  out[8] = x * a02 + y * a12 + a22;
  return out;
}

/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
function rotate(out, a, rad) {
  let a00 = a[0], a01 = a[1], a02 = a[2],
    a10 = a[3], a11 = a[4], a12 = a[5],
    a20 = a[6], a21 = a[7], a22 = a[8],

    s = Math.sin(rad),
    c = Math.cos(rad);

  out[0] = c * a00 + s * a10;
  out[1] = c * a01 + s * a11;
  out[2] = c * a02 + s * a12;

  out[3] = c * a10 - s * a00;
  out[4] = c * a11 - s * a01;
  out[5] = c * a12 - s * a02;

  out[6] = a20;
  out[7] = a21;
  out[8] = a22;
  return out;
};

/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/
function scale(out, a, v) {
  let x = v[0], y = v[1];

  out[0] = x * a[0];
  out[1] = x * a[1];
  out[2] = x * a[2];

  out[3] = y * a[3];
  out[4] = y * a[4];
  out[5] = y * a[5];

  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat3} out
 */
function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = v[0];
  out[7] = v[1];
  out[8] = 1;
  return out;
}

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
function fromRotation(out, rad) {
  let s = Math.sin(rad), c = Math.cos(rad);

  out[0] = c;
  out[1] = s;
  out[2] = 0;

  out[3] = -s;
  out[4] = c;
  out[5] = 0;

  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat3} out
 */
function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;

  out[3] = 0;
  out[4] = v[1];
  out[5] = 0;

  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}

/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat2d} a the matrix to copy
 * @returns {mat3} out
 **/
function fromMat2d(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = 0;

  out[3] = a[2];
  out[4] = a[3];
  out[5] = 0;

  out[6] = a[4];
  out[7] = a[5];
  out[8] = 1;
  return out;
}

/**
* Calculates a 3x3 matrix from the given quaternion
*
* @param {mat3} out mat3 receiving operation result
* @param {quat} q Quaternion to create matrix from
*
* @returns {mat3} out
*/
function fromQuat(out, q) {
  let x = q[0], y = q[1], z = q[2], w = q[3];
  let x2 = x + x;
  let y2 = y + y;
  let z2 = z + z;

  let xx = x * x2;
  let yx = y * x2;
  let yy = y * y2;
  let zx = z * x2;
  let zy = z * y2;
  let zz = z * z2;
  let wx = w * x2;
  let wy = w * y2;
  let wz = w * z2;

  out[0] = 1 - yy - zz;
  out[3] = yx - wz;
  out[6] = zx + wy;

  out[1] = yx + wz;
  out[4] = 1 - xx - zz;
  out[7] = zy - wx;

  out[2] = zx - wy;
  out[5] = zy + wx;
  out[8] = 1 - xx - yy;

  return out;
}

/**
* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
*
* @param {mat3} out mat3 receiving operation result
* @param {mat4} a Mat4 to derive the normal matrix from
*
* @returns {mat3} out
*/
function normalFromMat4(out, a) {
  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

  let b00 = a00 * a11 - a01 * a10;
  let b01 = a00 * a12 - a02 * a10;
  let b02 = a00 * a13 - a03 * a10;
  let b03 = a01 * a12 - a02 * a11;
  let b04 = a01 * a13 - a03 * a11;
  let b05 = a02 * a13 - a03 * a12;
  let b06 = a20 * a31 - a21 * a30;
  let b07 = a20 * a32 - a22 * a30;
  let b08 = a20 * a33 - a23 * a30;
  let b09 = a21 * a32 - a22 * a31;
  let b10 = a21 * a33 - a23 * a31;
  let b11 = a22 * a33 - a23 * a32;

  // Calculate the determinant
  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }
  det = 1.0 / det;

  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;

  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;

  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;

  return out;
}

/**
 * Generates a 2D projection matrix with the given bounds
 *
 * @param {mat3} out mat3 frustum matrix will be written into
 * @param {number} width Width of your gl context
 * @param {number} height Height of gl context
 * @returns {mat3} out
 */
function projection(out, width, height) {
    out[0] = 2 / width;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = -2 / height;
    out[5] = 0;
    out[6] = -1;
    out[7] = 1;
    out[8] = 1;
    return out;
}

/**
 * Returns a string representation of a mat3
 *
 * @param {mat3} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +
          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +
          a[6] + ', ' + a[7] + ', ' + a[8] + ')';
}

/**
 * Returns Frobenius norm of a mat3
 *
 * @param {mat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
function frob(a) {
  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))
}

/**
 * Adds two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  return out;
}

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  return out;
}



/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat3} out
 */
function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  return out;
}

/**
 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat3} out the receiving vector
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat3} out
 */
function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  out[2] = a[2] + (b[2] * scale);
  out[3] = a[3] + (b[3] * scale);
  out[4] = a[4] + (b[4] * scale);
  out[5] = a[5] + (b[5] * scale);
  out[6] = a[6] + (b[6] * scale);
  out[7] = a[7] + (b[7] * scale);
  out[8] = a[8] + (b[8] * scale);
  return out;
}

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&
         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&
         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
}

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function equals(a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];
  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];
  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
          Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
          Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
          Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&
          Math.abs(a6 - b6) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&
          Math.abs(a7 - b7) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&
          Math.abs(a8 - b8) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a8), Math.abs(b8)));
}

/**
 * Alias for {@link mat3.multiply}
 * @function
 */
const mul = multiply;
/* harmony export (immutable) */ __webpack_exports__["mul"] = mul;


/**
 * Alias for {@link mat3.subtract}
 * @function
 */
const sub = subtract;
/* harmony export (immutable) */ __webpack_exports__["sub"] = sub;



/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["create"] = create;
/* harmony export (immutable) */ __webpack_exports__["clone"] = clone;
/* harmony export (immutable) */ __webpack_exports__["length"] = length;
/* harmony export (immutable) */ __webpack_exports__["fromValues"] = fromValues;
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;
/* harmony export (immutable) */ __webpack_exports__["set"] = set;
/* harmony export (immutable) */ __webpack_exports__["add"] = add;
/* harmony export (immutable) */ __webpack_exports__["subtract"] = subtract;
/* harmony export (immutable) */ __webpack_exports__["multiply"] = multiply;
/* harmony export (immutable) */ __webpack_exports__["divide"] = divide;
/* harmony export (immutable) */ __webpack_exports__["ceil"] = ceil;
/* harmony export (immutable) */ __webpack_exports__["floor"] = floor;
/* harmony export (immutable) */ __webpack_exports__["min"] = min;
/* harmony export (immutable) */ __webpack_exports__["max"] = max;
/* harmony export (immutable) */ __webpack_exports__["round"] = round;
/* harmony export (immutable) */ __webpack_exports__["scale"] = scale;
/* harmony export (immutable) */ __webpack_exports__["scaleAndAdd"] = scaleAndAdd;
/* harmony export (immutable) */ __webpack_exports__["distance"] = distance;
/* harmony export (immutable) */ __webpack_exports__["squaredDistance"] = squaredDistance;
/* harmony export (immutable) */ __webpack_exports__["squaredLength"] = squaredLength;
/* harmony export (immutable) */ __webpack_exports__["negate"] = negate;
/* harmony export (immutable) */ __webpack_exports__["inverse"] = inverse;
/* harmony export (immutable) */ __webpack_exports__["normalize"] = normalize;
/* harmony export (immutable) */ __webpack_exports__["dot"] = dot;
/* harmony export (immutable) */ __webpack_exports__["cross"] = cross;
/* harmony export (immutable) */ __webpack_exports__["lerp"] = lerp;
/* harmony export (immutable) */ __webpack_exports__["hermite"] = hermite;
/* harmony export (immutable) */ __webpack_exports__["bezier"] = bezier;
/* harmony export (immutable) */ __webpack_exports__["random"] = random;
/* harmony export (immutable) */ __webpack_exports__["transformMat4"] = transformMat4;
/* harmony export (immutable) */ __webpack_exports__["transformMat3"] = transformMat3;
/* harmony export (immutable) */ __webpack_exports__["transformQuat"] = transformQuat;
/* harmony export (immutable) */ __webpack_exports__["rotateX"] = rotateX;
/* harmony export (immutable) */ __webpack_exports__["rotateY"] = rotateY;
/* harmony export (immutable) */ __webpack_exports__["rotateZ"] = rotateZ;
/* harmony export (immutable) */ __webpack_exports__["angle"] = angle;
/* harmony export (immutable) */ __webpack_exports__["str"] = str;
/* harmony export (immutable) */ __webpack_exports__["exactEquals"] = exactEquals;
/* harmony export (immutable) */ __webpack_exports__["equals"] = equals;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(4);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 3 Dimensional Vector
 * @module vec3
 */

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](3);
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  return out;
}

/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {vec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */
function clone(a) {
  var out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](3);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}

/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */
function length(a) {
  let x = a[0];
  let y = a[1];
  let z = a[2];
  return Math.sqrt(x*x + y*y + z*z);
}

/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */
function fromValues(x, y, z) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}

/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the source vector
 * @returns {vec3} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}

/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */
function set(out, x, y, z) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}

/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  return out;
}

/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  return out;
}

/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  return out;
}

/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  return out;
}

/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to ceil
 * @returns {vec3} out
 */
function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  return out;
}

/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to floor
 * @returns {vec3} out
 */
function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  return out;
}

/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  return out;
}

/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  return out;
}

/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to round
 * @returns {vec3} out
 */
function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  return out;
}

/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */
function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  return out;
}

/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */
function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  out[2] = a[2] + (b[2] * scale);
  return out;
}

/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */
function distance(a, b) {
  let x = b[0] - a[0];
  let y = b[1] - a[1];
  let z = b[2] - a[2];
  return Math.sqrt(x*x + y*y + z*z);
}

/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} squared distance between a and b
 */
function squaredDistance(a, b) {
  let x = b[0] - a[0];
  let y = b[1] - a[1];
  let z = b[2] - a[2];
  return x*x + y*y + z*z;
}

/**
 * Calculates the squared length of a vec3
 *
 * @param {vec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
function squaredLength(a) {
  let x = a[0];
  let y = a[1];
  let z = a[2];
  return x*x + y*y + z*z;
}

/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */
function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  return out;
}

/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to invert
 * @returns {vec3} out
 */
function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  return out;
}

/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */
function normalize(out, a) {
  let x = a[0];
  let y = a[1];
  let z = a[2];
  let len = x*x + y*y + z*z;
  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
    out[0] = a[0] * len;
    out[1] = a[1] * len;
    out[2] = a[2] * len;
  }
  return out;
}

/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function cross(out, a, b) {
  let ax = a[0], ay = a[1], az = a[2];
  let bx = b[0], by = b[1], bz = b[2];

  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}

/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
function lerp(out, a, b, t) {
  let ax = a[0];
  let ay = a[1];
  let az = a[2];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  return out;
}

/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
function hermite(out, a, b, c, d, t) {
  let factorTimes2 = t * t;
  let factor1 = factorTimes2 * (2 * t - 3) + 1;
  let factor2 = factorTimes2 * (t - 2) + t;
  let factor3 = factorTimes2 * (t - 1);
  let factor4 = factorTimes2 * (3 - 2 * t);

  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;

  return out;
}

/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
function bezier(out, a, b, c, d, t) {
  let inverseFactor = 1 - t;
  let inverseFactorTimesTwo = inverseFactor * inverseFactor;
  let factorTimes2 = t * t;
  let factor1 = inverseFactorTimesTwo * inverseFactor;
  let factor2 = 3 * t * inverseFactorTimesTwo;
  let factor3 = 3 * factorTimes2 * inverseFactor;
  let factor4 = factorTimes2 * t;

  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;

  return out;
}

/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */
function random(out, scale) {
  scale = scale || 1.0;

  let r = __WEBPACK_IMPORTED_MODULE_0__common__["RANDOM"]() * 2.0 * Math.PI;
  let z = (__WEBPACK_IMPORTED_MODULE_0__common__["RANDOM"]() * 2.0) - 1.0;
  let zScale = Math.sqrt(1.0-z*z) * scale;

  out[0] = Math.cos(r) * zScale;
  out[1] = Math.sin(r) * zScale;
  out[2] = z * scale;
  return out;
}

/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */
function transformMat4(out, a, m) {
  let x = a[0], y = a[1], z = a[2];
  let w = m[3] * x + m[7] * y + m[11] * z + m[15];
  w = w || 1.0;
  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
  return out;
}

/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat3} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */
function transformMat3(out, a, m) {
  let x = a[0], y = a[1], z = a[2];
  out[0] = x * m[0] + y * m[3] + z * m[6];
  out[1] = x * m[1] + y * m[4] + z * m[7];
  out[2] = x * m[2] + y * m[5] + z * m[8];
  return out;
}

/**
 * Transforms the vec3 with a quat
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec3} out
 */
function transformQuat(out, a, q) {
  // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations

  let x = a[0], y = a[1], z = a[2];
  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];

  // calculate quat * vec
  let ix = qw * x + qy * z - qz * y;
  let iy = qw * y + qz * x - qx * z;
  let iz = qw * z + qx * y - qy * x;
  let iw = -qx * x - qy * y - qz * z;

  // calculate result * inverse quat
  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  return out;
}

/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
function rotateX(out, a, b, c){
  let p = [], r=[];
  //Translate point to the origin
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];

  //perform rotation
  r[0] = p[0];
  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);
  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);

  //translate to correct position
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];

  return out;
}

/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
function rotateY(out, a, b, c){
  let p = [], r=[];
  //Translate point to the origin
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];

  //perform rotation
  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);
  r[1] = p[1];
  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);

  //translate to correct position
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];

  return out;
}

/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
function rotateZ(out, a, b, c){
  let p = [], r=[];
  //Translate point to the origin
  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2];

  //perform rotation
  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);
  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);
  r[2] = p[2];

  //translate to correct position
  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];

  return out;
}

/**
 * Get the angle between two 3D vectors
 * @param {vec3} a The first operand
 * @param {vec3} b The second operand
 * @returns {Number} The angle in radians
 */
function angle(a, b) {
  let tempA = fromValues(a[0], a[1], a[2]);
  let tempB = fromValues(b[0], b[1], b[2]);

  normalize(tempA, tempA);
  normalize(tempB, tempB);

  let cosine = dot(tempA, tempB);

  if(cosine > 1.0) {
    return 0;
  }
  else if(cosine < -1.0) {
    return Math.PI;
  } else {
    return Math.acos(cosine);
  }
}

/**
 * Returns a string representation of a vector
 *
 * @param {vec3} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
function str(a) {
  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
}

/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function equals(a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2];
  let b0 = b[0], b1 = b[1], b2 = b[2];
  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a2), Math.abs(b2)));
}

/**
 * Alias for {@link vec3.subtract}
 * @function
 */
const sub = subtract;
/* harmony export (immutable) */ __webpack_exports__["sub"] = sub;


/**
 * Alias for {@link vec3.multiply}
 * @function
 */
const mul = multiply;
/* harmony export (immutable) */ __webpack_exports__["mul"] = mul;


/**
 * Alias for {@link vec3.divide}
 * @function
 */
const div = divide;
/* harmony export (immutable) */ __webpack_exports__["div"] = div;


/**
 * Alias for {@link vec3.distance}
 * @function
 */
const dist = distance;
/* harmony export (immutable) */ __webpack_exports__["dist"] = dist;


/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */
const sqrDist = squaredDistance;
/* harmony export (immutable) */ __webpack_exports__["sqrDist"] = sqrDist;


/**
 * Alias for {@link vec3.length}
 * @function
 */
const len = length;
/* harmony export (immutable) */ __webpack_exports__["len"] = len;


/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */
const sqrLen = squaredLength;
/* harmony export (immutable) */ __webpack_exports__["sqrLen"] = sqrLen;


/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
const forEach = (function() {
  let vec = create();

  return function(a, stride, offset, count, fn, arg) {
    let i, l;
    if(!stride) {
      stride = 3;
    }

    if(!offset) {
      offset = 0;
    }

    if(count) {
      l = Math.min((count * stride) + offset, a.length);
    } else {
      l = a.length;
    }

    for(i = offset; i < l; i += stride) {
      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];
      fn(vec, vec, arg);
      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];
    }

    return a;
  };
})();
/* harmony export (immutable) */ __webpack_exports__["forEach"] = forEach;



/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["create"] = create;
/* harmony export (immutable) */ __webpack_exports__["clone"] = clone;
/* harmony export (immutable) */ __webpack_exports__["fromValues"] = fromValues;
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;
/* harmony export (immutable) */ __webpack_exports__["set"] = set;
/* harmony export (immutable) */ __webpack_exports__["add"] = add;
/* harmony export (immutable) */ __webpack_exports__["subtract"] = subtract;
/* harmony export (immutable) */ __webpack_exports__["multiply"] = multiply;
/* harmony export (immutable) */ __webpack_exports__["divide"] = divide;
/* harmony export (immutable) */ __webpack_exports__["ceil"] = ceil;
/* harmony export (immutable) */ __webpack_exports__["floor"] = floor;
/* harmony export (immutable) */ __webpack_exports__["min"] = min;
/* harmony export (immutable) */ __webpack_exports__["max"] = max;
/* harmony export (immutable) */ __webpack_exports__["round"] = round;
/* harmony export (immutable) */ __webpack_exports__["scale"] = scale;
/* harmony export (immutable) */ __webpack_exports__["scaleAndAdd"] = scaleAndAdd;
/* harmony export (immutable) */ __webpack_exports__["distance"] = distance;
/* harmony export (immutable) */ __webpack_exports__["squaredDistance"] = squaredDistance;
/* harmony export (immutable) */ __webpack_exports__["length"] = length;
/* harmony export (immutable) */ __webpack_exports__["squaredLength"] = squaredLength;
/* harmony export (immutable) */ __webpack_exports__["negate"] = negate;
/* harmony export (immutable) */ __webpack_exports__["inverse"] = inverse;
/* harmony export (immutable) */ __webpack_exports__["normalize"] = normalize;
/* harmony export (immutable) */ __webpack_exports__["dot"] = dot;
/* harmony export (immutable) */ __webpack_exports__["lerp"] = lerp;
/* harmony export (immutable) */ __webpack_exports__["random"] = random;
/* harmony export (immutable) */ __webpack_exports__["transformMat4"] = transformMat4;
/* harmony export (immutable) */ __webpack_exports__["transformQuat"] = transformQuat;
/* harmony export (immutable) */ __webpack_exports__["str"] = str;
/* harmony export (immutable) */ __webpack_exports__["exactEquals"] = exactEquals;
/* harmony export (immutable) */ __webpack_exports__["equals"] = equals;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(4);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 4 Dimensional Vector
 * @module vec4
 */

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](4);
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  return out;
}

/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {vec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */
function clone(a) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}

/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */
function fromValues(x, y, z, w) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](4);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}

/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the source vector
 * @returns {vec4} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}

/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */
function set(out, x, y, z, w) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}

/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}

/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}

/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  out[3] = a[3] * b[3];
  return out;
}

/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  out[3] = a[3] / b[3];
  return out;
}

/**
 * Math.ceil the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to ceil
 * @returns {vec4} out
 */
function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  out[3] = Math.ceil(a[3]);
  return out;
}

/**
 * Math.floor the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to floor
 * @returns {vec4} out
 */
function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  out[3] = Math.floor(a[3]);
  return out;
}

/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  out[3] = Math.min(a[3], b[3]);
  return out;
}

/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  out[3] = Math.max(a[3], b[3]);
  return out;
}

/**
 * Math.round the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to round
 * @returns {vec4} out
 */
function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  out[3] = Math.round(a[3]);
  return out;
}

/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */
function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}

/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */
function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  out[2] = a[2] + (b[2] * scale);
  out[3] = a[3] + (b[3] * scale);
  return out;
}

/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} distance between a and b
 */
function distance(a, b) {
  let x = b[0] - a[0];
  let y = b[1] - a[1];
  let z = b[2] - a[2];
  let w = b[3] - a[3];
  return Math.sqrt(x*x + y*y + z*z + w*w);
}

/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} squared distance between a and b
 */
function squaredDistance(a, b) {
  let x = b[0] - a[0];
  let y = b[1] - a[1];
  let z = b[2] - a[2];
  let w = b[3] - a[3];
  return x*x + y*y + z*z + w*w;
}

/**
 * Calculates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */
function length(a) {
  let x = a[0];
  let y = a[1];
  let z = a[2];
  let w = a[3];
  return Math.sqrt(x*x + y*y + z*z + w*w);
}

/**
 * Calculates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
function squaredLength(a) {
  let x = a[0];
  let y = a[1];
  let z = a[2];
  let w = a[3];
  return x*x + y*y + z*z + w*w;
}

/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to negate
 * @returns {vec4} out
 */
function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = -a[3];
  return out;
}

/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to invert
 * @returns {vec4} out
 */
function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  out[3] = 1.0 / a[3];
  return out;
}

/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */
function normalize(out, a) {
  let x = a[0];
  let y = a[1];
  let z = a[2];
  let w = a[3];
  let len = x*x + y*y + z*z + w*w;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
    out[0] = x * len;
    out[1] = y * len;
    out[2] = z * len;
    out[3] = w * len;
  }
  return out;
}

/**
 * Calculates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
}

/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec4} out
 */
function lerp(out, a, b, t) {
  let ax = a[0];
  let ay = a[1];
  let az = a[2];
  let aw = a[3];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  out[3] = aw + t * (b[3] - aw);
  return out;
}

/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */
function random(out, vectorScale) {
  vectorScale = vectorScale || 1.0;

  //TODO: This is a pretty awful way of doing this. Find something better.
  out[0] = __WEBPACK_IMPORTED_MODULE_0__common__["RANDOM"]();
  out[1] = __WEBPACK_IMPORTED_MODULE_0__common__["RANDOM"]();
  out[2] = __WEBPACK_IMPORTED_MODULE_0__common__["RANDOM"]();
  out[3] = __WEBPACK_IMPORTED_MODULE_0__common__["RANDOM"]();
  normalize(out, out);
  scale(out, out, vectorScale);
  return out;
}

/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */
function transformMat4(out, a, m) {
  let x = a[0], y = a[1], z = a[2], w = a[3];
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
  return out;
}

/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec4} out
 */
function transformQuat(out, a, q) {
  let x = a[0], y = a[1], z = a[2];
  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];

  // calculate quat * vec
  let ix = qw * x + qy * z - qz * y;
  let iy = qw * y + qz * x - qx * z;
  let iz = qw * z + qx * y - qy * x;
  let iw = -qx * x - qy * y - qz * z;

  // calculate result * inverse quat
  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  out[3] = a[3];
  return out;
}

/**
 * Returns a string representation of a vector
 *
 * @param {vec4} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
function str(a) {
  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}

/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function equals(a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
          Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a3), Math.abs(b3)));
}

/**
 * Alias for {@link vec4.subtract}
 * @function
 */
const sub = subtract;
/* harmony export (immutable) */ __webpack_exports__["sub"] = sub;


/**
 * Alias for {@link vec4.multiply}
 * @function
 */
const mul = multiply;
/* harmony export (immutable) */ __webpack_exports__["mul"] = mul;


/**
 * Alias for {@link vec4.divide}
 * @function
 */
const div = divide;
/* harmony export (immutable) */ __webpack_exports__["div"] = div;


/**
 * Alias for {@link vec4.distance}
 * @function
 */
const dist = distance;
/* harmony export (immutable) */ __webpack_exports__["dist"] = dist;


/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */
const sqrDist = squaredDistance;
/* harmony export (immutable) */ __webpack_exports__["sqrDist"] = sqrDist;


/**
 * Alias for {@link vec4.length}
 * @function
 */
const len = length;
/* harmony export (immutable) */ __webpack_exports__["len"] = len;


/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */
const sqrLen = squaredLength;
/* harmony export (immutable) */ __webpack_exports__["sqrLen"] = sqrLen;


/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
const forEach = (function() {
  let vec = create();

  return function(a, stride, offset, count, fn, arg) {
    let i, l;
    if(!stride) {
      stride = 4;
    }

    if(!offset) {
      offset = 0;
    }

    if(count) {
      l = Math.min((count * stride) + offset, a.length);
    } else {
      l = a.length;
    }

    for(i = offset; i < l; i += stride) {
      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];
      fn(vec, vec, arg);
      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];
    }

    return a;
  };
})();
/* harmony export (immutable) */ __webpack_exports__["forEach"] = forEach;



/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Material", function() { return Material; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Basic", function() { return Basic; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Physical", function() { return Physical; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Attribute", function() { return Attribute; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_util__ = __webpack_require__(0);

class Attribute extends __WEBPACK_IMPORTED_MODULE_0__util_util__["c" /* attribute */]._Attribute {
    _setValue(value) {
        if (!__WEBPACK_IMPORTED_MODULE_0__util_util__["h" /* types */].isNumber(value) && !__WEBPACK_IMPORTED_MODULE_0__util_util__["h" /* types */].isTexture(value)) {
            value = __WEBPACK_IMPORTED_MODULE_0__util_util__["i" /* vector */].requireVec3(value);
        }
        return value;
    }
    isTexture() {
        return __WEBPACK_IMPORTED_MODULE_0__util_util__["h" /* types */].isTexture(this.value);
    }
    getGLSLType() {
        return __WEBPACK_IMPORTED_MODULE_0__util_util__["h" /* types */].getGLSLType(this.value);
    }
}
class MaterialAttributeMap extends __WEBPACK_IMPORTED_MODULE_0__util_util__["c" /* attribute */]._AttributeMap {
    constructor() { super(); }
}
class Material extends __WEBPACK_IMPORTED_MODULE_0__util_util__["c" /* attribute */].Attributable {
    constructor(gl) {
        super();
        this.attributes = new MaterialAttributeMap();
        this.gl = gl;
    }
    getLightingModel() {
        return this.lightingModel;
    }
    hasTexture() {
        for (let attr of this.enumerateAttributes()) {
            if (attr.isTexture())
                return true;
        }
        return false;
    }
    clone() {
        let mat = this._clone(Material, Attribute, this.gl);
        mat.lightingModel = this.getLightingModel();
        return mat;
    }
    static Basic(gl, _albedo = [1, 1, 1]) {
        let mat = new Material(gl);
        mat.lightingModel = 'physical';
        mat.addAttribute(new Attribute('albedo', _albedo, __WEBPACK_IMPORTED_MODULE_0__util_util__["c" /* attribute */].validators.Vec3OrTexture));
        return mat;
    }
    static Physical(gl, _albedo = [1, 1, 1], _roughness = 0.1, _metallic = 0.1) {
        let mat = new Material(gl);
        mat.lightingModel = 'physical';
        mat.addAttribute(new Attribute('albedo', _albedo, __WEBPACK_IMPORTED_MODULE_0__util_util__["c" /* attribute */].validators.Vec3OrTexture));
        mat.addAttribute(new Attribute('roughness', _roughness, __WEBPACK_IMPORTED_MODULE_0__util_util__["c" /* attribute */].validators.NumberOrTexture));
        mat.addAttribute(new Attribute('metallic', _metallic, __WEBPACK_IMPORTED_MODULE_0__util_util__["c" /* attribute */].validators.NumberOrTexture));
        return mat;
    }
}
function Basic(gl) {
    return Material.Basic(gl);
}
function Physical(gl) {
    return Material.Physical(gl);
}



/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["requireVec3"] = requireVec3;
/* harmony export (immutable) */ __webpack_exports__["cloneVec3Convertible"] = cloneVec3Convertible;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_gl_matrix__ = __webpack_require__(1);

function requireVec3(val) {
    if (val instanceof Array) {
        let len = val.length;
        if (len !== 3)
            throw new Error(`Array must have 3 elements; ${len} were present.`);
        val = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].fromValues(val[0], val[1], val[2]);
    }
    else if (typeof (val) == 'number') {
        val = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].fromValues(val, val, val);
    }
    return val;
}
function cloneVec3Convertible(data) {
    if (typeof (data) == 'number') {
        return data;
    }
    else if (Array.isArray(data)) {
        return data.slice();
    }
    else {
        return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].clone(data);
    }
}


/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transform", function() { return transform; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_gl_matrix__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math_wgl_math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__matrix_composition_util__ = __webpack_require__(53);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "lerp", function() { return __WEBPACK_IMPORTED_MODULE_3__matrix_composition_util__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "decompose", function() { return __WEBPACK_IMPORTED_MODULE_3__matrix_composition_util__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "recompose", function() { return __WEBPACK_IMPORTED_MODULE_3__matrix_composition_util__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "requireCompleteCompositionT", function() { return __WEBPACK_IMPORTED_MODULE_3__matrix_composition_util__["d"]; });




class transform {
    constructor(data = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].create()) {
        this.data = data;
    }
    identity() {
        __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].identity(this.data);
        return this;
    }
    translate(val) {
        val = __WEBPACK_IMPORTED_MODULE_1__util__["i" /* vector */].requireVec3(val);
        __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].translate(this.data, this.data, val);
        return this;
    }
    rotate(rad, axis) {
        axis = __WEBPACK_IMPORTED_MODULE_1__util__["i" /* vector */].requireVec3(axis);
        __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].rotate(this.data, this.data, rad, axis);
        return this;
    }
    quatRotate(q) {
        __WEBPACK_IMPORTED_MODULE_2__math_wgl_math__["f" /* quatToRotationMatrix */](q, this.data);
        return this;
    }
    scale(val) {
        val = __WEBPACK_IMPORTED_MODULE_1__util__["i" /* vector */].requireVec3(val);
        __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].scale(this.data, this.data, val);
        return this;
    }
    mat() {
        return this.data;
    }
    clone() {
        return new transform(this.matCopy());
    }
    matCopy() {
        return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].copy(__WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].create(), this.data);
    }
}



/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["unsafeHash"] = unsafeHash;
/* harmony export (immutable) */ __webpack_exports__["unsafeHashFunc"] = unsafeHashFunc;
/* harmony export (immutable) */ __webpack_exports__["clone"] = clone;
/* harmony export (immutable) */ __webpack_exports__["ind2sub"] = ind2sub;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__type_util__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_gl_matrix__ = __webpack_require__(1);


function cloneGLMArray(data) {
    if (__WEBPACK_IMPORTED_MODULE_0__type_util__["isMat4"](data)) {
        return __WEBPACK_IMPORTED_MODULE_1_gl_matrix__["c" /* mat4 */].copy(__WEBPACK_IMPORTED_MODULE_1_gl_matrix__["c" /* mat4 */].create(), data);
    }
    else if (__WEBPACK_IMPORTED_MODULE_0__type_util__["isVec3"](data)) {
        return __WEBPACK_IMPORTED_MODULE_1_gl_matrix__["f" /* vec3 */].copy(__WEBPACK_IMPORTED_MODULE_1_gl_matrix__["f" /* vec3 */].create(), data);
    }
}
function unsafeHash(data) {
    // https://stackoverflow.com/questions/6122571/simple-non-secure-hash-function-for-javascript
    let hash = 0;
    if (data.length === 0)
        return hash;
    for (let i = 0; i < data.length; i++) {
        let char = data.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash;
    }
    return hash;
}
function unsafeHashFunc(data) {
    return unsafeHash(data.toString());
}
function clone(data) {
    if (__WEBPACK_IMPORTED_MODULE_0__type_util__["isPrimitive"](data)) {
        return data;
    }
    else if (__WEBPACK_IMPORTED_MODULE_0__type_util__["isGLMArrayType"](data)) {
        return cloneGLMArray(data);
    }
    else if (__WEBPACK_IMPORTED_MODULE_0__type_util__["isArray"](data)) {
        return data.slice();
    }
    else if (__WEBPACK_IMPORTED_MODULE_0__type_util__["isTexture"](data)) {
        return data.clone();
    }
    throw new Error(`Unrecognized type.`);
}
function ind2sub(idx, dims) {
    // http://kritisen.com/2011/08/17/subscripts-from-linear-index-and-vice-versa-c/
    let n = dims.length;
    let prod = [];
    let result = new Array(n);
    for (let i = 0; i < n; i++) {
        prod[i] = 1;
        for (let j = n - 1; j > i; j--)
            prod[i] *= dims[j];
    }
    for (let i = 0; i < n; i++) {
        result[i] = idx;
        for (let j = 0; j < i; j++)
            result[i] = result[i] % prod[j];
        result[i] = Math.floor(result[i] / prod[i]);
    }
    return result;
}


/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ratios", function() { return ratios; });
class Ratio {
    constructor(first, second, alias) {
        this.first = first;
        this.second = second;
        this.alias = alias;
    }
    static scale(a, b) {
        return (b / a.second) * a.first;
    }
}
/* harmony export (immutable) */ __webpack_exports__["Ratio"] = Ratio;

class Duration {
    constructor(ratio, amount) {
        this.ratio = ratio;
        this.amount = amount;
    }
    value() {
        return Ratio.scale(this.ratio, this.amount);
        // return (amt / sec) * first
    }
    static lt(a, b) {
        return a.value() < b.value();
    }
    static le(a, b) {
        return a.value() <= b.value();
    }
    static eq(a, b) {
        return a.value() == b.value();
    }
    static gt(a, b) {
        return a.value() > b.value();
    }
    static ge(a, b) {
        return a.value() >= b.value();
    }
}
/* harmony export (immutable) */ __webpack_exports__["Duration"] = Duration;

var ratios;
(function (ratios) {
    function ms() {
        return new Ratio(1, 1, 'ms');
    }
    ratios.ms = ms;
    function s() {
        return new Ratio(1, 1 / 1000, 's');
    }
    ratios.s = s;
})(ratios || (ratios = {}));
class DeltaTimer {
    constructor() {
        this.last = 0;
        this._delta = 0;
        this.first = true;
        this.ratio = ratios.s();
    }
    update() {
        let now = Date.now();
        if (this.first) {
            this.last = now;
            this.first = false;
            return;
        }
        this._delta = now - this.last;
        this.last = now;
    }
    firstUpdate() {
        return this.first;
    }
    setRatio(ratio) {
        this.ratio = ratio;
    }
    getRatio() {
        return this.ratio;
    }
    delta() {
        return (this._delta / this.ratio.first) * this.ratio.second;
    }
    deltaDuration(a) {
        if (a === null) {
            a = new Duration(this.ratio, this._delta);
            return a;
        }
        a.ratio = this.ratio;
        a.amount = this._delta;
        return a;
    }
}
/* harmony export (immutable) */ __webpack_exports__["DeltaTimer"] = DeltaTimer;



/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["ensureArray"] = ensureArray;
/* harmony export (immutable) */ __webpack_exports__["getSortedIndex"] = getSortedIndex;
/* harmony export (immutable) */ __webpack_exports__["keep"] = keep;
/* harmony export (immutable) */ __webpack_exports__["min"] = min;
/* harmony export (immutable) */ __webpack_exports__["max"] = max;
/* harmony export (immutable) */ __webpack_exports__["test"] = test;
/* harmony export (immutable) */ __webpack_exports__["arrange"] = arrange;
/* harmony export (immutable) */ __webpack_exports__["find"] = find;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__assert_util__ = __webpack_require__(11);

function ensureArray(val) {
    if (!Array.isArray(val))
        val = [val];
    return val;
}
function getSortedIndex(data, comparator) {
    const dataWithIndex = [];
    for (let i = 0; i < data.length; i++) {
        dataWithIndex.push([data[i], i]);
    }
    dataWithIndex.sort(comparator);
    const index = [];
    for (let i = 0; i < dataWithIndex.length; i++) {
        index.push(dataWithIndex[i][1]);
    }
    return index;
}
function keep(data, mask) {
    __WEBPACK_IMPORTED_MODULE_0__assert_util__["assertMatchingLengths"](data, mask);
    const masked = [];
    for (let i = 0; i < mask.length; i++) {
        if (mask[i])
            masked.push(data[i]);
    }
    return masked;
}
function minMax(data, isMin) {
    if (data.length === 0)
        return NaN;
    let _val;
    if (isMin)
        _val = Infinity;
    else
        _val = -Infinity;
    for (let i = 0; i < data.length; i++) {
        if (isMin && data[i] < _val)
            _val = data[i];
        else if (!isMin && data[i] > _val)
            _val = data[i];
    }
    return _val;
}
function min(data) {
    return minMax(data, true);
}
function max(data) {
    return minMax(data, false);
}
function test(data, func) {
    const res = [];
    for (let i = 0; i < data.length; i++) {
        res.push(func(data[i]));
    }
    return res;
}
function arrange(data, indices) {
    let out = [];
    for (let i = 0; i < indices.length; i++) {
        if (indices[i] < 0 || indices[i] > data.length - 1)
            throw new Error('Index exceeds array dimensions.');
        out.push(data[indices[i]]);
    }
    return out;
}
function find(data) {
    let indices = [];
    for (let i = 0; i < data.length; i++) {
        if (data[i])
            indices.push(i);
    }
    return indices;
}


/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Light", function() { return Light; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Point", function() { return Point; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Directional", function() { return Directional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Attribute", function() { return Attribute; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_util__ = __webpack_require__(0);

class Attribute extends __WEBPACK_IMPORTED_MODULE_0__util_util__["c" /* attribute */]._Attribute {
    _setValue(value) {
        if (typeof (value) !== 'number' && typeof (value) !== 'boolean')
            value = __WEBPACK_IMPORTED_MODULE_0__util_util__["i" /* vector */].requireVec3(value);
        return value;
    }
}
class LightAttributeMap extends __WEBPACK_IMPORTED_MODULE_0__util_util__["c" /* attribute */]._AttributeMap {
    constructor() { super(); }
}
class Light extends __WEBPACK_IMPORTED_MODULE_0__util_util__["c" /* attribute */].Attributable {
    constructor(gl, _index = 0, _color = [1, 1, 1], _mask = [1, 1, 1]) {
        super();
        this.active = true;
        this.gl = gl;
        this.index = _index;
        this.attributes = new LightAttributeMap();
        this.addAttribute(new Attribute('color', _color, __WEBPACK_IMPORTED_MODULE_0__util_util__["c" /* attribute */].validators.Vec3));
        this.addAttribute(new Attribute('mask', _mask, __WEBPACK_IMPORTED_MODULE_0__util_util__["c" /* attribute */].validators.Vec3));
    }
    setMask(val) {
        this.getAttribute('mask').setValue(val);
    }
    setColor(val) {
        this.getAttribute('color').setValue(val);
    }
    setIndex(val) {
        this.index = val;
    }
    getIndex() {
        return this.index;
    }
    getColor() {
        return this.getAttribute('color').peekValue();
    }
    getName() {
        return this.name;
    }
    getMask() {
        return this.getAttribute('mask').peekValue();
    }
    clone() {
        return this._clone(Light, Attribute, this.gl);
    }
    static Point(gl, _position = [1, 1, 1], _color = [1, 1, 1], _index = 0) {
        let light = new Light(gl, _index, _color);
        light.addAttribute(new Attribute('position', _position));
        light.name = 'point';
        return light;
    }
    static Directional(gl, _direction = [1, 1, 1], _color = [1, 1, 1], _index = 0) {
        let light = new Light(gl, _index, _color);
        light.addAttribute(new Attribute('direction', _direction));
        light.name = 'directional';
        return light;
    }
}
function Point(gl) {
    return Light.Point(gl);
}
function Directional(gl) {
    return Light.Directional(gl);
}



/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__primitives__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__vertex__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__fragment__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__builder__ = __webpack_require__(73);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "fromModel", function() { return __WEBPACK_IMPORTED_MODULE_3__builder__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "fromSource", function() { return __WEBPACK_IMPORTED_MODULE_3__builder__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "getSource", function() { return __WEBPACK_IMPORTED_MODULE_3__builder__["c"]; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "fragment", function() { return __WEBPACK_IMPORTED_MODULE_2__fragment__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "primitives", function() { return __WEBPACK_IMPORTED_MODULE_0__primitives__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "vertex", function() { return __WEBPACK_IMPORTED_MODULE_1__vertex__; });







/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = requireUniformString;
/* harmony export (immutable) */ __webpack_exports__["b"] = requireUniformName;
class Map {
    static getUniform(name) {
        return Map.items[name];
    }
    static isUniform(name) {
        return Map.getUniform(name) !== undefined;
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Map;

Map.items = {
    // material
    'albedo': 'albedo',
    'roughness': 'roughness',
    'metallic': 'metallic',
    //	light
    'position': 'position',
    'direction': 'direction',
    'color': 'color',
    'mask': 'mask',
    'point': 'point_lights',
    'directional': 'directional_lights',
    //	core
    'model': 'model',
    'view': 'view',
    'projection': 'projection',
    'camera_position': 'cam_position'
};
function requireUniformString(value) {
    let item = Map.items[value];
    if (item !== undefined)
        return item;
    return value;
}
function requireUniformName(name) {
    return Map.getUniform(name);
}


/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["make"] = make;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__primitives__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_vertex__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__library_vertex__ = __webpack_require__(70);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "components", function() { return __WEBPACK_IMPORTED_MODULE_1__components_vertex__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "library", function() { return __WEBPACK_IMPORTED_MODULE_2__library_vertex__; });



function make(source) {
    const src = [];
    const attrs = source.attributes;
    const varyings = source.varyings;
    const uns = source.uniforms;
    const userUns = source.userUniforms;
    let mapFunc = source.attributeMapFunc;
    if (mapFunc === undefined)
        mapFunc = __WEBPACK_IMPORTED_MODULE_0__primitives__["defaultAttributeMapFunc"];
    const head = __WEBPACK_IMPORTED_MODULE_0__primitives__["makeHeader"](mapFunc, attrs, varyings, uns, userUns);
    src.push(head);
    __WEBPACK_IMPORTED_MODULE_0__primitives__["makeFuncOrArrayFunc"](src, source.body);
    src.push(__WEBPACK_IMPORTED_MODULE_0__primitives__["makeMain"](source.main));
    return src.join('\n');
}



/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["make"] = make;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__primitives__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__library_fragment__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shader_attributes__ = __webpack_require__(9);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "library", function() { return __WEBPACK_IMPORTED_MODULE_1__library_fragment__; });




function make(source) {
    const src = [];
    const varyings = source.varyings;
    const uns = source.uniforms;
    const userUns = source.userUniforms;
    const mapFunc = __WEBPACK_IMPORTED_MODULE_2__shader_attributes__["a" /* ShaderAttributeDataType3D */];
    const head = __WEBPACK_IMPORTED_MODULE_0__primitives__["makeHeader"](mapFunc, [], varyings, uns, userUns);
    src.push(`precision ${source.precision} float;`);
    __WEBPACK_IMPORTED_MODULE_0__primitives__["makeFuncOrArrayFunc"](src, source.body);
    src.push(head);
    src.push(__WEBPACK_IMPORTED_MODULE_0__primitives__["makeMain"](source.main));
    return src.join('\n');
}


/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["getNPointLightsName"] = getNPointLightsName;
/* harmony export (immutable) */ __webpack_exports__["getNDirectionalLightsName"] = getNDirectionalLightsName;
/* harmony export (immutable) */ __webpack_exports__["makePointLightStruct"] = makePointLightStruct;
/* harmony export (immutable) */ __webpack_exports__["makeDirectionalLightStruct"] = makeDirectionalLightStruct;
/* harmony export (immutable) */ __webpack_exports__["PBR"] = PBR;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__primitives__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__constants__ = __webpack_require__(32);


function getNPointLightsName() {
    return 'n_point_lights';
}
function getNDirectionalLightsName() {
    return 'n_directional_lights';
}
function makePointLightStruct() {
    let lightTypeName = __WEBPACK_IMPORTED_MODULE_0__primitives__["getLightTypeName"]('point');
    let lightPos = __WEBPACK_IMPORTED_MODULE_0__primitives__["getBuiltinUniformName"]('position');
    let lightCol = __WEBPACK_IMPORTED_MODULE_0__primitives__["getBuiltinUniformName"]('color');
    let lightMask = __WEBPACK_IMPORTED_MODULE_0__primitives__["getBuiltinUniformName"]('mask');
    return `struct ${lightTypeName} {
		vec3 ${lightPos};
		vec3 ${lightCol};
		vec3 ${lightMask};
	};`;
}
function makeDirectionalLightStruct() {
    let lightTypeName = __WEBPACK_IMPORTED_MODULE_0__primitives__["getLightTypeName"]('directional');
    let lightDir = __WEBPACK_IMPORTED_MODULE_0__primitives__["getBuiltinUniformName"]('direction');
    let lightCol = __WEBPACK_IMPORTED_MODULE_0__primitives__["getBuiltinUniformName"]('color');
    let lightMask = __WEBPACK_IMPORTED_MODULE_0__primitives__["getBuiltinUniformName"]('mask');
    return `struct ${lightTypeName} {
		vec3 ${lightDir};
		vec3 ${lightCol};
		vec3 ${lightMask};
	};`;
}
function PBR() {
    const src = `

		${__WEBPACK_IMPORTED_MODULE_1__constants__["PI"]()}

		float distribution_ggx(vec3 N, vec3 H, float roughness);
		float geometry_schlick_ggx(float NdotV, float roughness);
		float geometry_smith(vec3 N, vec3 V, vec3 L, float roughness);
		vec3 fresnel_schlick(float cos_theta, vec3 F0);

		vec3 PBR(
		     vec3 normals,
		     vec3 albedo,
		     float roughness,
		     float metallic,
		     vec3 cam_position,
		     vec3 world_position,
		     vec3 light_position,
		     vec3 light_color,
		     bool is_directional) {
		    
		    vec3 F0 = vec3(0.04);
		    F0 = mix(F0, albedo, metallic);
		    
		    vec3 N = normalize(normals);
		    vec3 V = normalize(cam_position - world_position);
		    
		    vec3 L;

		    if (!is_directional) {
		    	L = normalize(light_position - world_position);
		    } else {
		    	L = normalize(-light_position);
		    }

		    vec3 H = normalize(V + L);

		    float attenuation = 1.0;
		    
		    if (!is_directional) {
		    	float distance = length(light_position - world_position);
		    	attenuation = 1.0 / (distance * distance * 0.0002);
		    }
		    
		    vec3 radiance = light_color * attenuation;
		    
		    vec3 F = fresnel_schlick(max(dot(H, V), 0.0), F0);
		    float NDF = distribution_ggx(N, H, roughness);
		    float G = geometry_smith(N, V, L, roughness);
		    vec3 numer = vec3(NDF) * vec3(G) * F;
		    float denom = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001;
		    vec3 specular = numer / denom;
		    
		    vec3 kS = F;
		    vec3 kD = vec3(1.0) - kS;
		    kD *= 1.0 - metallic;
		    
		    float NdotL = max(dot(N, L), 0.0);
		    return (kD * albedo / PI + specular) * radiance * NdotL;
		}

		//
		//  Fresnel component (F)
		//

		vec3 fresnel_schlick(float cosTheta, vec3 F0) {
		    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
		}

		//
		//  Normal distribution component (D)
		//

		float distribution_beckman(vec3 h, vec3 n, float roughness) {
		    float a = roughness * roughness;
		    float a2 = a * a;
		    float n_dot_h = max(dot(n, h), 0.0);
		    float n_dot_h2 = n_dot_h * n_dot_h;
		    float part_a = 1.0 / (PI * a2 * pow(n_dot_h, 4.0));
		    float exp_component = (n_dot_h2 - 1.0) / (a2 * n_dot_h2);
		    return part_a * exp(exp_component);
		}

		float distribution_ggx(vec3 N, vec3 H, float roughness) {
		    float a = roughness * roughness;
		    float a2 = a * a;
		    float NdotH = max(dot(N, H), 0.0);
		    float NdotH2 = NdotH * NdotH;
		    
		    float denom = (NdotH2 * (a2-1.0) + 1.0);
		    denom = PI * denom * denom;
		    
		    return a2 / denom;
		}

		//
		//  Geometry distribution component (G)
		//

		float geometry_schlick_ggx(float NdotV, float roughness) {
		    float r = roughness + 1.0;
		    //  direct light
		    float k = (r*r) / 8.0;
		    //  IBL
		    //  float k = (roughness * roughness) / 2;
		    float denom = NdotV * (1.0 - k) + k;
		    return NdotV / denom;
		}

		float geometry_smith(vec3 N, vec3 V, vec3 L, float roughness) {
		    float NdotV = max(dot(N, V), 0.0);
		    float NdotL = max(dot(N, L), 0.0);
		    float ggx2 = geometry_schlick_ggx(NdotV, roughness);
		    float ggx1 = geometry_schlick_ggx(NdotL, roughness);
		    return ggx1 * ggx2;
		}`;
    return src;
}


/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["PI"] = PI;
/* harmony export (immutable) */ __webpack_exports__["defineNPointLights"] = defineNPointLights;
/* harmony export (immutable) */ __webpack_exports__["defineNDirectionalLights"] = defineNDirectionalLights;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lighting__ = __webpack_require__(31);


function PI() {
    return `const float PI = 3.14159265359;`;
}
function defineNPointLights(N) {
    __WEBPACK_IMPORTED_MODULE_0__util_util__["b" /* assert */].assertInteger(N, 'number of point lights');
    let name = __WEBPACK_IMPORTED_MODULE_1__lighting__["getNPointLightsName"]();
    return `const int ${name} = ${N};`;
}
function defineNDirectionalLights(N) {
    __WEBPACK_IMPORTED_MODULE_0__util_util__["b" /* assert */].assertInteger(N, 'number of point lights');
    let name = __WEBPACK_IMPORTED_MODULE_1__lighting__["getNDirectionalLightsName"]();
    return `const int ${name} = ${N};`;
}


/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_resource__ = __webpack_require__(7);

class FBO extends __WEBPACK_IMPORTED_MODULE_0__common_resource__["a" /* Resource */] {
    constructor(gl) {
        super();
        this.gl = gl;
        this.handle = gl.createFramebuffer();
        this.textures = {};
    }
    bind() {
        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.handle);
        this._isBound = true;
    }
    unbind() {
        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);
        this._isBound = false;
    }
    isBound() {
        return this._isBound;
    }
    checkStatus() {
        const gl = this.gl;
        let status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
        switch (status) {
            case gl.FRAMEBUFFER_COMPLETE:
                break;
            case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                console.warn('FRAMEBUFFER_INCOMPLETE_ATTACHMENT');
                break;
            case gl.FRAMEBUFFER_UNSUPPORTED:
                console.warn('FRAMEBUFFER_UNSUPPORTED');
                break;
            case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                console.warn('FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT');
                break;
            case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                console.warn('FRAMEBUFFER_INCOMPLETE_DIMENSIONS');
            default:
                console.warn(`(unspecified): ${status}`);
                break;
        }
        return status === gl.FRAMEBUFFER_COMPLETE;
    }
    getTexture(kind) {
        let tex = this.textures[kind];
        if (tex === undefined) {
            console.warn(`Requested non-attached texture: "${kind}".`);
            return null;
        }
        return tex;
    }
    attach(kind, texture) {
        this.assertBound('bind');
        const gl = this.gl;
        gl.framebufferTexture2D(gl.FRAMEBUFFER, kind, gl.TEXTURE_2D, texture.handle, 0);
        this.textures[kind] = texture;
    }
    assertBound(op) {
        if (!this._isBound)
            throw new Error(`Operation / method "${op}" requires that the FBO be bound first.`);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = FBO;



/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return text; });
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var text;
(function (text) {
    function load(url) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                let xhr = new XMLHttpRequest();
                xhr.onreadystatechange = () => {
                    if (xhr.readyState == 4) {
                        if (xhr.status == 200) {
                            resolve(xhr.responseText);
                        }
                        else {
                            reject(xhr);
                        }
                    }
                };
                xhr.open('GET', url);
                xhr.send();
            });
        });
    }
    text.load = load;
})(text || (text = {}));


/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = obj;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mesh_mesh__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mesh_vertex__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_assert_util__ = __webpack_require__(11);



function obj(gl, objectData) {
    let lines = objectData.split('\n');
    let raw = {
        indices: [],
        vertices: [],
        normals: [],
        uvs: []
    };
    let packed = {
        indices: [],
        vertices: [],
        normals: [],
        uvs: []
    };
    let mesh = new __WEBPACK_IMPORTED_MODULE_0__mesh_mesh__["a" /* Mesh */](gl);
    let index = 0;
    for (const line of lines) {
        let isV = line.startsWith('v');
        let isVN = line.startsWith('vn');
        let isVT = line.startsWith('vt');
        let isF = line.startsWith('f');
        if (isV && !isVN && !isVT) {
            rawAppender('vertices', line.split(' '), 4, 'vertex data');
        }
        else if (isVN) {
            rawAppender('normals', line.split(' '), 4, 'vertex normal data');
        }
        else if (isVT) {
            rawAppender('uvs', line.split(' '), 3, 'uv data');
        }
        else if (isF) {
            let _indices = line.split(' ').map(inds => inds.split('/'));
            if (_indices[_indices.length - 1].length === 1)
                _indices.pop();
            _indices.map((ind, i) => {
                let msg = 'Face data were formatted incorrectly';
                if (i == 0 && ind.length !== 1)
                    throw new Error(msg);
                if (i > 0 && ind.length !== 3)
                    throw new Error(msg);
            });
            _indices.shift();
            let parsedIndices = _indices.map(ind => parseIndices(ind));
            packedAppender(parsedIndices, [0, 1, 2]);
            for (let i = 3; i < parsedIndices.length; ++i) {
                packedAppender(parsedIndices, [i - 3, i - 1, i]);
            }
        }
    }
    mesh.setIndices(new Uint16Array(packed.indices));
    mesh.setTopology(__WEBPACK_IMPORTED_MODULE_1__mesh_vertex__["a" /* Topologies */].TRIANGLES);
    mesh.finalize();
    return mesh;
    //
    //    helpers
    //
    function parseAndValidate(value, func, alias) {
        let res = func(value);
        if (isNaN(res))
            throw new Error(`Error parsing "${alias}": value was NaN.`);
        return res;
    }
    function rawAppender(name, values, N, alias) {
        __WEBPACK_IMPORTED_MODULE_2__util_assert_util__["assertNValues"](values, N, alias);
        for (let i = 1; i < N; i++) {
            let value = parseAndValidate(values[i], parseFloat, alias);
            if (name === 'uvs')
                value = 1 - value;
            raw[name].push(value);
        }
    }
    function vertexAppender(vi, ni, ui) {
        let vertex = new __WEBPACK_IMPORTED_MODULE_1__mesh_vertex__["b" /* Vertex */]();
        let x = raw.vertices[(vi - 1) * 3 + 0];
        let y = raw.vertices[(vi - 1) * 3 + 1];
        let z = raw.vertices[(vi - 1) * 3 + 2];
        let nx = raw.normals[(ni - 1) * 3 + 0];
        let ny = raw.normals[(ni - 1) * 3 + 1];
        let nz = raw.normals[(ni - 1) * 3 + 2];
        vertex.setPosition(new Float32Array([x, y, z]));
        vertex.setNormal(new Float32Array([nx, ny, nz]));
        packed.indices.push(index++);
        if (ui === null) {
            vertex.setUV(new Float32Array([0, 0]));
            mesh.addVertex(vertex);
            return;
        }
        let u = raw.uvs[(ui - 1) * 2 + 0];
        let v = raw.uvs[(ui - 1) * 2 + 1];
        vertex.setUV(new Float32Array([u, v]));
        mesh.addVertex(vertex);
    }
    function packedAppender(inds, fragInds) {
        __WEBPACK_IMPORTED_MODULE_2__util_assert_util__["assertNValues"](fragInds, 3, 'triangles');
        for (let i = 0; i < 3; i++) {
            let ind = fragInds[i];
            vertexAppender(inds[ind][0], inds[ind][2], inds[ind][1]);
        }
    }
    function parseIndices(inds) {
        let vertIndex = parseAndValidate(inds[0], parseInt, 'vertex index');
        let normIndex = parseAndValidate(inds[2], parseInt, 'normal index');
        let uvIndex = null;
        if (inds[1] !== '')
            uvIndex = parseAndValidate(inds[1], parseInt, 'uv index');
        return [vertIndex, uvIndex, normIndex];
    }
}


/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return image; });
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var image;
(function (image) {
    function load(url) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                let img = document.createElement('img');
                img.onload = (e) => {
                    window.URL.revokeObjectURL(img.src);
                    resolve(img);
                };
                img.onerror = (e) => reject(e);
                img.src = url;
            });
        });
    }
    image.load = load;
})(image || (image = {}));


/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_gl_matrix__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math_wgl_math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__common_capabilities__ = __webpack_require__(38);




class xy {
    constructor(el) {
        this.el = (el === null || el === undefined) ? document.body : el;
    }
    start(cb) {
        this.el.addEventListener(this.getListenerNames()['start'], cb);
    }
    end(cb) {
        this.el.addEventListener(this.getListenerNames()['end'], cb);
    }
    move(cb) {
        this.el.addEventListener(this.getListenerNames()['move'], cb);
    }
}
/* unused harmony export xy */

class Touch extends xy {
    getListenerNames() {
        return {
            'start': 'touchstart',
            'end': 'touchend',
            'move': 'touchmove'
        };
    }
    shouldInvert() { return true; }
    getPrimaryCoordinates(evt, out) {
        if (!out)
            out = __WEBPACK_IMPORTED_MODULE_1_gl_matrix__["e" /* vec2 */].create();
        if (evt.touches.length === 0) {
            out[0] = 0;
            out[1] = 0;
        }
        else {
            out[0] = evt.touches[0].clientX;
            out[1] = evt.touches[0].clientY;
        }
        return out;
    }
}
/* harmony export (immutable) */ __webpack_exports__["d"] = Touch;

class Mouse extends xy {
    getListenerNames() {
        return {
            'start': 'mouseenter',
            'end': 'mouseleave',
            'move': 'mousemove'
        };
    }
    shouldInvert() { return false; }
    getPrimaryCoordinates(evt, out) {
        if (!out)
            out = __WEBPACK_IMPORTED_MODULE_1_gl_matrix__["e" /* vec2 */].create();
        out[0] = evt.clientX;
        out[1] = evt.clientY;
        return out;
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = Mouse;

class PointerLock extends Mouse {
    constructor(el) {
        super(el);
        this.coordinates = __WEBPACK_IMPORTED_MODULE_1_gl_matrix__["e" /* vec2 */].fromValues(0, 0);
        this.isLocked = false;
        this.setup();
    }
    setup() {
        if (!__WEBPACK_IMPORTED_MODULE_3__common_capabilities__["a" /* hasPointerLock */]()) {
            console.warn('Pointer locking is not supported in your browser;' +
                ' regular mouse input will be used instead.');
            return;
        }
        let self = this;
        document.addEventListener('pointerlockchange', (evt) => {
            self.isLocked = !self.isLocked;
        }, false);
        self.el.addEventListener('click', (evt) => {
            evt.preventDefault();
            if (!self.isLocked) {
                self.el.requestPointerLock();
            }
        });
    }
    getPrimaryCoordinates(evt, out) {
        if (!out)
            out = __WEBPACK_IMPORTED_MODULE_1_gl_matrix__["e" /* vec2 */].create();
        if (this.isLocked) {
            this.coordinates[0] += evt.movementX;
            this.coordinates[1] += evt.movementY;
        }
        else {
            this.coordinates[0] = evt.clientX;
            this.coordinates[1] = evt.clientY;
        }
        out.set(this.coordinates);
        return out;
    }
}
/* harmony export (immutable) */ __webpack_exports__["c"] = PointerLock;

class DoubleTapDetector {
    constructor(touch, opts) {
        this.touch = touch;
        this.timer = new __WEBPACK_IMPORTED_MODULE_0__util_util__["g" /* time */].DeltaTimer();
        this.timer.setRatio(__WEBPACK_IMPORTED_MODULE_0__util_util__["g" /* time */].ratios.ms());
        this.began = false;
        this.doubletapFunc = (evt) => { };
        this.deltaDur = new __WEBPACK_IMPORTED_MODULE_0__util_util__["g" /* time */].Duration(__WEBPACK_IMPORTED_MODULE_0__util_util__["g" /* time */].ratios.ms(), 0);
        if (!opts)
            opts = DoubleTapDetector.Defaults();
        this.timeThreshold = opts.timeThreshold;
        this.positionThreshold = opts.positionThreshold;
        this.coordinates = __WEBPACK_IMPORTED_MODULE_1_gl_matrix__["e" /* vec2 */].create();
        this.currentCoordinates = __WEBPACK_IMPORTED_MODULE_1_gl_matrix__["e" /* vec2 */].create();
        this.setup();
    }
    doubletap(func) {
        this.doubletapFunc = func;
    }
    setup() {
        const touch = this.touch;
        const self = this;
        touch.start(evt => {
            if (evt.touches.length !== 1)
                return;
            self.timer.update();
            self.currentCoordinates[0] = evt.touches[0].clientX;
            self.currentCoordinates[1] = evt.touches[0].clientY;
            if (self.began) {
                let delta = self.timer.deltaDuration(self.deltaDur);
                let inTime = __WEBPACK_IMPORTED_MODULE_0__util_util__["g" /* time */].Duration.le(delta, self.timeThreshold);
                let dist = __WEBPACK_IMPORTED_MODULE_2__math_wgl_math__["c" /* distance */](self.currentCoordinates, self.coordinates);
                if (inTime && dist < self.positionThreshold) {
                    self.doubletapFunc(evt);
                }
            }
            self.began = true;
            self.coordinates = __WEBPACK_IMPORTED_MODULE_1_gl_matrix__["e" /* vec2 */].copy(self.coordinates, self.currentCoordinates);
        });
    }
    static Defaults() {
        return {
            timeThreshold: new __WEBPACK_IMPORTED_MODULE_0__util_util__["g" /* time */].Duration(__WEBPACK_IMPORTED_MODULE_0__util_util__["g" /* time */].ratios.ms(), 350),
            positionThreshold: 40
        };
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = DoubleTapDetector;



/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = hasPointerLock;
function hasPointerLock() {
    return 'onpointerlockchange' in document;
}


/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return Keys; });
var Keys;
(function (Keys) {
    Keys[Keys["W"] = 87] = "W";
    Keys[Keys["A"] = 65] = "A";
    Keys[Keys["S"] = 83] = "S";
    Keys[Keys["D"] = 68] = "D";
    Keys[Keys["Left"] = 37] = "Left";
    Keys[Keys["Right"] = 39] = "Right";
    Keys[Keys["Up"] = 38] = "Up";
    Keys[Keys["Down"] = 40] = "Down";
    Keys[Keys["space"] = 32] = "space";
    Keys[Keys["shift"] = 16] = "shift";
})(Keys || (Keys = {}));
class Keyboard {
    constructor() {
        this.state = {};
        let state = this.state;
        window.addEventListener('keydown', (evt) => {
            state[evt.keyCode] = true;
        });
        window.addEventListener('keyup', (evt) => {
            state[evt.keyCode] = false;
        });
    }
    isDown(key) {
        let res = this.state[key];
        return res === undefined ? false : res;
    }
    down(func, key) {
        this.listenerImpl(func, 'keydown', key);
    }
    up(func, key) {
        this.listenerImpl(func, 'keyup', key);
    }
    listenerImpl(func, kind, key) {
        let anyKey = key === undefined || key === null;
        window.addEventListener(kind, (evt) => {
            if (anyKey || evt.keyCode === key) {
                func(evt);
            }
        });
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Keyboard;



/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__anim_test__ = __webpack_require__(41);

// controlsTest.main()
// barebones.main()
// volume.main()
// height.main()
__WEBPACK_IMPORTED_MODULE_0__anim_test__["a" /* main */]();


/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = main;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_web_gl__ = __webpack_require__(42);
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

function getJointVertexShaderSource(N) {
    const mainSrc = () => {
        return `

		vec3 joint_weights_ = in_joint_weight;
		vec3 joint_indices_ = in_joint_index;

		vec4 local_position = vec4(0.0);
		vec4 local_normal = vec4(0.0);

		for (int i = 0; i < 3; i++) {
			int index = int(joint_indices_[i]);
			float weight = joint_weights_[i];

			if (weight == 0.0)
				break;

			mat4 trans = joint_transforms[index];
			vec4 pose = trans * vec4(in_position, 1.0);

			local_position += pose * weight;
		}

		gl_Position = projection * view * model * vec4(local_position.xyz, 1.0);
		`;
    };
    return {
        attributes: ['position', 'normal', 'uv', 'joint_index', 'joint_weight'],
        varyings: [],
        uniforms: __WEBPACK_IMPORTED_MODULE_0__gl_web_gl__["k" /* ShaderBuilder */].vertex.library.MVPMat4,
        userUniforms: [{ name: 'joint_transforms', kind: 'mat4', isArray: true, length: N }],
        body: () => '',
        main: [mainSrc]
    };
}
function getJointFragmentShaderSource() {
    return {
        uniforms: [],
        userUniforms: [],
        varyings: [],
        precision: 'mediump',
        main: () => {
            return `
				gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
			`;
        },
        body: () => '',
    };
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        document.body.style.padding = '0';
        document.body.style.margin = '0';
        document.body.style.position = 'fixed';
        const keyboard = new __WEBPACK_IMPORTED_MODULE_0__gl_web_gl__["d" /* Input */].Keyboard();
        const canvas = new __WEBPACK_IMPORTED_MODULE_0__gl_web_gl__["b" /* Canvas */]();
        const canvasElement = canvas.element;
        const gl = canvasElement.getContext('webgl');
        if (!gl)
            throw new Error('Unable to initialize GL context.');
        const scene = new __WEBPACK_IMPORTED_MODULE_0__gl_web_gl__["j" /* Scene */](gl);
        const renderer = new __WEBPACK_IMPORTED_MODULE_0__gl_web_gl__["m" /* renderers */].functional(gl);
        const camera = new __WEBPACK_IMPORTED_MODULE_0__gl_web_gl__["a" /* Camera */]();
        const keyboardMoveControls = new __WEBPACK_IMPORTED_MODULE_0__gl_web_gl__["c" /* Controls */].Movement.Keyboard(keyboard, camera, 5.0);
        const mouseInput = new __WEBPACK_IMPORTED_MODULE_0__gl_web_gl__["d" /* Input */].PointerLock(canvas.element);
        const rotationControls = new __WEBPACK_IMPORTED_MODULE_0__gl_web_gl__["c" /* Controls */].Orbit.Orbit2(mouseInput, camera);
        const sphere = __WEBPACK_IMPORTED_MODULE_0__gl_web_gl__["h" /* MeshFactory */].create(gl, 'sphere');
        const mat = __WEBPACK_IMPORTED_MODULE_0__gl_web_gl__["g" /* Material */].Physical(gl);
        const sphereModel = new __WEBPACK_IMPORTED_MODULE_0__gl_web_gl__["i" /* Model */](gl, sphere, mat);
        const light = __WEBPACK_IMPORTED_MODULE_0__gl_web_gl__["e" /* Light */].Point(gl);
        const lightModel = new __WEBPACK_IMPORTED_MODULE_0__gl_web_gl__["i" /* Model */](gl, sphere, mat.clone());
        renderer.setAspect(canvas.aspect);
        renderer.setNearFar(0.1, 1000);
        // scene.add([sphereModel, light, lightModel])
        scene.add(sphereModel);
        const lightPosition = [5, 5, 5];
        const sphereColor = [0.25, 1, 0.25];
        const spherePosition = [0, 0, 0];
        light.getAttribute('position').setValue(lightPosition);
        sphereModel.setPosition(spherePosition);
        sphereModel.material.getAttribute('albedo').setValue(sphereColor);
        lightModel.setPosition(lightPosition);
        lightModel.receivesLight = false;
        camera.setPosition([0, 0, 5]);
        //
        //  anim stuff
        //
        let cubeSrc = yield __WEBPACK_IMPORTED_MODULE_0__gl_web_gl__["f" /* Loaders */].text.load('/obj/test:test-anim-run2.dae');
        // let cubeSrc = await wgl.Loaders.text.load('/obj/test:test-anim-2.dae')
        let colladaSource = __WEBPACK_IMPORTED_MODULE_0__gl_web_gl__["l" /* parsers */].collada(gl, cubeSrc);
        const cubeModel = new __WEBPACK_IMPORTED_MODULE_0__gl_web_gl__["i" /* Model */](gl, colladaSource.mesh, sphereModel.material.clone());
        const skeleton = colladaSource.skeleton;
        const animation = colladaSource.animation;
        // const shaderSources = wgl.ShaderBuilder.getSource(cubeModel)
        // shaderSources.vertex = getJointVertexShaderSource()
        const nJoints = skeleton.size();
        const vertShaderSource = getJointVertexShaderSource(nJoints);
        const fragShaderSource = getJointFragmentShaderSource();
        const customProg = __WEBPACK_IMPORTED_MODULE_0__gl_web_gl__["k" /* ShaderBuilder */].fromSource(gl, vertShaderSource, fragShaderSource);
        // debugger
        cubeModel.program = customProg;
        // console.log(customProg.shaders[0].source)
        cubeModel.setPosition([-5, -5, -5]);
        cubeModel.setScale(1);
        scene.add(cubeModel);
        cubeModel.onBeforeRender = () => {
            animation.update();
            renderer.conditionalBindProgram(cubeModel.program);
            skeleton.traverse(joint => {
                const animTrans = joint.getAnimationTransform();
                cubeModel.program.setUniform(`joint_transforms[${joint.index}]`, animTrans);
            });
            renderer.conditionalBindProgram(null);
        };
        const animate = () => {
            keyboardMoveControls.update();
            rotationControls.update();
            renderer.render(scene, camera);
            window.requestAnimationFrame(animate);
        };
        animate();
    });
}


/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mesh_mesh_factory__ = __webpack_require__(43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mesh_mesh_library__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__material_material__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__light_light__ = __webpack_require__(26);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mesh_mesh__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__model_model__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__mesh_vertex__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shader_shader__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__shader_shader_library__ = __webpack_require__(57);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__shader_shader_factory__ = __webpack_require__(66);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__shader_builder_shader_builder_index__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__camera_camera__ = __webpack_require__(75);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__scene_scene__ = __webpack_require__(76);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__common_frame_stats__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__renderers_renderers__ = __webpack_require__(78);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__math_wgl_math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__util_util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__common_canvas__ = __webpack_require__(81);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__loaders_loaders__ = __webpack_require__(82);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__parsers_parsers__ = __webpack_require__(85);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__input_input__ = __webpack_require__(89);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__input_camera_controls__ = __webpack_require__(90);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__common_capabilities__ = __webpack_require__(38);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__texture_texture_index__ = __webpack_require__(91);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__fbo_fbo__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__terrain_terrain_index__ = __webpack_require__(93);
/* unused harmony reexport capabilities */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_11__camera_camera__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_17__common_canvas__["a"]; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_21__input_camera_controls__; });
/* unused harmony reexport fbo */
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_20__input_input__; });
/* unused harmony reexport FrameStats */
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_3__light_light__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_18__loaders_loaders__; });
/* unused harmony reexport math */
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "g", function() { return __WEBPACK_IMPORTED_MODULE_2__material_material__; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return __WEBPACK_IMPORTED_MODULE_0__mesh_mesh_factory__["a"]; });
/* unused harmony reexport MeshLibrary */
/* unused harmony reexport Mesh */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return __WEBPACK_IMPORTED_MODULE_5__model_model__["a"]; });
/* unused harmony reexport Vertex */
/* unused harmony reexport Topologies */
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "m", function() { return __WEBPACK_IMPORTED_MODULE_14__renderers_renderers__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "l", function() { return __WEBPACK_IMPORTED_MODULE_19__parsers_parsers__; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return __WEBPACK_IMPORTED_MODULE_12__scene_scene__["a"]; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "k", function() { return __WEBPACK_IMPORTED_MODULE_10__shader_builder_shader_builder_index__; });
/* unused harmony reexport ShaderTypes */
/* unused harmony reexport Shader */
/* unused harmony reexport ShaderProgram */
/* unused harmony reexport ShaderLibrary */
/* unused harmony reexport ShaderFactory */
/* unused harmony reexport terrain */
/* unused harmony reexport texture */
/* unused harmony reexport util */





























/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MeshFactory; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__vertex__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mesh__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mesh_library__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__math_wgl_math__ = __webpack_require__(3);




class MeshFactory {
    static Defaults() {
        return {
            finalize: true,
            vertexCount: 64
        };
    }
    static create(gl, kind, inOpts = MeshFactory.Defaults()) {
        const opts = MeshFactory.Defaults();
        Object.assign(opts, inOpts);
        let mesh = new __WEBPACK_IMPORTED_MODULE_1__mesh__["a" /* Mesh */](gl);
        switch (kind) {
            case 'quad':
                MeshFactory.makeQuad(mesh);
                break;
            case 'triangle':
                MeshFactory.makeTriangle(mesh);
                break;
            case 'sphere':
                MeshFactory.makeSphere(mesh, opts.vertexCount);
                break;
            case 'cube':
                MeshFactory.makeCube(mesh);
                break;
            case 'skybox':
                MeshFactory.makeSkybox(mesh);
                break;
        }
        if (opts.finalize)
            mesh.finalize();
        return mesh;
    }
    static makeSkybox(mesh) {
        const float32VertexData = new Float32Array(__WEBPACK_IMPORTED_MODULE_2__mesh_library__["a" /* MeshLibrary */].skybox.data);
        for (let i = 0; i < 36; i++) {
            let vertex = new __WEBPACK_IMPORTED_MODULE_0__vertex__["b" /* Vertex */]();
            let x, y, z, u, v, nx, ny, nz;
            x = float32VertexData[i * 5 + 0];
            y = float32VertexData[i * 5 + 1];
            z = float32VertexData[i * 5 + 2];
            u = float32VertexData[i * 5 + 3];
            v = float32VertexData[i * 5 + 4];
            nx = 0;
            ny = 0;
            nz = 0;
            vertex.setPosition(new Float32Array([x, y, z]));
            vertex.setUV(new Float32Array([u, v]));
            vertex.setNormal(new Float32Array([nx, ny, nz]));
            mesh.addVertex(vertex);
        }
        mesh.setTopology(__WEBPACK_IMPORTED_MODULE_0__vertex__["a" /* Topologies */].TRIANGLES);
    }
    static makeQuad(mesh) {
        const float32VertexData = new Float32Array(__WEBPACK_IMPORTED_MODULE_2__mesh_library__["a" /* MeshLibrary */].quad.data);
        for (let i = 0; i < 6; i++) {
            let vertex = new __WEBPACK_IMPORTED_MODULE_0__vertex__["b" /* Vertex */]();
            let x, y, z, u, v, nx, ny, nz;
            x = float32VertexData[i * 8 + 0];
            y = float32VertexData[i * 8 + 1];
            z = float32VertexData[i * 8 + 2];
            u = float32VertexData[i * 8 + 3];
            v = float32VertexData[i * 8 + 4];
            nx = float32VertexData[i * 8 + 5];
            ny = float32VertexData[i * 8 + 6];
            nz = float32VertexData[i * 8 + 7];
            vertex.setPosition(new Float32Array([x, y, z]));
            vertex.setUV(new Float32Array([u, v]));
            vertex.setNormal(new Float32Array([nx, ny, nz]));
            mesh.addVertex(vertex);
        }
        mesh.setTopology(__WEBPACK_IMPORTED_MODULE_0__vertex__["a" /* Topologies */].TRIANGLES);
    }
    static makeCube(mesh) {
        const float32VertexData = new Float32Array(__WEBPACK_IMPORTED_MODULE_2__mesh_library__["a" /* MeshLibrary */].cube2.data);
        for (let i = 0; i < 36; i++) {
            let vertex = new __WEBPACK_IMPORTED_MODULE_0__vertex__["b" /* Vertex */]();
            let x, y, z;
            let nx, ny, nz, u, v;
            x = float32VertexData[i * 8 + 0];
            y = float32VertexData[i * 8 + 1];
            z = float32VertexData[i * 8 + 2];
            // these are flipped because they were copied that way,
            // and im too lazy to change it
            nx = float32VertexData[i * 8 + 3];
            ny = float32VertexData[i * 8 + 4];
            nz = float32VertexData[i * 8 + 5];
            u = float32VertexData[i * 8 + 6];
            v = float32VertexData[i * 8 + 7];
            vertex.setPosition(new Float32Array([x, y, z]));
            vertex.setNormal(new Float32Array([nx, ny, nz]));
            vertex.setUV(new Float32Array([u, v]));
            mesh.addVertex(vertex);
        }
        mesh.setTopology(__WEBPACK_IMPORTED_MODULE_0__vertex__["a" /* Topologies */].TRIANGLES);
    }
    static makeTriangle(mesh) {
        const float32VertexData = new Float32Array(__WEBPACK_IMPORTED_MODULE_2__mesh_library__["a" /* MeshLibrary */].triangle.data);
        for (let i = 0; i < 3; i++) {
            let vertex = new __WEBPACK_IMPORTED_MODULE_0__vertex__["b" /* Vertex */]();
            let x, y, z, u, v, nx, ny, nz;
            x = float32VertexData[i * 8 + 0];
            y = float32VertexData[i * 8 + 1];
            z = float32VertexData[i * 8 + 2];
            u = float32VertexData[i * 8 + 3];
            v = float32VertexData[i * 8 + 4];
            nx = float32VertexData[i * 8 + 5];
            ny = float32VertexData[i * 8 + 6];
            nz = float32VertexData[i * 8 + 7];
            vertex.setPosition(new Float32Array([x, y, z]));
            vertex.setUV(new Float32Array([u, v]));
            vertex.setNormal(new Float32Array([nx, ny, nz]));
            mesh.addVertex(vertex);
        }
        mesh.setTopology(__WEBPACK_IMPORTED_MODULE_0__vertex__["a" /* Topologies */].TRIANGLES);
    }
    static makeSphere(mesh, vertexCount = 64) {
        if (!__WEBPACK_IMPORTED_MODULE_3__math_wgl_math__["d" /* isPow2 */](vertexCount))
            throw new Error('Vertex count must be a power of 2.');
        for (let i = 0; i < vertexCount; i++) {
            for (let j = 0; j < vertexCount; j++) {
                let xSegment = j / (vertexCount - 1);
                let ySegment = i / (vertexCount - 1);
                let xPos = Math.cos(xSegment * 2 * Math.PI) * Math.sin(ySegment * Math.PI);
                let yPos = Math.cos(ySegment * Math.PI);
                let zPos = Math.sin(xSegment * 2 * Math.PI) * Math.sin(ySegment * Math.PI);
                let vertex = new __WEBPACK_IMPORTED_MODULE_0__vertex__["b" /* Vertex */]();
                vertex.setPosition(new Float32Array([xPos, yPos, zPos]));
                vertex.setUV(new Float32Array([xSegment, ySegment]));
                vertex.setNormal(new Float32Array([xPos, yPos, zPos]));
                mesh.addVertex(vertex);
            }
        }
        let firstIndex = 0;
        let nextIndex = vertexCount;
        let indexStp = 0;
        let shouldProceed = true;
        let indices = [];
        while (shouldProceed) {
            indices.push(firstIndex);
            indices.push(nextIndex);
            indexStp += 2;
            shouldProceed = nextIndex != (vertexCount * vertexCount) - 1;
            if (indexStp > 0 && (nextIndex + 1) % vertexCount == 0 && shouldProceed) {
                indices.push(nextIndex);
                indices.push(firstIndex + 1);
                indexStp += 2;
            }
            firstIndex++;
            nextIndex++;
        }
        mesh.setTopology(__WEBPACK_IMPORTED_MODULE_0__vertex__["a" /* Topologies */].TRIANGLE_STRIP);
        mesh.setIndices(new Uint16Array(indices));
    }
}



/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

var v1 = __webpack_require__(45);
var v4 = __webpack_require__(47);

var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;

module.exports = uuid;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

var rng = __webpack_require__(14);
var bytesToUuid = __webpack_require__(15);

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

// random #'s we need to init node and clockseq
var _seedBytes = rng();

// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
var _nodeId = [
  _seedBytes[0] | 0x01,
  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
];

// Per 4.2.2, randomize (14 bit) clockseq
var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

// Previous uuid creation time
var _lastMSecs = 0, _lastNSecs = 0;

// See https://github.com/broofa/node-uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};

  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  var node = options.node || _nodeId;
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf ? buf : bytesToUuid(b);
}

module.exports = v1;


/***/ }),
/* 46 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

var rng = __webpack_require__(14);
var bytesToUuid = __webpack_require__(15);

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options == 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;


/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export create */
/* unused harmony export clone */
/* unused harmony export copy */
/* unused harmony export identity */
/* unused harmony export fromValues */
/* unused harmony export set */
/* unused harmony export transpose */
/* unused harmony export invert */
/* unused harmony export adjoint */
/* unused harmony export determinant */
/* unused harmony export multiply */
/* unused harmony export rotate */
/* unused harmony export scale */
/* unused harmony export fromRotation */
/* unused harmony export fromScaling */
/* unused harmony export str */
/* unused harmony export frob */
/* unused harmony export LDU */
/* unused harmony export add */
/* unused harmony export subtract */
/* unused harmony export exactEquals */
/* unused harmony export equals */
/* unused harmony export multiplyScalar */
/* unused harmony export multiplyScalarAndAdd */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(4);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 2x2 Matrix
 * @module mat2
 */

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](4);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}

/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {mat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */
function clone(a) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}

/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}

/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}

/**
 * Create a new mat2 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out A new 2x2 matrix
 */
function fromValues(m00, m01, m10, m11) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](4);
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}

/**
 * Set the components of a mat2 to the given values
 *
 * @param {mat2} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out
 */
function set(out, m00, m01, m10, m11) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}

/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache
  // some values
  if (out === a) {
    let a1 = a[1];
    out[1] = a[2];
    out[2] = a1;
  } else {
    out[0] = a[0];
    out[1] = a[2];
    out[2] = a[1];
    out[3] = a[3];
  }

  return out;
}

/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
function invert(out, a) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];

  // Calculate the determinant
  let det = a0 * a3 - a2 * a1;

  if (!det) {
    return null;
  }
  det = 1.0 / det;

  out[0] =  a3 * det;
  out[1] = -a1 * det;
  out[2] = -a2 * det;
  out[3] =  a0 * det;

  return out;
}

/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
function adjoint(out, a) {
  // Caching this value is nessecary if out == a
  let a0 = a[0];
  out[0] =  a[3];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] =  a0;

  return out;
}

/**
 * Calculates the determinant of a mat2
 *
 * @param {mat2} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
  return a[0] * a[3] - a[2] * a[1];
}

/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
function multiply(out, a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  return out;
}

/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
function rotate(out, a, rad) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  let s = Math.sin(rad);
  let c = Math.cos(rad);
  out[0] = a0 *  c + a2 * s;
  out[1] = a1 *  c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  return out;
}

/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/
function scale(out, a, v) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  let v0 = v[0], v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  return out;
}

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.rotate(dest, dest, rad);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
function fromRotation(out, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.scale(dest, dest, vec);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2} out
 */
function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  return out;
}

/**
 * Returns a string representation of a mat2
 *
 * @param {mat2} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}

/**
 * Returns Frobenius norm of a mat2
 *
 * @param {mat2} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
function frob(a) {
  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))
}

/**
 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
 * @param {mat2} L the lower triangular matrix
 * @param {mat2} D the diagonal matrix
 * @param {mat2} U the upper triangular matrix
 * @param {mat2} a the input matrix to factorize
 */

function LDU(L, D, U, a) {
  L[2] = a[2]/a[0];
  U[0] = a[0];
  U[1] = a[1];
  U[3] = a[3] - L[2] * U[1];
  return [L, D, U];
}

/**
 * Adds two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function equals(a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
          Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a3), Math.abs(b3)));
}

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2} out
 */
function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}

/**
 * Adds two mat2's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2} out the receiving vector
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2} out
 */
function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  out[2] = a[2] + (b[2] * scale);
  out[3] = a[3] + (b[3] * scale);
  return out;
}

/**
 * Alias for {@link mat2.multiply}
 * @function
 */
const mul = multiply;
/* unused harmony export mul */


/**
 * Alias for {@link mat2.subtract}
 * @function
 */
const sub = subtract;
/* unused harmony export sub */



/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export create */
/* unused harmony export clone */
/* unused harmony export copy */
/* unused harmony export identity */
/* unused harmony export fromValues */
/* unused harmony export set */
/* unused harmony export invert */
/* unused harmony export determinant */
/* unused harmony export multiply */
/* unused harmony export rotate */
/* unused harmony export scale */
/* unused harmony export translate */
/* unused harmony export fromRotation */
/* unused harmony export fromScaling */
/* unused harmony export fromTranslation */
/* unused harmony export str */
/* unused harmony export frob */
/* unused harmony export add */
/* unused harmony export subtract */
/* unused harmony export multiplyScalar */
/* unused harmony export multiplyScalarAndAdd */
/* unused harmony export exactEquals */
/* unused harmony export equals */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(4);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 2x3 Matrix
 * @module mat2d
 *
 * @description
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, c, tx,
 *  b, d, ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, c, tx,
 *  b, d, ty,
 *  0, 0, 1]
 * </pre>
 * The last row is ignored so the array is shorter and operations are faster.
 */

/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](6);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  return out;
}

/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {mat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */
function clone(a) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](6);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}

/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}

/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  return out;
}

/**
 * Create a new mat2d with the given values
 *
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} A new mat2d
 */
function fromValues(a, b, c, d, tx, ty) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](6);
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}

/**
 * Set the components of a mat2d to the given values
 *
 * @param {mat2d} out the receiving matrix
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} out
 */
function set(out, a, b, c, d, tx, ty) {
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}

/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
function invert(out, a) {
  let aa = a[0], ab = a[1], ac = a[2], ad = a[3];
  let atx = a[4], aty = a[5];

  let det = aa * ad - ab * ac;
  if(!det){
    return null;
  }
  det = 1.0 / det;

  out[0] = ad * det;
  out[1] = -ab * det;
  out[2] = -ac * det;
  out[3] = aa * det;
  out[4] = (ac * aty - ad * atx) * det;
  out[5] = (ab * atx - aa * aty) * det;
  return out;
}

/**
 * Calculates the determinant of a mat2d
 *
 * @param {mat2d} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
  return a[0] * a[3] - a[1] * a[2];
}

/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
function multiply(out, a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  out[4] = a0 * b4 + a2 * b5 + a4;
  out[5] = a1 * b4 + a3 * b5 + a5;
  return out;
}

/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
function rotate(out, a, rad) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
  let s = Math.sin(rad);
  let c = Math.cos(rad);
  out[0] = a0 *  c + a2 * s;
  out[1] = a1 *  c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  out[4] = a4;
  out[5] = a5;
  return out;
}

/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/
function scale(out, a, v) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
  let v0 = v[0], v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  out[4] = a4;
  out[5] = a5;
  return out;
}

/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/
function translate(out, a, v) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
  let v0 = v[0], v1 = v[1];
  out[0] = a0;
  out[1] = a1;
  out[2] = a2;
  out[3] = a3;
  out[4] = a0 * v0 + a2 * v1 + a4;
  out[5] = a1 * v0 + a3 * v1 + a5;
  return out;
}

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.rotate(dest, dest, rad);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
function fromRotation(out, rad) {
  let s = Math.sin(rad), c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  out[4] = 0;
  out[5] = 0;
  return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.scale(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2d} out
 */
function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  out[4] = 0;
  out[5] = 0;
  return out;
}

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.translate(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat2d} out
 */
function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = v[0];
  out[5] = v[1];
  return out;
}

/**
 * Returns a string representation of a mat2d
 *
 * @param {mat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +
          a[3] + ', ' + a[4] + ', ' + a[5] + ')';
}

/**
 * Returns Frobenius norm of a mat2d
 *
 * @param {mat2d} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
function frob(a) {
  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))
}

/**
 * Adds two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  return out;
}

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  return out;
}

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2d} out
 */
function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  return out;
}

/**
 * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2d} out the receiving vector
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2d} out
 */
function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  out[2] = a[2] + (b[2] * scale);
  out[3] = a[3] + (b[3] * scale);
  out[4] = a[4] + (b[4] * scale);
  out[5] = a[5] + (b[5] * scale);
  return out;
}

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
}

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function equals(a, b) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
          Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
          Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
          Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a5), Math.abs(b5)));
}

/**
 * Alias for {@link mat2d.multiply}
 * @function
 */
const mul = multiply;
/* unused harmony export mul */


/**
 * Alias for {@link mat2d.subtract}
 * @function
 */
const sub = subtract;
/* unused harmony export sub */



/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["create"] = create;
/* harmony export (immutable) */ __webpack_exports__["clone"] = clone;
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;
/* harmony export (immutable) */ __webpack_exports__["fromValues"] = fromValues;
/* harmony export (immutable) */ __webpack_exports__["set"] = set;
/* harmony export (immutable) */ __webpack_exports__["identity"] = identity;
/* harmony export (immutable) */ __webpack_exports__["transpose"] = transpose;
/* harmony export (immutable) */ __webpack_exports__["invert"] = invert;
/* harmony export (immutable) */ __webpack_exports__["adjoint"] = adjoint;
/* harmony export (immutable) */ __webpack_exports__["determinant"] = determinant;
/* harmony export (immutable) */ __webpack_exports__["multiply"] = multiply;
/* harmony export (immutable) */ __webpack_exports__["translate"] = translate;
/* harmony export (immutable) */ __webpack_exports__["scale"] = scale;
/* harmony export (immutable) */ __webpack_exports__["rotate"] = rotate;
/* harmony export (immutable) */ __webpack_exports__["rotateX"] = rotateX;
/* harmony export (immutable) */ __webpack_exports__["rotateY"] = rotateY;
/* harmony export (immutable) */ __webpack_exports__["rotateZ"] = rotateZ;
/* harmony export (immutable) */ __webpack_exports__["fromTranslation"] = fromTranslation;
/* harmony export (immutable) */ __webpack_exports__["fromScaling"] = fromScaling;
/* harmony export (immutable) */ __webpack_exports__["fromRotation"] = fromRotation;
/* harmony export (immutable) */ __webpack_exports__["fromXRotation"] = fromXRotation;
/* harmony export (immutable) */ __webpack_exports__["fromYRotation"] = fromYRotation;
/* harmony export (immutable) */ __webpack_exports__["fromZRotation"] = fromZRotation;
/* harmony export (immutable) */ __webpack_exports__["fromRotationTranslation"] = fromRotationTranslation;
/* harmony export (immutable) */ __webpack_exports__["getTranslation"] = getTranslation;
/* harmony export (immutable) */ __webpack_exports__["getScaling"] = getScaling;
/* harmony export (immutable) */ __webpack_exports__["getRotation"] = getRotation;
/* harmony export (immutable) */ __webpack_exports__["fromRotationTranslationScale"] = fromRotationTranslationScale;
/* harmony export (immutable) */ __webpack_exports__["fromRotationTranslationScaleOrigin"] = fromRotationTranslationScaleOrigin;
/* harmony export (immutable) */ __webpack_exports__["fromQuat"] = fromQuat;
/* harmony export (immutable) */ __webpack_exports__["frustum"] = frustum;
/* harmony export (immutable) */ __webpack_exports__["perspective"] = perspective;
/* harmony export (immutable) */ __webpack_exports__["perspectiveFromFieldOfView"] = perspectiveFromFieldOfView;
/* harmony export (immutable) */ __webpack_exports__["ortho"] = ortho;
/* harmony export (immutable) */ __webpack_exports__["lookAt"] = lookAt;
/* harmony export (immutable) */ __webpack_exports__["targetTo"] = targetTo;
/* harmony export (immutable) */ __webpack_exports__["str"] = str;
/* harmony export (immutable) */ __webpack_exports__["frob"] = frob;
/* harmony export (immutable) */ __webpack_exports__["add"] = add;
/* harmony export (immutable) */ __webpack_exports__["subtract"] = subtract;
/* harmony export (immutable) */ __webpack_exports__["multiplyScalar"] = multiplyScalar;
/* harmony export (immutable) */ __webpack_exports__["multiplyScalarAndAdd"] = multiplyScalarAndAdd;
/* harmony export (immutable) */ __webpack_exports__["exactEquals"] = exactEquals;
/* harmony export (immutable) */ __webpack_exports__["equals"] = equals;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(4);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 4x4 Matrix
 * @module mat4
 */

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](16);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */
function clone(a) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](16);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}

/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}

/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */
function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](16);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}

/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */
function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}


/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    let a01 = a[1], a02 = a[2], a03 = a[3];
    let a12 = a[6], a13 = a[7];
    let a23 = a[11];

    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a01;
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a02;
    out[9] = a12;
    out[11] = a[14];
    out[12] = a03;
    out[13] = a13;
    out[14] = a23;
  } else {
    out[0] = a[0];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a[1];
    out[5] = a[5];
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a[2];
    out[9] = a[6];
    out[10] = a[10];
    out[11] = a[14];
    out[12] = a[3];
    out[13] = a[7];
    out[14] = a[11];
    out[15] = a[15];
  }

  return out;
}

/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function invert(out, a) {
  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

  let b00 = a00 * a11 - a01 * a10;
  let b01 = a00 * a12 - a02 * a10;
  let b02 = a00 * a13 - a03 * a10;
  let b03 = a01 * a12 - a02 * a11;
  let b04 = a01 * a13 - a03 * a11;
  let b05 = a02 * a13 - a03 * a12;
  let b06 = a20 * a31 - a21 * a30;
  let b07 = a20 * a32 - a22 * a30;
  let b08 = a20 * a33 - a23 * a30;
  let b09 = a21 * a32 - a22 * a31;
  let b10 = a21 * a33 - a23 * a31;
  let b11 = a22 * a33 - a23 * a32;

  // Calculate the determinant
  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }
  det = 1.0 / det;

  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

  return out;
}

/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function adjoint(out, a) {
  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
  return out;
}

/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */
function determinant(a) {
  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

  let b00 = a00 * a11 - a01 * a10;
  let b01 = a00 * a12 - a02 * a10;
  let b02 = a00 * a13 - a03 * a10;
  let b03 = a01 * a12 - a02 * a11;
  let b04 = a01 * a13 - a03 * a11;
  let b05 = a02 * a13 - a03 * a12;
  let b06 = a20 * a31 - a21 * a30;
  let b07 = a20 * a32 - a22 * a30;
  let b08 = a20 * a33 - a23 * a30;
  let b09 = a21 * a32 - a22 * a31;
  let b10 = a21 * a33 - a23 * a31;
  let b11 = a22 * a33 - a23 * a32;

  // Calculate the determinant
  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}

/**
 * Multiplies two mat4s
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
function multiply(out, a, b) {
  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

  // Cache only the current line of the second matrix
  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
  return out;
}

/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
function translate(out, a, v) {
  let x = v[0], y = v[1], z = v[2];
  let a00, a01, a02, a03;
  let a10, a11, a12, a13;
  let a20, a21, a22, a23;

  if (a === out) {
    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
  } else {
    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

    out[12] = a00 * x + a10 * y + a20 * z + a[12];
    out[13] = a01 * x + a11 * y + a21 * z + a[13];
    out[14] = a02 * x + a12 * y + a22 * z + a[14];
    out[15] = a03 * x + a13 * y + a23 * z + a[15];
  }

  return out;
}

/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
function scale(out, a, v) {
  let x = v[0], y = v[1], z = v[2];

  out[0] = a[0] * x;
  out[1] = a[1] * x;
  out[2] = a[2] * x;
  out[3] = a[3] * x;
  out[4] = a[4] * y;
  out[5] = a[5] * y;
  out[6] = a[6] * y;
  out[7] = a[7] * y;
  out[8] = a[8] * z;
  out[9] = a[9] * z;
  out[10] = a[10] * z;
  out[11] = a[11] * z;
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}

/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
function rotate(out, a, rad, axis) {
  let x = axis[0], y = axis[1], z = axis[2];
  let len = Math.sqrt(x * x + y * y + z * z);
  let s, c, t;
  let a00, a01, a02, a03;
  let a10, a11, a12, a13;
  let a20, a21, a22, a23;
  let b00, b01, b02;
  let b10, b11, b12;
  let b20, b21, b22;

  if (Math.abs(len) < __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]) { return null; }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;

  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;

  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

  // Construct the elements of the rotation matrix
  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;

  // Perform rotation-specific matrix multiplication
  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
  out[11] = a03 * b20 + a13 * b21 + a23 * b22;

  if (a !== out) { // If the source and destination differ, copy the unchanged last row
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }
  return out;
}

/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateX(out, a, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);
  let a10 = a[4];
  let a11 = a[5];
  let a12 = a[6];
  let a13 = a[7];
  let a20 = a[8];
  let a21 = a[9];
  let a22 = a[10];
  let a23 = a[11];

  if (a !== out) { // If the source and destination differ, copy the unchanged rows
    out[0]  = a[0];
    out[1]  = a[1];
    out[2]  = a[2];
    out[3]  = a[3];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  // Perform axis-specific matrix multiplication
  out[4] = a10 * c + a20 * s;
  out[5] = a11 * c + a21 * s;
  out[6] = a12 * c + a22 * s;
  out[7] = a13 * c + a23 * s;
  out[8] = a20 * c - a10 * s;
  out[9] = a21 * c - a11 * s;
  out[10] = a22 * c - a12 * s;
  out[11] = a23 * c - a13 * s;
  return out;
}

/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateY(out, a, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);
  let a00 = a[0];
  let a01 = a[1];
  let a02 = a[2];
  let a03 = a[3];
  let a20 = a[8];
  let a21 = a[9];
  let a22 = a[10];
  let a23 = a[11];

  if (a !== out) { // If the source and destination differ, copy the unchanged rows
    out[4]  = a[4];
    out[5]  = a[5];
    out[6]  = a[6];
    out[7]  = a[7];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  // Perform axis-specific matrix multiplication
  out[0] = a00 * c - a20 * s;
  out[1] = a01 * c - a21 * s;
  out[2] = a02 * c - a22 * s;
  out[3] = a03 * c - a23 * s;
  out[8] = a00 * s + a20 * c;
  out[9] = a01 * s + a21 * c;
  out[10] = a02 * s + a22 * c;
  out[11] = a03 * s + a23 * c;
  return out;
}

/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function rotateZ(out, a, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);
  let a00 = a[0];
  let a01 = a[1];
  let a02 = a[2];
  let a03 = a[3];
  let a10 = a[4];
  let a11 = a[5];
  let a12 = a[6];
  let a13 = a[7];

  if (a !== out) { // If the source and destination differ, copy the unchanged last row
    out[8]  = a[8];
    out[9]  = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  // Perform axis-specific matrix multiplication
  out[0] = a00 * c + a10 * s;
  out[1] = a01 * c + a11 * s;
  out[2] = a02 * c + a12 * s;
  out[3] = a03 * c + a13 * s;
  out[4] = a10 * c - a00 * s;
  out[5] = a11 * c - a01 * s;
  out[6] = a12 * c - a02 * s;
  out[7] = a13 * c - a03 * s;
  return out;
}

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Scaling vector
 * @returns {mat4} out
 */
function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
function fromRotation(out, rad, axis) {
  let x = axis[0], y = axis[1], z = axis[2];
  let len = Math.sqrt(x * x + y * y + z * z);
  let s, c, t;

  if (Math.abs(len) < __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]) { return null; }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;

  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;

  // Perform rotation-specific matrix multiplication
  out[0] = x * x * t + c;
  out[1] = y * x * t + z * s;
  out[2] = z * x * t - y * s;
  out[3] = 0;
  out[4] = x * y * t - z * s;
  out[5] = y * y * t + c;
  out[6] = z * y * t + x * s;
  out[7] = 0;
  out[8] = x * z * t + y * s;
  out[9] = y * z * t - x * s;
  out[10] = z * z * t + c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function fromXRotation(out, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);

  // Perform axis-specific matrix multiplication
  out[0]  = 1;
  out[1]  = 0;
  out[2]  = 0;
  out[3]  = 0;
  out[4] = 0;
  out[5] = c;
  out[6] = s;
  out[7] = 0;
  out[8] = 0;
  out[9] = -s;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function fromYRotation(out, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);

  // Perform axis-specific matrix multiplication
  out[0]  = c;
  out[1]  = 0;
  out[2]  = -s;
  out[3]  = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = s;
  out[9] = 0;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
function fromZRotation(out, rad) {
  let s = Math.sin(rad);
  let c = Math.cos(rad);

  // Perform axis-specific matrix multiplication
  out[0]  = c;
  out[1]  = s;
  out[2]  = 0;
  out[3]  = 0;
  out[4] = -s;
  out[5] = c;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
function fromRotationTranslation(out, q, v) {
  // Quaternion math
  let x = q[0], y = q[1], z = q[2], w = q[3];
  let x2 = x + x;
  let y2 = y + y;
  let z2 = z + z;

  let xx = x * x2;
  let xy = x * y2;
  let xz = x * z2;
  let yy = y * y2;
  let yz = y * z2;
  let zz = z * z2;
  let wx = w * x2;
  let wy = w * y2;
  let wz = w * z2;

  out[0] = 1 - (yy + zz);
  out[1] = xy + wz;
  out[2] = xz - wy;
  out[3] = 0;
  out[4] = xy - wz;
  out[5] = 1 - (xx + zz);
  out[6] = yz + wx;
  out[7] = 0;
  out[8] = xz + wy;
  out[9] = yz - wx;
  out[10] = 1 - (xx + yy);
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;

  return out;
}

/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {mat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */
function getTranslation(out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];

  return out;
}

/**
 * Returns the scaling factor component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslationScale
 *  with a normalized Quaternion paramter, the returned vector will be
 *  the same as the scaling vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive scaling factor component
 * @param  {mat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */
function getScaling(out, mat) {
  let m11 = mat[0];
  let m12 = mat[1];
  let m13 = mat[2];
  let m21 = mat[4];
  let m22 = mat[5];
  let m23 = mat[6];
  let m31 = mat[8];
  let m32 = mat[9];
  let m33 = mat[10];

  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);

  return out;
}

/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {mat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */
function getRotation(out, mat) {
  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
  let trace = mat[0] + mat[5] + mat[10];
  let S = 0;

  if (trace > 0) {
    S = Math.sqrt(trace + 1.0) * 2;
    out[3] = 0.25 * S;
    out[0] = (mat[6] - mat[9]) / S;
    out[1] = (mat[8] - mat[2]) / S;
    out[2] = (mat[1] - mat[4]) / S;
  } else if ((mat[0] > mat[5])&(mat[0] > mat[10])) {
    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;
    out[3] = (mat[6] - mat[9]) / S;
    out[0] = 0.25 * S;
    out[1] = (mat[1] + mat[4]) / S;
    out[2] = (mat[8] + mat[2]) / S;
  } else if (mat[5] > mat[10]) {
    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;
    out[3] = (mat[8] - mat[2]) / S;
    out[0] = (mat[1] + mat[4]) / S;
    out[1] = 0.25 * S;
    out[2] = (mat[6] + mat[9]) / S;
  } else {
    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;
    out[3] = (mat[1] - mat[4]) / S;
    out[0] = (mat[8] + mat[2]) / S;
    out[1] = (mat[6] + mat[9]) / S;
    out[2] = 0.25 * S;
  }

  return out;
}

/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @returns {mat4} out
 */
function fromRotationTranslationScale(out, q, v, s) {
  // Quaternion math
  let x = q[0], y = q[1], z = q[2], w = q[3];
  let x2 = x + x;
  let y2 = y + y;
  let z2 = z + z;

  let xx = x * x2;
  let xy = x * y2;
  let xz = x * z2;
  let yy = y * y2;
  let yz = y * z2;
  let zz = z * z2;
  let wx = w * x2;
  let wy = w * y2;
  let wz = w * z2;
  let sx = s[0];
  let sy = s[1];
  let sz = s[2];

  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;

  return out;
}

/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @param {vec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */
function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
  // Quaternion math
  let x = q[0], y = q[1], z = q[2], w = q[3];
  let x2 = x + x;
  let y2 = y + y;
  let z2 = z + z;

  let xx = x * x2;
  let xy = x * y2;
  let xz = x * z2;
  let yy = y * y2;
  let yz = y * z2;
  let zz = z * z2;
  let wx = w * x2;
  let wy = w * y2;
  let wz = w * z2;

  let sx = s[0];
  let sy = s[1];
  let sz = s[2];

  let ox = o[0];
  let oy = o[1];
  let oz = o[2];

  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);
  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);
  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);
  out[15] = 1;

  return out;
}

/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */
function fromQuat(out, q) {
  let x = q[0], y = q[1], z = q[2], w = q[3];
  let x2 = x + x;
  let y2 = y + y;
  let z2 = z + z;

  let xx = x * x2;
  let yx = y * x2;
  let yy = y * y2;
  let zx = z * x2;
  let zy = z * y2;
  let zz = z * z2;
  let wx = w * x2;
  let wy = w * y2;
  let wz = w * z2;

  out[0] = 1 - yy - zz;
  out[1] = yx + wz;
  out[2] = zx - wy;
  out[3] = 0;

  out[4] = yx - wz;
  out[5] = 1 - xx - zz;
  out[6] = zy + wx;
  out[7] = 0;

  out[8] = zx + wy;
  out[9] = zy - wx;
  out[10] = 1 - xx - yy;
  out[11] = 0;

  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;

  return out;
}

/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
function frustum(out, left, right, bottom, top, near, far) {
  let rl = 1 / (right - left);
  let tb = 1 / (top - bottom);
  let nf = 1 / (near - far);
  out[0] = (near * 2) * rl;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = (near * 2) * tb;
  out[6] = 0;
  out[7] = 0;
  out[8] = (right + left) * rl;
  out[9] = (top + bottom) * tb;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = (far * near * 2) * nf;
  out[15] = 0;
  return out;
}

/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspective(out, fovy, aspect, near, far) {
  let f = 1.0 / Math.tan(fovy / 2);
  let nf = 1 / (near - far);
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = (2 * far * near) * nf;
  out[15] = 0;
  return out;
}

/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function perspectiveFromFieldOfView(out, fov, near, far) {
  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);
  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);
  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);
  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);
  let xScale = 2.0 / (leftTan + rightTan);
  let yScale = 2.0 / (upTan + downTan);

  out[0] = xScale;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  out[4] = 0.0;
  out[5] = yScale;
  out[6] = 0.0;
  out[7] = 0.0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = ((upTan - downTan) * yScale * 0.5);
  out[10] = far / (near - far);
  out[11] = -1.0;
  out[12] = 0.0;
  out[13] = 0.0;
  out[14] = (far * near) / (near - far);
  out[15] = 0.0;
  return out;
}

/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
function ortho(out, left, right, bottom, top, near, far) {
  let lr = 1 / (left - right);
  let bt = 1 / (bottom - top);
  let nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
}

/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
function lookAt(out, eye, center, up) {
  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
  let eyex = eye[0];
  let eyey = eye[1];
  let eyez = eye[2];
  let upx = up[0];
  let upy = up[1];
  let upz = up[2];
  let centerx = center[0];
  let centery = center[1];
  let centerz = center[2];

  if (Math.abs(eyex - centerx) < __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"] &&
      Math.abs(eyey - centery) < __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"] &&
      Math.abs(eyez - centerz) < __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]) {
    return mat4.identity(out);
  }

  z0 = eyex - centerx;
  z1 = eyey - centery;
  z2 = eyez - centerz;

  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
  z0 *= len;
  z1 *= len;
  z2 *= len;

  x0 = upy * z2 - upz * z1;
  x1 = upz * z0 - upx * z2;
  x2 = upx * z1 - upy * z0;
  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
  if (!len) {
    x0 = 0;
    x1 = 0;
    x2 = 0;
  } else {
    len = 1 / len;
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  y0 = z1 * x2 - z2 * x1;
  y1 = z2 * x0 - z0 * x2;
  y2 = z0 * x1 - z1 * x0;

  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
  if (!len) {
    y0 = 0;
    y1 = 0;
    y2 = 0;
  } else {
    len = 1 / len;
    y0 *= len;
    y1 *= len;
    y2 *= len;
  }

  out[0] = x0;
  out[1] = y0;
  out[2] = z0;
  out[3] = 0;
  out[4] = x1;
  out[5] = y1;
  out[6] = z1;
  out[7] = 0;
  out[8] = x2;
  out[9] = y2;
  out[10] = z2;
  out[11] = 0;
  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
  out[15] = 1;

  return out;
}

/**
 * Generates a matrix that makes something look at something else.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
function targetTo(out, eye, target, up) {
  let eyex = eye[0],
      eyey = eye[1],
      eyez = eye[2],
      upx = up[0],
      upy = up[1],
      upz = up[2];

  let z0 = eyex - target[0],
      z1 = eyey - target[1],
      z2 = eyez - target[2];

  let len = z0*z0 + z1*z1 + z2*z2;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
    z0 *= len;
    z1 *= len;
    z2 *= len;
  }

  let x0 = upy * z2 - upz * z1,
      x1 = upz * z0 - upx * z2,
      x2 = upx * z1 - upy * z0;

  out[0] = x0;
  out[1] = x1;
  out[2] = x2;
  out[3] = 0;
  out[4] = z1 * x2 - z2 * x1;
  out[5] = z2 * x0 - z0 * x2;
  out[6] = z0 * x1 - z1 * x0;
  out[7] = 0;
  out[8] = z0;
  out[9] = z1;
  out[10] = z2;
  out[11] = 0;
  out[12] = eyex;
  out[13] = eyey;
  out[14] = eyez;
  out[15] = 1;
  return out;
};

/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
function str(a) {
  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +
          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
}

/**
 * Returns Frobenius norm of a mat4
 *
 * @param {mat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
function frob(a) {
  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))
}

/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  out[9] = a[9] + b[9];
  out[10] = a[10] + b[10];
  out[11] = a[11] + b[11];
  out[12] = a[12] + b[12];
  out[13] = a[13] + b[13];
  out[14] = a[14] + b[14];
  out[15] = a[15] + b[15];
  return out;
}

/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  out[9] = a[9] - b[9];
  out[10] = a[10] - b[10];
  out[11] = a[11] - b[11];
  out[12] = a[12] - b[12];
  out[13] = a[13] - b[13];
  out[14] = a[14] - b[14];
  out[15] = a[15] - b[15];
  return out;
}

/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */
function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  out[9] = a[9] * b;
  out[10] = a[10] * b;
  out[11] = a[11] * b;
  out[12] = a[12] * b;
  out[13] = a[13] * b;
  out[14] = a[14] * b;
  out[15] = a[15] * b;
  return out;
}

/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */
function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  out[2] = a[2] + (b[2] * scale);
  out[3] = a[3] + (b[3] * scale);
  out[4] = a[4] + (b[4] * scale);
  out[5] = a[5] + (b[5] * scale);
  out[6] = a[6] + (b[6] * scale);
  out[7] = a[7] + (b[7] * scale);
  out[8] = a[8] + (b[8] * scale);
  out[9] = a[9] + (b[9] * scale);
  out[10] = a[10] + (b[10] * scale);
  out[11] = a[11] + (b[11] * scale);
  out[12] = a[12] + (b[12] * scale);
  out[13] = a[13] + (b[13] * scale);
  out[14] = a[14] + (b[14] * scale);
  out[15] = a[15] + (b[15] * scale);
  return out;
}

/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&
         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&
         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&
         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
}

/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */
function equals(a, b) {
  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];
  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];
  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];
  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];

  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];
  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];
  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];
  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];

  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
          Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
          Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
          Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&
          Math.abs(a6 - b6) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&
          Math.abs(a7 - b7) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&
          Math.abs(a8 - b8) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&
          Math.abs(a9 - b9) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&
          Math.abs(a10 - b10) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&
          Math.abs(a11 - b11) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&
          Math.abs(a12 - b12) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&
          Math.abs(a13 - b13) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&
          Math.abs(a14 - b14) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&
          Math.abs(a15 - b15) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a15), Math.abs(b15)));
}

/**
 * Alias for {@link mat4.multiply}
 * @function
 */
const mul = multiply;
/* harmony export (immutable) */ __webpack_exports__["mul"] = mul;


/**
 * Alias for {@link mat4.subtract}
 * @function
 */
const sub = subtract;
/* harmony export (immutable) */ __webpack_exports__["sub"] = sub;



/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["create"] = create;
/* harmony export (immutable) */ __webpack_exports__["identity"] = identity;
/* harmony export (immutable) */ __webpack_exports__["setAxisAngle"] = setAxisAngle;
/* harmony export (immutable) */ __webpack_exports__["getAxisAngle"] = getAxisAngle;
/* harmony export (immutable) */ __webpack_exports__["multiply"] = multiply;
/* harmony export (immutable) */ __webpack_exports__["rotateX"] = rotateX;
/* harmony export (immutable) */ __webpack_exports__["rotateY"] = rotateY;
/* harmony export (immutable) */ __webpack_exports__["rotateZ"] = rotateZ;
/* harmony export (immutable) */ __webpack_exports__["calculateW"] = calculateW;
/* harmony export (immutable) */ __webpack_exports__["slerp"] = slerp;
/* harmony export (immutable) */ __webpack_exports__["invert"] = invert;
/* harmony export (immutable) */ __webpack_exports__["conjugate"] = conjugate;
/* harmony export (immutable) */ __webpack_exports__["fromMat3"] = fromMat3;
/* harmony export (immutable) */ __webpack_exports__["fromEuler"] = fromEuler;
/* harmony export (immutable) */ __webpack_exports__["str"] = str;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mat3__ = __webpack_require__(17);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__vec3__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__vec4__ = __webpack_require__(19);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */






/**
 * Quaternion
 * @module quat
 */

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](4);
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}

/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */
function identity(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}

/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/
function setAxisAngle(out, axis, rad) {
  rad = rad * 0.5;
  let s = Math.sin(rad);
  out[0] = s * axis[0];
  out[1] = s * axis[1];
  out[2] = s * axis[2];
  out[3] = Math.cos(rad);
  return out;
}

/**
 * Gets the rotation axis and angle for a given
 *  quaternion. If a quaternion is created with
 *  setAxisAngle, this method will return the same
 *  values as providied in the original parameter list
 *  OR functionally equivalent values.
 * Example: The quaternion formed by axis [0, 0, 1] and
 *  angle -90 is the same as the quaternion formed by
 *  [0, 0, 1] and 270. This method favors the latter.
 * @param  {vec3} out_axis  Vector receiving the axis of rotation
 * @param  {quat} q     Quaternion to be decomposed
 * @return {Number}     Angle, in radians, of the rotation
 */
function getAxisAngle(out_axis, q) {
  let rad = Math.acos(q[3]) * 2.0;
  let s = Math.sin(rad / 2.0);
  if (s != 0.0) {
    out_axis[0] = q[0] / s;
    out_axis[1] = q[1] / s;
    out_axis[2] = q[2] / s;
  } else {
    // If s is zero, return any axis (no rotation - axis does not matter)
    out_axis[0] = 1;
    out_axis[1] = 0;
    out_axis[2] = 0;
  }
  return rad;
}

/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */
function multiply(out, a, b) {
  let ax = a[0], ay = a[1], az = a[2], aw = a[3];
  let bx = b[0], by = b[1], bz = b[2], bw = b[3];

  out[0] = ax * bw + aw * bx + ay * bz - az * by;
  out[1] = ay * bw + aw * by + az * bx - ax * bz;
  out[2] = az * bw + aw * bz + ax * by - ay * bx;
  out[3] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}

/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateX(out, a, rad) {
  rad *= 0.5;

  let ax = a[0], ay = a[1], az = a[2], aw = a[3];
  let bx = Math.sin(rad), bw = Math.cos(rad);

  out[0] = ax * bw + aw * bx;
  out[1] = ay * bw + az * bx;
  out[2] = az * bw - ay * bx;
  out[3] = aw * bw - ax * bx;
  return out;
}

/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateY(out, a, rad) {
  rad *= 0.5;

  let ax = a[0], ay = a[1], az = a[2], aw = a[3];
  let by = Math.sin(rad), bw = Math.cos(rad);

  out[0] = ax * bw - az * by;
  out[1] = ay * bw + aw * by;
  out[2] = az * bw + ax * by;
  out[3] = aw * bw - ay * by;
  return out;
}

/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
function rotateZ(out, a, rad) {
  rad *= 0.5;

  let ax = a[0], ay = a[1], az = a[2], aw = a[3];
  let bz = Math.sin(rad), bw = Math.cos(rad);

  out[0] = ax * bw + ay * bz;
  out[1] = ay * bw - ax * bz;
  out[2] = az * bw + aw * bz;
  out[3] = aw * bw - az * bz;
  return out;
}

/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */
function calculateW(out, a) {
  let x = a[0], y = a[1], z = a[2];

  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
  return out;
}

/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 */
function slerp(out, a, b, t) {
  // benchmarks:
  //    http://jsperf.com/quaternion-slerp-implementations
  let ax = a[0], ay = a[1], az = a[2], aw = a[3];
  let bx = b[0], by = b[1], bz = b[2], bw = b[3];

  let omega, cosom, sinom, scale0, scale1;

  // calc cosine
  cosom = ax * bx + ay * by + az * bz + aw * bw;
  // adjust signs (if necessary)
  if ( cosom < 0.0 ) {
    cosom = -cosom;
    bx = - bx;
    by = - by;
    bz = - bz;
    bw = - bw;
  }
  // calculate coefficients
  if ( (1.0 - cosom) > 0.000001 ) {
    // standard case (slerp)
    omega  = Math.acos(cosom);
    sinom  = Math.sin(omega);
    scale0 = Math.sin((1.0 - t) * omega) / sinom;
    scale1 = Math.sin(t * omega) / sinom;
  } else {
    // "from" and "to" quaternions are very close
    //  ... so we can do a linear interpolation
    scale0 = 1.0 - t;
    scale1 = t;
  }
  // calculate final values
  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;

  return out;
}

/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */
function invert(out, a) {
  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;
  let invDot = dot ? 1.0/dot : 0;

  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

  out[0] = -a0*invDot;
  out[1] = -a1*invDot;
  out[2] = -a2*invDot;
  out[3] = a3*invDot;
  return out;
}

/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */
function conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  return out;
}

/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {mat3} m rotation matrix
 * @returns {quat} out
 * @function
 */
function fromMat3(out, m) {
  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
  // article "Quaternion Calculus and Fast Animation".
  let fTrace = m[0] + m[4] + m[8];
  let fRoot;

  if ( fTrace > 0.0 ) {
    // |w| > 1/2, may as well choose w > 1/2
    fRoot = Math.sqrt(fTrace + 1.0);  // 2w
    out[3] = 0.5 * fRoot;
    fRoot = 0.5/fRoot;  // 1/(4w)
    out[0] = (m[5]-m[7])*fRoot;
    out[1] = (m[6]-m[2])*fRoot;
    out[2] = (m[1]-m[3])*fRoot;
  } else {
    // |w| <= 1/2
    let i = 0;
    if ( m[4] > m[0] )
      i = 1;
    if ( m[8] > m[i*3+i] )
      i = 2;
    let j = (i+1)%3;
    let k = (i+2)%3;

    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);
    out[i] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;
    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;
    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;
  }

  return out;
}

/**
 * Creates a quaternion from the given euler angle x, y, z.
 *
 * @param {quat} out the receiving quaternion
 * @param {x} Angle to rotate around X axis in degrees.
 * @param {y} Angle to rotate around Y axis in degrees.
 * @param {z} Angle to rotate around Z axis in degrees.
 * @returns {quat} out
 * @function
 */
function fromEuler(out, x, y, z) {
    let halfToRad = 0.5 * Math.PI / 180.0;
    x *= halfToRad;
    y *= halfToRad;
    z *= halfToRad;

    let sx = Math.sin(x);
    let cx = Math.cos(x);
    let sy = Math.sin(y);
    let cy = Math.cos(y);
    let sz = Math.sin(z);
    let cz = Math.cos(z);

    out[0] = sx * cy * cz - cx * sy * sz;
    out[1] = cx * sy * cz + sx * cy * sz;
    out[2] = cx * cy * sz - sx * sy * cz;
    out[3] = cx * cy * cz + sx * sy * sz;

    return out;
}

/**
 * Returns a string representation of a quatenion
 *
 * @param {quat} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
function str(a) {
  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}

/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */
const clone = __WEBPACK_IMPORTED_MODULE_3__vec4__["clone"];
/* harmony export (immutable) */ __webpack_exports__["clone"] = clone;


/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */
const fromValues = __WEBPACK_IMPORTED_MODULE_3__vec4__["fromValues"];
/* harmony export (immutable) */ __webpack_exports__["fromValues"] = fromValues;


/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the source quaternion
 * @returns {quat} out
 * @function
 */
const copy = __WEBPACK_IMPORTED_MODULE_3__vec4__["copy"];
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;


/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */
const set = __WEBPACK_IMPORTED_MODULE_3__vec4__["set"];
/* harmony export (immutable) */ __webpack_exports__["set"] = set;


/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 * @function
 */
const add = __WEBPACK_IMPORTED_MODULE_3__vec4__["add"];
/* harmony export (immutable) */ __webpack_exports__["add"] = add;


/**
 * Alias for {@link quat.multiply}
 * @function
 */
const mul = multiply;
/* harmony export (immutable) */ __webpack_exports__["mul"] = mul;


/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */
const scale = __WEBPACK_IMPORTED_MODULE_3__vec4__["scale"];
/* harmony export (immutable) */ __webpack_exports__["scale"] = scale;


/**
 * Calculates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */
const dot = __WEBPACK_IMPORTED_MODULE_3__vec4__["dot"];
/* harmony export (immutable) */ __webpack_exports__["dot"] = dot;


/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 * @function
 */
const lerp = __WEBPACK_IMPORTED_MODULE_3__vec4__["lerp"];
/* harmony export (immutable) */ __webpack_exports__["lerp"] = lerp;


/**
 * Calculates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 */
const length = __WEBPACK_IMPORTED_MODULE_3__vec4__["length"];
/* harmony export (immutable) */ __webpack_exports__["length"] = length;


/**
 * Alias for {@link quat.length}
 * @function
 */
const len = length;
/* harmony export (immutable) */ __webpack_exports__["len"] = len;


/**
 * Calculates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */
const squaredLength = __WEBPACK_IMPORTED_MODULE_3__vec4__["squaredLength"];
/* harmony export (immutable) */ __webpack_exports__["squaredLength"] = squaredLength;


/**
 * Alias for {@link quat.squaredLength}
 * @function
 */
const sqrLen = squaredLength;
/* harmony export (immutable) */ __webpack_exports__["sqrLen"] = sqrLen;


/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */
const normalize = __WEBPACK_IMPORTED_MODULE_3__vec4__["normalize"];
/* harmony export (immutable) */ __webpack_exports__["normalize"] = normalize;


/**
 * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {quat} a The first quaternion.
 * @param {quat} b The second quaternion.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
const exactEquals = __WEBPACK_IMPORTED_MODULE_3__vec4__["exactEquals"];
/* harmony export (immutable) */ __webpack_exports__["exactEquals"] = exactEquals;


/**
 * Returns whether or not the quaternions have approximately the same elements in the same position.
 *
 * @param {quat} a The first vector.
 * @param {quat} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
const equals = __WEBPACK_IMPORTED_MODULE_3__vec4__["equals"];
/* harmony export (immutable) */ __webpack_exports__["equals"] = equals;


/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {vec3} a the initial vector
 * @param {vec3} b the destination vector
 * @returns {quat} out
 */
const rotationTo = (function() {
  let tmpvec3 = __WEBPACK_IMPORTED_MODULE_2__vec3__["create"]();
  let xUnitVec3 = __WEBPACK_IMPORTED_MODULE_2__vec3__["fromValues"](1,0,0);
  let yUnitVec3 = __WEBPACK_IMPORTED_MODULE_2__vec3__["fromValues"](0,1,0);

  return function(out, a, b) {
    let dot = __WEBPACK_IMPORTED_MODULE_2__vec3__["dot"](a, b);
    if (dot < -0.999999) {
      __WEBPACK_IMPORTED_MODULE_2__vec3__["cross"](tmpvec3, xUnitVec3, a);
      if (__WEBPACK_IMPORTED_MODULE_2__vec3__["len"](tmpvec3) < 0.000001)
        __WEBPACK_IMPORTED_MODULE_2__vec3__["cross"](tmpvec3, yUnitVec3, a);
      __WEBPACK_IMPORTED_MODULE_2__vec3__["normalize"](tmpvec3, tmpvec3);
      setAxisAngle(out, tmpvec3, Math.PI);
      return out;
    } else if (dot > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      __WEBPACK_IMPORTED_MODULE_2__vec3__["cross"](tmpvec3, a, b);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot;
      return normalize(out, out);
    }
  };
})();
/* harmony export (immutable) */ __webpack_exports__["rotationTo"] = rotationTo;


/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {quat} c the third operand
 * @param {quat} d the fourth operand
 * @param {Number} t interpolation amount
 * @returns {quat} out
 */
const sqlerp = (function () {
  let temp1 = create();
  let temp2 = create();

  return function (out, a, b, c, d, t) {
    slerp(temp1, a, d, t);
    slerp(temp2, b, c, t);
    slerp(out, temp1, temp2, 2 * t * (1 - t));

    return out;
  };
}());
/* harmony export (immutable) */ __webpack_exports__["sqlerp"] = sqlerp;


/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {vec3} view  the vector representing the viewing direction
 * @param {vec3} right the vector representing the local "right" direction
 * @param {vec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */
const setAxes = (function() {
  let matr = __WEBPACK_IMPORTED_MODULE_1__mat3__["create"]();

  return function(out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];

    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];

    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];

    return normalize(out, fromMat3(out, matr));
  };
})();
/* harmony export (immutable) */ __webpack_exports__["setAxes"] = setAxes;



/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["create"] = create;
/* harmony export (immutable) */ __webpack_exports__["clone"] = clone;
/* harmony export (immutable) */ __webpack_exports__["fromValues"] = fromValues;
/* harmony export (immutable) */ __webpack_exports__["copy"] = copy;
/* harmony export (immutable) */ __webpack_exports__["set"] = set;
/* harmony export (immutable) */ __webpack_exports__["add"] = add;
/* harmony export (immutable) */ __webpack_exports__["subtract"] = subtract;
/* harmony export (immutable) */ __webpack_exports__["multiply"] = multiply;
/* harmony export (immutable) */ __webpack_exports__["divide"] = divide;
/* harmony export (immutable) */ __webpack_exports__["ceil"] = ceil;
/* harmony export (immutable) */ __webpack_exports__["floor"] = floor;
/* harmony export (immutable) */ __webpack_exports__["min"] = min;
/* harmony export (immutable) */ __webpack_exports__["max"] = max;
/* harmony export (immutable) */ __webpack_exports__["round"] = round;
/* harmony export (immutable) */ __webpack_exports__["scale"] = scale;
/* harmony export (immutable) */ __webpack_exports__["scaleAndAdd"] = scaleAndAdd;
/* harmony export (immutable) */ __webpack_exports__["distance"] = distance;
/* harmony export (immutable) */ __webpack_exports__["squaredDistance"] = squaredDistance;
/* harmony export (immutable) */ __webpack_exports__["length"] = length;
/* harmony export (immutable) */ __webpack_exports__["squaredLength"] = squaredLength;
/* harmony export (immutable) */ __webpack_exports__["negate"] = negate;
/* harmony export (immutable) */ __webpack_exports__["inverse"] = inverse;
/* harmony export (immutable) */ __webpack_exports__["normalize"] = normalize;
/* harmony export (immutable) */ __webpack_exports__["dot"] = dot;
/* harmony export (immutable) */ __webpack_exports__["cross"] = cross;
/* harmony export (immutable) */ __webpack_exports__["lerp"] = lerp;
/* harmony export (immutable) */ __webpack_exports__["random"] = random;
/* harmony export (immutable) */ __webpack_exports__["transformMat2"] = transformMat2;
/* harmony export (immutable) */ __webpack_exports__["transformMat2d"] = transformMat2d;
/* harmony export (immutable) */ __webpack_exports__["transformMat3"] = transformMat3;
/* harmony export (immutable) */ __webpack_exports__["transformMat4"] = transformMat4;
/* harmony export (immutable) */ __webpack_exports__["str"] = str;
/* harmony export (immutable) */ __webpack_exports__["exactEquals"] = exactEquals;
/* harmony export (immutable) */ __webpack_exports__["equals"] = equals;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(4);
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */



/**
 * 2 Dimensional Vector
 * @module vec2
 */

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */
function create() {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](2);
  out[0] = 0;
  out[1] = 0;
  return out;
}

/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {vec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */
function clone(a) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](2);
  out[0] = a[0];
  out[1] = a[1];
  return out;
}

/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */
function fromValues(x, y) {
  let out = new __WEBPACK_IMPORTED_MODULE_0__common__["ARRAY_TYPE"](2);
  out[0] = x;
  out[1] = y;
  return out;
}

/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the source vector
 * @returns {vec2} out
 */
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  return out;
}

/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */
function set(out, x, y) {
  out[0] = x;
  out[1] = y;
  return out;
}

/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  return out;
}

/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  return out;
}

/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  return out;
};

/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  return out;
};

/**
 * Math.ceil the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to ceil
 * @returns {vec2} out
 */
function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  return out;
};

/**
 * Math.floor the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to floor
 * @returns {vec2} out
 */
function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  return out;
};

/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  return out;
};

/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  return out;
};

/**
 * Math.round the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to round
 * @returns {vec2} out
 */
function round (out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  return out;
};

/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */
function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  return out;
};

/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */
function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + (b[0] * scale);
  out[1] = a[1] + (b[1] * scale);
  return out;
};

/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} distance between a and b
 */
function distance(a, b) {
  var x = b[0] - a[0],
    y = b[1] - a[1];
  return Math.sqrt(x*x + y*y);
};

/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} squared distance between a and b
 */
function squaredDistance(a, b) {
  var x = b[0] - a[0],
    y = b[1] - a[1];
  return x*x + y*y;
};

/**
 * Calculates the length of a vec2
 *
 * @param {vec2} a vector to calculate length of
 * @returns {Number} length of a
 */
function length(a) {
  var x = a[0],
    y = a[1];
  return Math.sqrt(x*x + y*y);
};

/**
 * Calculates the squared length of a vec2
 *
 * @param {vec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
function squaredLength (a) {
  var x = a[0],
    y = a[1];
  return x*x + y*y;
};

/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */
function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  return out;
};

/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to invert
 * @returns {vec2} out
 */
function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  return out;
};

/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */
function normalize(out, a) {
  var x = a[0],
    y = a[1];
  var len = x*x + y*y;
  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
    out[0] = a[0] * len;
    out[1] = a[1] * len;
  }
  return out;
};

/**
 * Calculates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1];
};

/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */
function cross(out, a, b) {
  var z = a[0] * b[1] - a[1] * b[0];
  out[0] = out[1] = 0;
  out[2] = z;
  return out;
};

/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec2} out
 */
function lerp(out, a, b, t) {
  var ax = a[0],
    ay = a[1];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */
function random(out, scale) {
  scale = scale || 1.0;
  var r = __WEBPACK_IMPORTED_MODULE_0__common__["RANDOM"]() * 2.0 * Math.PI;
  out[0] = Math.cos(r) * scale;
  out[1] = Math.sin(r) * scale;
  return out;
};

/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat2(out, a, m) {
  var x = a[0],
    y = a[1];
  out[0] = m[0] * x + m[2] * y;
  out[1] = m[1] * x + m[3] * y;
  return out;
};

/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2d} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat2d(out, a, m) {
  var x = a[0],
    y = a[1];
  out[0] = m[0] * x + m[2] * y + m[4];
  out[1] = m[1] * x + m[3] * y + m[5];
  return out;
};

/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat3} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat3(out, a, m) {
  var x = a[0],
    y = a[1];
  out[0] = m[0] * x + m[3] * y + m[6];
  out[1] = m[1] * x + m[4] * y + m[7];
  return out;
};

/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */
function transformMat4(out, a, m) {
  let x = a[0];
  let y = a[1];
  out[0] = m[0] * x + m[4] * y + m[12];
  out[1] = m[1] * x + m[5] * y + m[13];
  return out;
}

/**
 * Returns a string representation of a vector
 *
 * @param {vec2} a vector to represent as a string
 * @returns {String} string representation of the vector
 */
function str(a) {
  return 'vec2(' + a[0] + ', ' + a[1] + ')';
}

/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1];
}

/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */
function equals(a, b) {
  let a0 = a[0], a1 = a[1];
  let b0 = b[0], b1 = b[1];
  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__["EPSILON"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)));
}

/**
 * Alias for {@link vec2.length}
 * @function
 */
const len = length;
/* harmony export (immutable) */ __webpack_exports__["len"] = len;


/**
 * Alias for {@link vec2.subtract}
 * @function
 */
const sub = subtract;
/* harmony export (immutable) */ __webpack_exports__["sub"] = sub;


/**
 * Alias for {@link vec2.multiply}
 * @function
 */
const mul = multiply;
/* harmony export (immutable) */ __webpack_exports__["mul"] = mul;


/**
 * Alias for {@link vec2.divide}
 * @function
 */
const div = divide;
/* harmony export (immutable) */ __webpack_exports__["div"] = div;


/**
 * Alias for {@link vec2.distance}
 * @function
 */
const dist = distance;
/* harmony export (immutable) */ __webpack_exports__["dist"] = dist;


/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */
const sqrDist = squaredDistance;
/* harmony export (immutable) */ __webpack_exports__["sqrDist"] = sqrDist;


/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */
const sqrLen = squaredLength;
/* harmony export (immutable) */ __webpack_exports__["sqrLen"] = sqrLen;


/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
const forEach = (function() {
  let vec = create();

  return function(a, stride, offset, count, fn, arg) {
    let i, l;
    if(!stride) {
      stride = 2;
    }

    if(!offset) {
      offset = 0;
    }

    if(count) {
      l = Math.min((count * stride) + offset, a.length);
    } else {
      l = a.length;
    }

    for(i = offset; i < l; i += stride) {
      vec[0] = a[i]; vec[1] = a[i+1];
      fn(vec, vec, arg);
      a[i] = vec[0]; a[i+1] = vec[1];
    }

    return a;
  };
})();
/* harmony export (immutable) */ __webpack_exports__["forEach"] = forEach;



/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = recompose;
/* harmony export (immutable) */ __webpack_exports__["d"] = requireCompleteCompositionT;
/* unused harmony export copyCompositionT */
/* harmony export (immutable) */ __webpack_exports__["a"] = decompose;
/* harmony export (immutable) */ __webpack_exports__["b"] = lerp;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_gl_matrix__ = __webpack_require__(1);

//  https://github.com/mattdesl/mat4-decompose
//  https://github.com/mattdesl/mat4-recompose
let tmp = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].create();
let perspectiveMatrix = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].create();
const tmpVec4 = [0, 0, 0, 0];
const row = [gvec3(), gvec3(), gvec3()];
const pdum3 = gvec3();
function gvec3() {
    return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].fromValues(0, 0, 0);
}
function mnormalize(out, mat) {
    var m44 = mat[15];
    if (m44 === 0)
        return false;
    var scale = 1 / m44;
    for (var i = 0; i < 16; i++)
        out[i] = mat[i] * scale;
    return true;
}
function recompose(matrix, comp) {
    comp = requireCompleteCompositionT(comp);
    const translation = comp.translation;
    const quaternion = comp.quaternion;
    const perspective = comp.perspective;
    const skew = comp.skew;
    const scale = comp.scale;
    __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].identity(matrix);
    __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].fromRotationTranslation(matrix, quaternion, translation);
    matrix[3] = perspective[0];
    matrix[7] = perspective[1];
    matrix[11] = perspective[2];
    matrix[15] = perspective[3];
    __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].identity(tmp);
    if (skew[2] !== 0) {
        tmp[9] = skew[2];
        __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].multiply(matrix, matrix, tmp);
    }
    if (skew[1] !== 0) {
        tmp[9] = 0;
        tmp[8] = skew[1];
        __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].multiply(matrix, matrix, tmp);
    }
    if (skew[0] !== 0) {
        tmp[8] = 0;
        tmp[4] = skew[0];
        __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].multiply(matrix, matrix, tmp);
    }
    __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].scale(matrix, matrix, scale);
    return matrix;
}
function requireCompleteCompositionT(comp) {
    if (!comp)
        comp = {};
    if (comp.success === undefined)
        comp.success = true;
    if (!comp.translation)
        comp.translation = gvec3();
    if (!comp.scale)
        comp.scale = gvec3();
    if (!comp.skew)
        comp.skew = gvec3();
    if (!comp.perspective)
        comp.perspective = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["g" /* vec4 */].fromValues(0, 0, 0, 1);
    if (!comp.quaternion)
        comp.quaternion = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["d" /* quat */].fromValues(0, 0, 0, 1);
    return comp;
}
function copyCompositionT(comp, deep = false) {
    const keys = Object.keys(comp);
    const out = {};
    for (const key of keys) {
        if (!deep) {
            out[key] = comp[key];
            continue;
        }
        const val = comp[key];
        if (typeof val === 'boolean') {
            out[key] = val;
        }
        else if (val instanceof Float32Array) {
            const arrCopy = Float32Array.from(val);
            out[key] = arrCopy;
        }
        else {
            throw new Error(`copyCompositionT: Unrecognized composition parameter type.`);
        }
    }
    return out;
}
function decompose(matrix) {
    const comp = requireCompleteCompositionT();
    let translation = comp.translation;
    let scale = comp.scale;
    let skew = comp.skew;
    let perspective = comp.perspective;
    let quaternion = comp.quaternion;
    tmp = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].identity(tmp);
    if (!mnormalize(tmp, matrix))
        return { success: false };
    perspectiveMatrix = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].clone(tmp);
    perspectiveMatrix[3] = 0;
    perspectiveMatrix[7] = 0;
    perspectiveMatrix[11] = 0;
    perspectiveMatrix[15] = 1;
    if (Math.abs(__WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].determinant(perspectiveMatrix)) < 1e-8)
        return { success: false };
    var a03 = tmp[3], a13 = tmp[7], a23 = tmp[11], a30 = tmp[12], a31 = tmp[13], a32 = tmp[14], a33 = tmp[15];
    if (a03 !== 0 || a13 !== 0 || a23 !== 0) {
        tmpVec4[0] = a03;
        tmpVec4[1] = a13;
        tmpVec4[2] = a23;
        tmpVec4[3] = a33;
        var ret = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].invert(perspectiveMatrix, perspectiveMatrix);
        if (!ret)
            return { success: false };
        perspectiveMatrix = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].transpose(perspectiveMatrix, perspectiveMatrix);
        vec4multMat4(perspective, tmpVec4, perspectiveMatrix);
    }
    else {
        perspective[0] = perspective[1] = perspective[2] = 0;
        perspective[3] = 1;
    }
    translation[0] = a30;
    translation[1] = a31;
    translation[2] = a32;
    mat3from4(row, tmp);
    scale[0] = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].length(row[0]);
    __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].normalize(row[0], row[0]);
    skew[0] = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].dot(row[0], row[1]);
    combine(row[1], row[1], row[0], 1.0, -skew[0]);
    scale[1] = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].length(row[1]);
    __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].normalize(row[1], row[1]);
    skew[0] /= scale[1];
    skew[1] = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].dot(row[0], row[2]);
    combine(row[2], row[2], row[0], 1.0, -skew[1]);
    skew[2] = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].dot(row[1], row[2]);
    combine(row[2], row[2], row[1], 1.0, -skew[2]);
    scale[2] = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].length(row[2]);
    __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].normalize(row[2], row[2]);
    skew[1] /= scale[2];
    skew[2] /= scale[2];
    __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].cross(pdum3, row[1], row[2]);
    if (__WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].dot(row[0], pdum3) < 0) {
        for (var i = 0; i < 3; i++) {
            scale[i] *= -1;
            row[i][0] *= -1;
            row[i][1] *= -1;
            row[i][2] *= -1;
        }
    }
    quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));
    quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));
    quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));
    quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));
    if (row[2][1] > row[1][2])
        quaternion[0] = -quaternion[0];
    if (row[0][2] > row[2][0])
        quaternion[1] = -quaternion[1];
    if (row[1][0] > row[0][1])
        quaternion[2] = -quaternion[2];
    return {
        success: true,
        translation,
        scale,
        skew,
        perspective,
        quaternion
    };
}
function lerpVec3(out, a, b, amt) {
    for (let i = 0; i < out.length; i++)
        out[i] = a[i] + (b[i] - a[i]) * amt;
    return out;
}
function lerp(a, b, amt) {
    //
    //  @TODO: Add complete set of interpolations!
    //
    const out = requireCompleteCompositionT();
    const a_ = requireCompleteCompositionT(copyCompositionT(a));
    const b_ = requireCompleteCompositionT(copyCompositionT(b));
    out.quaternion = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["d" /* quat */].lerp(out.quaternion, a_.quaternion, b_.quaternion, amt);
    lerpVec3(out.translation, a_.translation, b_.translation, amt);
    lerpVec3(out.scale, a_.scale, b_.scale, amt);
    return out;
}
function vec4multMat4(out, a, m) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
    return out;
}
function mat3from4(out, mat4x4) {
    out[0][0] = mat4x4[0];
    out[0][1] = mat4x4[1];
    out[0][2] = mat4x4[2];
    out[1][0] = mat4x4[4];
    out[1][1] = mat4x4[5];
    out[1][2] = mat4x4[6];
    out[2][0] = mat4x4[8];
    out[2][1] = mat4x4[9];
    out[2][2] = mat4x4[10];
}
function combine(out, a, b, scale1, scale2) {
    out[0] = a[0] * scale1 + b[0] * scale2;
    out[1] = a[1] * scale1 + b[1] * scale2;
    out[2] = a[2] * scale1 + b[2] * scale2;
}


/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validators", function() { return validators; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common_resource__ = __webpack_require__(7);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__type_util__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__common_util__ = __webpack_require__(23);



//
//	Attribute
//
class _AttributeBase {
    constructor(name, value, validator) {
        this.name = name;
        this.value = value;
        this.validator = validator;
    }
    activator(type, ...args) {
        return new type(...args);
    }
}
class _Attribute extends _AttributeBase {
    constructor(name, value, validator = validators.Any) {
        super(name, value, validator);
        this.value = null;
        this.isDirty = true;
        this.name = name;
        this.setValidator(validator);
        this.validate(value);
        this.setValue(value);
    }
    getValue() {
        this.isDirty = false;
        return this.value;
    }
    peekValue() {
        return this.value;
    }
    setValue(value) {
        this.validate(value);
        this.value = this._setValue(value);
        this.isDirty = true;
    }
    setValidator(validator) {
        this.validator = validator;
    }
    validate(value) {
        if (this.validator)
            this.validator(this, value);
    }
}
/* harmony export (immutable) */ __webpack_exports__["_Attribute"] = _Attribute;

var validators;
(function (validators) {
    function Any(attr, data) { }
    validators.Any = Any;
    function Number(attr, data) {
        if (typeof (data) !== 'number')
            throw new Error(`Attribute "${attr.name}" must be a number.`);
    }
    validators.Number = Number;
    function Vec3(attr, data) {
        if (!__WEBPACK_IMPORTED_MODULE_1__type_util__["isNElementArray"](data, 3)) {
            throw new Error(`Attribute "${attr.name}" must be a vec3, or equivalent array-type.`);
        }
    }
    validators.Vec3 = Vec3;
    function Vec3OrTexture(attr, data) {
        if (!__WEBPACK_IMPORTED_MODULE_1__type_util__["isNElementArray"](data, 3) && !__WEBPACK_IMPORTED_MODULE_1__type_util__["isTexture"](data)) {
            throw new Error(`Attribute "${attr.name}" must be a vec3 (or equivalent array-type), or a texture.`);
        }
    }
    validators.Vec3OrTexture = Vec3OrTexture;
    function NumberOrTexture(attr, data) {
        if (!__WEBPACK_IMPORTED_MODULE_1__type_util__["isNumber"](data) && !__WEBPACK_IMPORTED_MODULE_1__type_util__["isTexture"](data)) {
            throw new Error(`Attribute "${attr.name}" must be a number, or a texture.`);
        }
    }
    validators.NumberOrTexture = NumberOrTexture;
    function Boolean(attr, data) {
        if (typeof (data) !== 'boolean')
            throw new Error(`Attribute "${attr.name}" must be a boolean.`);
    }
    validators.Boolean = Boolean;
})(validators || (validators = {}));
class _AttributeMap {
    constructor() {
        this.items = {};
    }
    add(val) {
        this.items[val.name] = val;
    }
    remove(name) {
        delete this.items[name];
    }
    getAll() {
        let items = this.items;
        let keys = Object.keys(items);
        let values = keys.map(key => items[key]);
        return values;
    }
    has(key) {
        return this.items[key] !== undefined;
    }
    getOne(key) {
        let item = this.items[key];
        if (item === undefined)
            throw new Error(`Requested non-present attribute "${key}".`);
        return item;
    }
}
/* harmony export (immutable) */ __webpack_exports__["_AttributeMap"] = _AttributeMap;

class Attributable extends __WEBPACK_IMPORTED_MODULE_0__common_resource__["a" /* Resource */] {
    constructor() { super(); }
    addAttribute(attr) {
        this.attributes.add(attr);
    }
    removeAttribute(name) {
        this.attributes.remove(name);
    }
    addAttributes(...attrs) {
        for (let attr of attrs) {
            this.addAttribute(attr);
        }
    }
    hasAttribute(name) {
        return this.attributes.has(name);
    }
    enumerateAttributes() {
        return this.attributes.getAll();
    }
    getAttribute(name) {
        return this.attributes.getOne(name);
    }
    activator(type, ...args) {
        return new type(...args);
    }
    _clone(attributableConstructor, attributeConstructor, ...args) {
        let copy = this.activator(attributableConstructor, ...args);
        for (let attr of this.enumerateAttributes()) {
            if (!copy.hasAttribute(attr.name)) {
                let copyAtt = __WEBPACK_IMPORTED_MODULE_2__common_util__["clone"](attr.peekValue());
                let attr_ = attr.activator(attributeConstructor, attr.name, copyAtt, attr.validator);
                copy.addAttribute(attr_);
            }
            else {
                copy.getAttribute(attr.name).setValue(__WEBPACK_IMPORTED_MODULE_2__common_util__["clone"](attr.peekValue()));
            }
        }
        return copy;
    }
}
/* harmony export (immutable) */ __webpack_exports__["Attributable"] = Attributable;



/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class Defaults {
    constructor(...args) { this.options = this.get(...args); }
    set(name, value) {
        this.options[name] = value;
        return this;
    }
}
/* unused harmony export Defaults */



/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["getImageData"] = getImageData;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_util__ = __webpack_require__(0);

function getImageData(image) {
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    canvas.width = image.width;
    canvas.height = image.height;
    context.drawImage(image, 0, 0);
    return context.getImageData(0, 0, image.width, image.height).data;
}
class Image {
    constructor(image, nComponents = 4, maxValue = 255) {
        this.element = image;
        this.data = getImageData(image);
        this.nComponents = nComponents;
        this.width = image.width;
        this.height = image.height;
        this.maxValue = maxValue;
    }
    size() {
        return this.data.length / this.nComponents;
    }
    valuesAt(index) {
        __WEBPACK_IMPORTED_MODULE_0__util_util__["b" /* assert */].assertInteger(index, 'pixel index');
        let values = new Uint8ClampedArray(this.nComponents);
        for (let i = 0; i < this.nComponents; i++) {
            values[i] = this.data[index + i];
        }
        return values;
    }
    valuesAtXY(x, y) {
        __WEBPACK_IMPORTED_MODULE_0__util_util__["b" /* assert */].assertInteger(x, 'x coordinate');
        __WEBPACK_IMPORTED_MODULE_0__util_util__["b" /* assert */].assertInteger(y, 'y coordinate');
        let index = (y * (this.width) + x) * this.nComponents;
        return this.valuesAt(index);
    }
    drawIntoDebug(canvas) {
        let context = canvas.getContext('2d');
        let w = this.width;
        for (let y = 0; y < this.height; y++) {
            for (let x = 0; x < this.width; x++) {
                let values = this.valuesAtXY(x, y);
                let r = values[0], g = values[1], b = values[2], a = values[3];
                context.fillStyle = `rgba(${r}, ${g}, ${b}, ${a})`;
                context.fillRect(x, y, 1, 1);
            }
        }
    }
}
/* harmony export (immutable) */ __webpack_exports__["Image"] = Image;



/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export ShaderLibrary */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__shaders_shader_basic__ = __webpack_require__(58);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shaders_shader_basic_tex__ = __webpack_require__(59);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__shaders_shader_pbr1__ = __webpack_require__(60);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shaders_shader_skybox__ = __webpack_require__(61);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shaders_shader_volume__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__shaders_shader_gen_shadows1__ = __webpack_require__(63);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__shaders_shader_use_shadows1__ = __webpack_require__(64);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__shaders_shader_pbr_tex__ = __webpack_require__(65);








const ShaderLibrary = {
    Basic: __WEBPACK_IMPORTED_MODULE_0__shaders_shader_basic__["a" /* Basic */],
    BasicTex: __WEBPACK_IMPORTED_MODULE_1__shaders_shader_basic_tex__["a" /* BasicTex */],
    GenShadows1: __WEBPACK_IMPORTED_MODULE_5__shaders_shader_gen_shadows1__["a" /* GenShadows1 */],
    UseShadows1: __WEBPACK_IMPORTED_MODULE_6__shaders_shader_use_shadows1__["a" /* UseShadows1 */],
    PBR1: __WEBPACK_IMPORTED_MODULE_2__shaders_shader_pbr1__["a" /* PBR1 */],
    PBRTex: __WEBPACK_IMPORTED_MODULE_7__shaders_shader_pbr_tex__["a" /* PBRTex */],
    Skybox: __WEBPACK_IMPORTED_MODULE_3__shaders_shader_skybox__["a" /* Skybox */],
    Volume: __WEBPACK_IMPORTED_MODULE_4__shaders_shader_volume__["a" /* Volume */],
};



/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Basic; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__shader_shader__ = __webpack_require__(2);

var _sources;
(function (_sources) {
    _sources.vertex = `
		attribute vec3 in_position;
		attribute vec3 in_normal;
		attribute vec2 in_uv;

		uniform mat4 model;
		uniform mat4 projection;
		uniform mat4 view;

		void main() {
			gl_Position = projection * view * model * vec4(in_position, 1.0);
		}
	`;
    _sources.fragment = `
		precision mediump float;

		uniform vec3 albedo;

		void main() {
      		gl_FragColor = vec4(albedo, 1.0);
    	}
	`;
})(_sources || (_sources = {}));
const Basic = {
    sources: [
        {
            source: _sources.vertex,
            type: __WEBPACK_IMPORTED_MODULE_0__shader_shader__["c" /* ShaderTypes */].VERTEX,
            uniforms: ['model', 'view', 'projection']
        },
        {
            source: _sources.fragment,
            type: __WEBPACK_IMPORTED_MODULE_0__shader_shader__["c" /* ShaderTypes */].FRAGMENT,
            uniforms: ['albedo']
        }
    ]
};



/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BasicTex; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__shader_shader__ = __webpack_require__(2);

var _sources;
(function (_sources) {
    _sources.vertex = `
		attribute vec3 in_position;
		attribute vec3 in_normal;
		attribute vec2 in_uv;

		varying vec2 v_uv;

		uniform mat4 model;
		uniform mat4 projection;
		uniform mat4 view;

		void main() {
			v_uv = in_uv;
			gl_Position = projection * view * model * vec4(in_position, 1.0);
		}
	`;
    _sources.fragment = `
		precision mediump float;

		varying vec2 v_uv;

		uniform sampler2D albedo;

		void main() {
			vec3 albedo_ = texture2D(albedo, v_uv).rgb;
      		gl_FragColor = vec4(albedo_, 1.0);
    	}
	`;
})(_sources || (_sources = {}));
const BasicTex = {
    sources: [
        {
            source: _sources.vertex,
            type: __WEBPACK_IMPORTED_MODULE_0__shader_shader__["c" /* ShaderTypes */].VERTEX,
            uniforms: ['model', 'view', 'projection']
        },
        {
            source: _sources.fragment,
            type: __WEBPACK_IMPORTED_MODULE_0__shader_shader__["c" /* ShaderTypes */].FRAGMENT,
            uniforms: ['albedo']
        }
    ]
};



/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PBR1; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__shader_shader__ = __webpack_require__(2);

var _sources;
(function (_sources) {
    _sources.vertex = `
		attribute vec3 in_position;
		attribute vec3 in_normal;
		attribute vec2 in_uv;

		uniform mat4 model;
		uniform mat4 view;
		uniform mat4 projection;

		varying mediump vec3 v_position;
		varying mediump vec2 v_uv;
		varying mediump vec3 v_normal;

		void main() {
			v_position = vec3(model * vec4(in_position, 1.0));
			v_uv = in_uv;
			v_normal = in_normal;
			gl_Position = projection * view * model * vec4(in_position, 1.0);
		}
	`;
    _sources.fragment = `

		precision mediump float;

		const float PI = 3.14159265359;

		float distribution_ggx(vec3 N, vec3 H, float roughness);
		float geometry_schlick_ggx(float NdotV, float roughness);
		float geometry_smith(vec3 N, vec3 V, vec3 L, float roughness);
		vec3 fresnel_schlick(float cos_theta, vec3 F0);

		vec3 PBR(
		     vec3 normals,
		     vec3 albedo,
		     float roughness,
		     float metallic,
		     vec3 cam_position,
		     vec3 world_position,
		     vec3 light_position,
		     vec3 light_color,
		     bool is_directional) {
		    
		    vec3 F0 = vec3(0.04);
		    F0 = mix(F0, albedo, metallic);
		    
		    vec3 N = normalize(normals);
		    vec3 V = normalize(cam_position - world_position);
		    
		    vec3 L;

		    if (!is_directional) {
		    	L = normalize(light_position - world_position);
		    } else {
		    	L = normalize(-light_position);
		    }

		    vec3 H = normalize(V + L);

		    float attenuation = 1.0;
		    
		    if (!is_directional) {
		    	float distance = length(light_position - world_position);
		    	attenuation = 1.0 / (distance * distance * 0.0002);
		    }
		    
		    vec3 radiance = light_color * attenuation;
		    
		    vec3 F = fresnel_schlick(max(dot(H, V), 0.0), F0);
		    float NDF = distribution_ggx(N, H, roughness);
		    float G = geometry_smith(N, V, L, roughness);
		    vec3 numer = vec3(NDF) * vec3(G) * F;
		    float denom = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001;
		    vec3 specular = numer / denom;
		    
		    vec3 kS = F;
		    vec3 kD = vec3(1.0) - kS;
		    kD *= 1.0 - metallic;
		    
		    float NdotL = max(dot(N, L), 0.0);
		    return (kD * albedo / PI + specular) * radiance * NdotL;
		}

		//
		//  Fresnel component (F)
		//

		vec3 fresnel_schlick(float cosTheta, vec3 F0) {
		    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
		}

		//
		//  Normal distribution component (D)
		//

		float distribution_beckman(vec3 h, vec3 n, float roughness) {
		    float a = roughness * roughness;
		    float a2 = a * a;
		    float n_dot_h = max(dot(n, h), 0.0);
		    float n_dot_h2 = n_dot_h * n_dot_h;
		    float part_a = 1.0 / (PI * a2 * pow(n_dot_h, 4.0));
		    float exp_component = (n_dot_h2 - 1.0) / (a2 * n_dot_h2);
		    return part_a * exp(exp_component);
		}

		float distribution_ggx(vec3 N, vec3 H, float roughness) {
		    float a = roughness * roughness;
		    float a2 = a * a;
		    float NdotH = max(dot(N, H), 0.0);
		    float NdotH2 = NdotH * NdotH;
		    
		    float denom = (NdotH2 * (a2-1.0) + 1.0);
		    denom = PI * denom * denom;
		    
		    return a2 / denom;
		}

		//
		//  Geometry distribution component (G)
		//

		float geometry_schlick_ggx(float NdotV, float roughness) {
		    float r = roughness + 1.0;
		    //  direct light
		    float k = (r*r) / 8.0;
		    //  IBL
		    //  float k = (roughness * roughness) / 2;
		    float denom = NdotV * (1.0 - k) + k;
		    return NdotV / denom;
		}

		float geometry_smith(vec3 N, vec3 V, vec3 L, float roughness) {
		    float NdotV = max(dot(N, V), 0.0);
		    float NdotL = max(dot(N, L), 0.0);
		    float ggx2 = geometry_schlick_ggx(NdotV, roughness);
		    float ggx1 = geometry_schlick_ggx(NdotL, roughness);
		    return ggx1 * ggx2;
		}

		struct PointLight {
			vec3 position;
			vec3 color;
			vec3 mask;
		};

		struct DirectionalLight {
			vec3 direction;
			vec3 color;
			vec3 mask;
		};

		const int n_point_lights = 2;
		const int n_directional_lights = 1;

		uniform PointLight point_lights[n_point_lights];
		uniform DirectionalLight directional_lights[n_directional_lights];

		uniform vec3 cam_position;

		uniform vec3 albedo;
		uniform float roughness;
		uniform float metallic;

		varying mediump vec3 v_position;
		varying mediump vec2 v_uv;
		varying mediump vec3 v_normal;

		void main() {

			vec3 final_color = albedo;

			vec3 Lo = vec3(0.0);

			//	point lights

			for (int i = 0; i < n_point_lights; i++) {
				bool is_directional = false;
				vec3 res = PBR(v_normal, albedo, roughness, metallic, 
					cam_position, v_position, point_lights[i].position, point_lights[i].color, is_directional);
				res *= point_lights[i].mask;
				Lo += res;
			}

			//	directional lights

			for (int i = 0; i < n_directional_lights; i++) {
				bool is_directional = true;
				vec3 res = PBR(v_normal, albedo, roughness, metallic, 
					cam_position, v_position, directional_lights[i].direction, directional_lights[i].color, is_directional);
				res *= directional_lights[i].mask;
				Lo += res;
			}

			vec3 ambient = vec3(0.03) * albedo;

		    final_color = ambient + Lo;
		    final_color = final_color / (final_color + vec3(1.0));
		    final_color = pow(final_color, vec3(1.0/2.2));

      		gl_FragColor = vec4(final_color, 1.0);
    	}
	`;
})(_sources || (_sources = {}));
const PBR1 = {
    sources: [
        {
            source: _sources.vertex,
            type: __WEBPACK_IMPORTED_MODULE_0__shader_shader__["c" /* ShaderTypes */].VERTEX,
            uniforms: ['model', 'view', 'projection']
        },
        {
            source: _sources.fragment,
            type: __WEBPACK_IMPORTED_MODULE_0__shader_shader__["c" /* ShaderTypes */].FRAGMENT,
            uniforms: ['point', 'directional', 'direction', 'position', 'color', 'mask',
                'albedo', 'roughness', 'metallic', 'camera_position']
        }
    ]
};



/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Skybox; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__shader_shader__ = __webpack_require__(2);

var _sources;
(function (_sources) {
    _sources.vertex = `
		attribute vec3 in_position;
		attribute vec3 in_normal;
		attribute vec2 in_uv;

		uniform mat4 projection;
		uniform mat4 view;
		uniform mat4 model;

		varying mediump vec2 v_uv;
		varying mediump vec3 v_normal;

		void main() {
			mat4 viewT = mat4(mat3(view));
			vec4 pos = projection * viewT * vec4(in_position, 1.0);
			v_uv = in_uv;
			v_normal = in_normal;
			gl_Position = pos.xyww;
		}
	`;
    _sources.fragment = `

		precision mediump float;

		varying mediump vec2 v_uv;
		varying mediump vec3 v_normal;

		uniform sampler2D albedo;

		void main() {
      		// gl_FragColor = texture2D(albedo, v_uv);
      		vec3 albedo_v = texture2D(albedo, v_uv).rgb;
      		gl_FragColor = vec4(albedo_v, 1.0);
    	}
	`;
})(_sources || (_sources = {}));
const Skybox = {
    sources: [
        {
            source: _sources.vertex,
            type: __WEBPACK_IMPORTED_MODULE_0__shader_shader__["c" /* ShaderTypes */].VERTEX,
            uniforms: ['view', 'projection']
        },
        {
            source: _sources.fragment,
            type: __WEBPACK_IMPORTED_MODULE_0__shader_shader__["c" /* ShaderTypes */].FRAGMENT,
            uniforms: ['albedo']
        }
    ]
};



/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Volume; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__shader_shader__ = __webpack_require__(2);

// https://github.com/Erkaman/glsl-godrays 
// https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch13.html
var _sources;
(function (_sources) {
    _sources.vertex = `
		attribute vec3 in_position;
		attribute vec3 in_normal;
		attribute vec2 in_uv;

		varying mediump vec2 v_uv;

		void main() {
			v_uv = in_uv;
			gl_Position = vec4(in_position, 1.0);
		}
	`;
    _sources.fragment = `

		precision highp float;

		vec3 godrays(
		    float density,
		    float weight,
		    float decay,
		    float exposure,
		    int numSamples,
		    sampler2D occlusionTexture,
		    vec2 screenSpaceLightPos,
		    vec2 uv
	    ) {

		    vec3 fragColor = vec3(0.0,0.0,0.0);

			vec2 deltaTexCoord = vec2( uv - screenSpaceLightPos.xy );

			vec2 texCoord = uv.xy;
			deltaTexCoord *= (1.0 / float(numSamples)) * density;
			float illuminationDecay = 1.0;

			for(int i=0; i < 100 ; i++){
			    if(numSamples < i) {
		            break;
			    }

				texCoord -= deltaTexCoord;
				vec3 samp = texture2D(occlusionTexture, texCoord).xyz;
				samp *= illuminationDecay * weight;
				fragColor += samp;
				illuminationDecay *= decay;
			}

			fragColor *= exposure;

		    return fragColor;
		}

		varying vec2 v_uv;
		varying vec3 v_normal;

		uniform vec3 uScreenSpaceSunPos;
		uniform sampler2D uOcclusionTexture;

		uniform float uDensity;
		uniform float uWeight;
		uniform float uDecay;
		uniform float uExposure;
		uniform int uNumSamples;

		void main() {

			vec2 screenSpaceSunPos = uScreenSpaceSunPos.xy;

			vec3 fragColor = godrays(
			    uDensity,
			    uWeight,
			    uDecay,
			    uExposure,
			    uNumSamples,
			    uOcclusionTexture,
			    screenSpaceSunPos,
			    v_uv
		    );

		    gl_FragColor = vec4(fragColor, 1.0);
		}
	`;
})(_sources || (_sources = {}));
const Volume = {
    sources: [
        {
            source: _sources.vertex,
            type: __WEBPACK_IMPORTED_MODULE_0__shader_shader__["c" /* ShaderTypes */].VERTEX,
            uniforms: []
        },
        {
            source: _sources.fragment,
            type: __WEBPACK_IMPORTED_MODULE_0__shader_shader__["c" /* ShaderTypes */].FRAGMENT,
            uniforms: []
        }
    ]
};



/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GenShadows1; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__shader_shader__ = __webpack_require__(2);

var _sources;
(function (_sources) {
    _sources.vertex = `
		attribute vec3 in_position;

		uniform mat4 model;
		uniform mat4 view;
		uniform mat4 projection;

		void main() {
			gl_Position = projection * view * model * vec4(in_position, 1.0);
		}
	`;
    _sources.fragment = `
		void main() {
		    gl_FragColor = vec4(1.0);
		}
	`;
})(_sources || (_sources = {}));
const GenShadows1 = {
    sources: [
        {
            source: _sources.vertex,
            type: __WEBPACK_IMPORTED_MODULE_0__shader_shader__["c" /* ShaderTypes */].VERTEX,
            uniforms: ['model', 'view', 'projection']
        },
        {
            source: _sources.fragment,
            type: __WEBPACK_IMPORTED_MODULE_0__shader_shader__["c" /* ShaderTypes */].FRAGMENT,
            uniforms: []
        }
    ]
};



/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return UseShadows1; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__shader_shader__ = __webpack_require__(2);

var _sources;
(function (_sources) {
    _sources.vertex = `
		attribute vec3 in_position;
		attribute vec3 in_normal;
		attribute vec2 in_uv;

		uniform mat4 model;
		uniform mat4 view;
		uniform mat4 projection;

		uniform mat4 light_space_transform;

		varying mediump vec3 v_position;
		varying mediump vec2 v_uv;
		varying mediump vec3 v_normal;

		varying mediump vec4 v_light_space_position;

		void main() {
			vec4 v4_position = vec4(in_position, 1.0);
			v_position = vec3(model * v4_position);
			v_uv = in_uv;
			v_normal = in_normal;
			v_light_space_position = light_space_transform * model * v4_position;
			gl_Position = projection * view * model * vec4(in_position, 1.0);
		}
	`;
    _sources.fragment = `

		precision mediump float;

		const float PI = 3.14159265359;

		float distribution_ggx(vec3 N, vec3 H, float roughness);
		float geometry_schlick_ggx(float NdotV, float roughness);
		float geometry_smith(vec3 N, vec3 V, vec3 L, float roughness);
		vec3 fresnel_schlick(float cos_theta, vec3 F0);

		vec3 PBR(
		     vec3 normals,
		     vec3 albedo,
		     float roughness,
		     float metallic,
		     vec3 cam_position,
		     vec3 world_position,
		     vec3 light_position,
		     vec3 light_color,
		     bool is_directional) {
		    
		    vec3 F0 = vec3(0.04);
		    F0 = mix(F0, albedo, metallic);
		    
		    vec3 N = normalize(normals);
		    vec3 V = normalize(cam_position - world_position);
		    
		    vec3 L;

		    if (!is_directional) {
		    	L = normalize(light_position - world_position);
		    } else {
		    	L = normalize(-light_position);
		    }

		    vec3 H = normalize(V + L);

		    float attenuation = 1.0;
		    
		    if (!is_directional) {
		    	float distance = length(light_position - world_position);
		    	attenuation = 1.0 / (distance * distance * 0.0002);
		    }
		    
		    vec3 radiance = light_color * attenuation;
		    
		    vec3 F = fresnel_schlick(max(dot(H, V), 0.0), F0);
		    float NDF = distribution_ggx(N, H, roughness);
		    float G = geometry_smith(N, V, L, roughness);
		    vec3 numer = vec3(NDF) * vec3(G) * F;
		    float denom = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001;
		    vec3 specular = numer / denom;
		    
		    vec3 kS = F;
		    vec3 kD = vec3(1.0) - kS;
		    kD *= 1.0 - metallic;
		    
		    float NdotL = max(dot(N, L), 0.0);
		    return (kD * albedo / PI + specular) * radiance * NdotL;
		}

		//
		//  Fresnel component (F)
		//

		vec3 fresnel_schlick(float cosTheta, vec3 F0) {
		    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
		}

		//
		//  Normal distribution component (D)
		//

		float distribution_beckman(vec3 h, vec3 n, float roughness) {
		    float a = roughness * roughness;
		    float a2 = a * a;
		    float n_dot_h = max(dot(n, h), 0.0);
		    float n_dot_h2 = n_dot_h * n_dot_h;
		    float part_a = 1.0 / (PI * a2 * pow(n_dot_h, 4.0));
		    float exp_component = (n_dot_h2 - 1.0) / (a2 * n_dot_h2);
		    return part_a * exp(exp_component);
		}

		float distribution_ggx(vec3 N, vec3 H, float roughness) {
		    float a = roughness * roughness;
		    float a2 = a * a;
		    float NdotH = max(dot(N, H), 0.0);
		    float NdotH2 = NdotH * NdotH;
		    
		    float denom = (NdotH2 * (a2-1.0) + 1.0);
		    denom = PI * denom * denom;
		    
		    return a2 / denom;
		}

		//
		//  Geometry distribution component (G)
		//

		float geometry_schlick_ggx(float NdotV, float roughness) {
		    float r = roughness + 1.0;
		    //  direct light
		    float k = (r*r) / 8.0;
		    //  IBL
		    //  float k = (roughness * roughness) / 2;
		    float denom = NdotV * (1.0 - k) + k;
		    return NdotV / denom;
		}

		float geometry_smith(vec3 N, vec3 V, vec3 L, float roughness) {
		    float NdotV = max(dot(N, V), 0.0);
		    float NdotL = max(dot(N, L), 0.0);
		    float ggx2 = geometry_schlick_ggx(NdotV, roughness);
		    float ggx1 = geometry_schlick_ggx(NdotL, roughness);
		    return ggx1 * ggx2;
		}

		//
		//	shadow stuff
		//

		float calculate_shadows(vec4 light_space_position, sampler2D depth_tex, float texture_size, float bias) {
			vec3 proj_coords = light_space_position.xyz / light_space_position.w;
			vec2 texel_size = vec2(1.0 / texture_size);
			proj_coords = proj_coords * 0.5 + 0.5;

			float shadow = 0.0;

			for (int x = -1; x <= 1; ++x) {
				for (int y = -1; y <= 1; ++y) {
					float nearest = texture2D(depth_tex, proj_coords.xy + (vec2(x, y) * texel_size)).r;
					float test = proj_coords.z;
					shadow += (test - bias > nearest ? 0.0 : 1.0);
				}
			}

			return shadow / 9.0;
		}

		vec2 gauss_filter[7];

		float calculate_shadows_gauss(vec4 light_space_position, sampler2D depth_tex, float texture_size, float bias) {
			vec3 proj_coords = light_space_position.xyz / light_space_position.w;
			proj_coords = proj_coords * 0.5 + 0.5;
			float shadow = 0.0;
			float scale = 0.005;
			for(int i = 0; i < 7; i++) {
				float test = proj_coords.z;
				float nearest = texture2D(depth_tex, (proj_coords.xy + gauss_filter[i].y * scale)).r;
				shadow += (test - bias > nearest ? 0.0 : 1.0);
			}
			return shadow / 7.0;
		}

		void setup_gauss_filter() {
			gauss_filter[0] = vec2(-3.0, 0.015625);
			gauss_filter[1] = vec2(-2.0, 0.09375);
			gauss_filter[2] = vec2(-1.0, 0.234375);
			gauss_filter[3] = vec2(0.0,	0.3125);
			gauss_filter[4] = vec2(1.0,	0.234375);
			gauss_filter[5] = vec2(2.0,	0.09375);
			gauss_filter[6] = vec2(3.0,	0.015625);
		}

		struct PointLight {
			vec3 position;
			vec3 color;
			vec3 mask;
			bool casts_shadow;
		};

		struct DirectionalLight {
			vec3 direction;
			vec3 color;
			vec3 mask;
		};

		const int n_point_lights = 1;
		const int n_directional_lights = 1;

		uniform PointLight point_lights[n_point_lights];
		uniform DirectionalLight directional_lights[n_directional_lights];

		uniform vec3 cam_position;

		//	shadow stuff
		uniform sampler2D shadow_depth_map;
		uniform float shadow_size;

		uniform vec3 albedo;
		uniform float roughness;
		uniform float metallic;

		varying mediump vec4 v_light_space_position;

		varying mediump vec3 v_position;
		varying mediump vec2 v_uv;
		varying mediump vec3 v_normal;

		void main() {

			//	shadow stuff

			setup_gauss_filter();

			float shadow1 = calculate_shadows(v_light_space_position, shadow_depth_map, shadow_size, 0.005);

			//	regular stuff

			vec3 final_color = albedo;

			vec3 Lo = vec3(0.0);

			//	point lights

			for (int i = 0; i < n_point_lights; i++) {
				bool is_directional = false;
				vec3 res = PBR(v_normal, albedo, roughness, metallic, 
					cam_position, v_position, point_lights[i].position, point_lights[i].color, is_directional);
				res *= point_lights[i].mask;
				res *= shadow1;
				Lo += res;
			}

			//	directional lights

			for (int i = 0; i < n_directional_lights; i++) {
				bool is_directional = true;
				vec3 res = PBR(v_normal, albedo, roughness, metallic, 
					cam_position, v_position, directional_lights[i].direction, directional_lights[i].color, is_directional);
				res *= directional_lights[i].mask;
				Lo += res;
			}

			vec3 ambient = vec3(0.03) * albedo;

		    final_color = ambient + Lo;
		    final_color = final_color / (final_color + vec3(1.0));
		    final_color = pow(final_color, vec3(1.0/2.2));

      		gl_FragColor = vec4(final_color, 1.0);
    	}
	`;
})(_sources || (_sources = {}));
const UseShadows1 = {
    sources: [
        {
            source: _sources.vertex,
            type: __WEBPACK_IMPORTED_MODULE_0__shader_shader__["c" /* ShaderTypes */].VERTEX,
            uniforms: ['model', 'view', 'projection']
        },
        {
            source: _sources.fragment,
            type: __WEBPACK_IMPORTED_MODULE_0__shader_shader__["c" /* ShaderTypes */].FRAGMENT,
            uniforms: ['point', 'directional', 'direction', 'position', 'color', 'mask',
                'albedo', 'roughness', 'metallic', 'camera_position']
        }
    ]
};



/***/ }),
/* 65 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PBRTex; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__shader_shader__ = __webpack_require__(2);

var _sources;
(function (_sources) {
    _sources.vertex = `
		attribute vec3 in_position;
		attribute vec3 in_normal;
		attribute vec2 in_uv;

		uniform mat4 model;
		uniform mat4 view;
		uniform mat4 projection;

		varying mediump vec3 v_position;
		varying mediump vec2 v_uv;
		varying mediump vec3 v_normal;

		void main() {
			v_position = vec3(model * vec4(in_position, 1.0));
			v_uv = in_uv;
			v_normal = in_normal;
			gl_Position = projection * view * model * vec4(in_position, 1.0);
		}
	`;
    _sources.fragment = `

		precision mediump float;

		const float PI = 3.14159265359;

		float distribution_ggx(vec3 N, vec3 H, float roughness);
		float geometry_schlick_ggx(float NdotV, float roughness);
		float geometry_smith(vec3 N, vec3 V, vec3 L, float roughness);
		vec3 fresnel_schlick(float cos_theta, vec3 F0);

		vec3 PBR(
		     vec3 normals,
		     vec3 albedo,
		     float roughness,
		     float metallic,
		     vec3 cam_position,
		     vec3 world_position,
		     vec3 light_position,
		     vec3 light_color,
		     bool is_directional) {
		    
		    vec3 F0 = vec3(0.04);
		    F0 = mix(F0, albedo, metallic);
		    
		    vec3 N = normalize(normals);
		    vec3 V = normalize(cam_position - world_position);
		    
		    vec3 L;

		    if (!is_directional) {
		    	L = normalize(light_position - world_position);
		    } else {
		    	L = normalize(-light_position);
		    }

		    vec3 H = normalize(V + L);

		    float attenuation = 1.0;
		    
		    if (!is_directional) {
		    	float distance = length(light_position - world_position);
		    	attenuation = 1.0 / (distance * distance * 0.0002);
		    }
		    
		    vec3 radiance = light_color * attenuation;
		    
		    vec3 F = fresnel_schlick(max(dot(H, V), 0.0), F0);
		    float NDF = distribution_ggx(N, H, roughness);
		    float G = geometry_smith(N, V, L, roughness);
		    vec3 numer = vec3(NDF) * vec3(G) * F;
		    float denom = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001;
		    vec3 specular = numer / denom;
		    
		    vec3 kS = F;
		    vec3 kD = vec3(1.0) - kS;
		    kD *= 1.0 - metallic;
		    
		    float NdotL = max(dot(N, L), 0.0);
		    return (kD * albedo / PI + specular) * radiance * NdotL;
		}

		//
		//  Fresnel component (F)
		//

		vec3 fresnel_schlick(float cosTheta, vec3 F0) {
		    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
		}

		//
		//  Normal distribution component (D)
		//

		float distribution_beckman(vec3 h, vec3 n, float roughness) {
		    float a = roughness * roughness;
		    float a2 = a * a;
		    float n_dot_h = max(dot(n, h), 0.0);
		    float n_dot_h2 = n_dot_h * n_dot_h;
		    float part_a = 1.0 / (PI * a2 * pow(n_dot_h, 4.0));
		    float exp_component = (n_dot_h2 - 1.0) / (a2 * n_dot_h2);
		    return part_a * exp(exp_component);
		}

		float distribution_ggx(vec3 N, vec3 H, float roughness) {
		    float a = roughness * roughness;
		    float a2 = a * a;
		    float NdotH = max(dot(N, H), 0.0);
		    float NdotH2 = NdotH * NdotH;
		    
		    float denom = (NdotH2 * (a2-1.0) + 1.0);
		    denom = PI * denom * denom;
		    
		    return a2 / denom;
		}

		//
		//  Geometry distribution component (G)
		//

		float geometry_schlick_ggx(float NdotV, float roughness) {
		    float r = roughness + 1.0;
		    //  direct light
		    float k = (r*r) / 8.0;
		    //  IBL
		    //  float k = (roughness * roughness) / 2;
		    float denom = NdotV * (1.0 - k) + k;
		    return NdotV / denom;
		}

		float geometry_smith(vec3 N, vec3 V, vec3 L, float roughness) {
		    float NdotV = max(dot(N, V), 0.0);
		    float NdotL = max(dot(N, L), 0.0);
		    float ggx2 = geometry_schlick_ggx(NdotV, roughness);
		    float ggx1 = geometry_schlick_ggx(NdotL, roughness);
		    return ggx1 * ggx2;
		}

		struct PointLight {
			vec3 position;
			vec3 color;
			vec3 mask;
		};

		struct DirectionalLight {
			vec3 direction;
			vec3 color;
			vec3 mask;
		};

		const int n_point_lights = 2;
		const int n_directional_lights = 1;

		uniform PointLight point_lights[n_point_lights];
		uniform DirectionalLight directional_lights[n_directional_lights];

		uniform vec3 cam_position;

		uniform sampler2D albedo;
		uniform float roughness;
		uniform float metallic;

		varying mediump vec3 v_position;
		varying mediump vec2 v_uv;
		varying mediump vec3 v_normal;

		void main() {

			vec3 albedo_v = texture2D(albedo, v_uv).rgb;

			vec3 final_color = albedo_v;

			vec3 Lo = vec3(0.0);

			//	point lights

			for (int i = 0; i < n_point_lights; i++) {
				bool is_directional = false;
				vec3 res = PBR(v_normal, albedo_v, roughness, metallic, 
					cam_position, v_position, point_lights[i].position, point_lights[i].color, is_directional);
				res *= point_lights[i].mask;
				Lo += res;
			}

			//	directional lights

			for (int i = 0; i < n_directional_lights; i++) {
				bool is_directional = true;
				vec3 res = PBR(v_normal, albedo_v, roughness, metallic, 
					cam_position, v_position, directional_lights[i].direction, directional_lights[i].color, is_directional);
				res *= directional_lights[i].mask;
				Lo += res;
			}

			vec3 ambient = vec3(0.03) * albedo_v;

		    final_color = ambient + Lo;
		    final_color = final_color / (final_color + vec3(1.0));
		    final_color = pow(final_color, vec3(1.0/2.2));

      		gl_FragColor = vec4(final_color, 1.0);
    	}
	`;
})(_sources || (_sources = {}));
const PBRTex = {
    sources: [
        {
            source: _sources.vertex,
            type: __WEBPACK_IMPORTED_MODULE_0__shader_shader__["c" /* ShaderTypes */].VERTEX,
            uniforms: ['model', 'view', 'projection']
        },
        {
            source: _sources.fragment,
            type: __WEBPACK_IMPORTED_MODULE_0__shader_shader__["c" /* ShaderTypes */].FRAGMENT,
            uniforms: ['point', 'directional', 'direction', 'position', 'color', 'mask',
                'albedo', 'roughness', 'metallic', 'camera_position']
        }
    ]
};



/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export ShaderFactory */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__shader__ = __webpack_require__(2);

class ShaderFactory {
    static Create(gl, programSource) {
        let shaders = programSource.sources.map((source) => {
            return new __WEBPACK_IMPORTED_MODULE_0__shader__["a" /* Shader */](gl, source);
        });
        let program = new __WEBPACK_IMPORTED_MODULE_0__shader__["b" /* ShaderProgram */](gl);
        try {
            program.attach(shaders);
        }
        catch (err) {
            console.error(err.message);
            return null;
        }
        return program;
    }
}



/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
class LightingModelsMap {
    static getLightingModel(name) {
        return LightingModelsMap.items[name];
    }
}
/* unused harmony export LightingModelsMap */

LightingModelsMap.items = {
    'physical': 'physical'
};
class LightTypesMap {
    static getLightType(name) {
        return LightTypesMap.items[name];
    }
}
/* harmony export (immutable) */ __webpack_exports__["c"] = LightTypesMap;

LightTypesMap.items = {
    'point': 'PointLight',
    'directional': 'DirectionalLight'
};
class GLSLTypeMap {
    static getType(name) {
        return GLSLTypeMap.items[name];
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = GLSLTypeMap;

GLSLTypeMap.items = {
    'int': 'int',
    'float': 'float',
    'vec2': 'vec2',
    'vec3': 'vec3',
    'vec4': 'vec4',
    'mat3': 'mat3',
    'mat4': 'mat4',
    'sampler2D': 'sampler2D',
    'point': 'PointLight',
    'directional': 'DirectionalLight'
};
class GLSLPrecisionMap {
    static getPrecision(name) {
        return GLSLPrecisionMap.items[name];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = GLSLPrecisionMap;

GLSLPrecisionMap.items = {
    'mediump': 'mediump',
    'highp': 'highp'
};


/***/ }),
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = makeVaryingString;
function makeVaryingString(name) {
    return `v_${name}`;
}


/***/ }),
/* 69 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "main", function() { return main; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__primitives__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shader_attributes__ = __webpack_require__(9);


var main;
(function (main) {
    main.assignPosition = () => {
        const model = __WEBPACK_IMPORTED_MODULE_0__primitives__["getBuiltinUniformName"]('model');
        const view = __WEBPACK_IMPORTED_MODULE_0__primitives__["getBuiltinUniformName"]('view');
        const proj = __WEBPACK_IMPORTED_MODULE_0__primitives__["getBuiltinUniformName"]('projection');
        const pos = __WEBPACK_IMPORTED_MODULE_0__primitives__["getAttributeName"]('position');
        return `gl_Position = ${proj} * ${view} * ${model} * vec4(${pos}, 1.0);`;
    };
    main.passUV = () => {
        return __WEBPACK_IMPORTED_MODULE_0__primitives__["makePassedAttribute"](__WEBPACK_IMPORTED_MODULE_1__shader_attributes__["a" /* ShaderAttributeDataType3D */], 'uv');
    };
    main.passPosition = () => {
        return __WEBPACK_IMPORTED_MODULE_0__primitives__["makePassedAttribute"](__WEBPACK_IMPORTED_MODULE_1__shader_attributes__["a" /* ShaderAttributeDataType3D */], 'position');
    };
    main.passWorldPosition = () => {
        let vPos = __WEBPACK_IMPORTED_MODULE_0__primitives__["getVaryingName"]('position');
        let aPos = __WEBPACK_IMPORTED_MODULE_0__primitives__["getAttributeName"]('position');
        let model = __WEBPACK_IMPORTED_MODULE_0__primitives__["getBuiltinUniformName"]('model');
        return `${vPos} = vec3(${model} * vec4(${aPos}, 1.0));`;
    };
    main.passNormal = () => {
        return __WEBPACK_IMPORTED_MODULE_0__primitives__["makePassedAttribute"](__WEBPACK_IMPORTED_MODULE_1__shader_attributes__["a" /* ShaderAttributeDataType3D */], 'normal');
    };
})(main || (main = {}));


/***/ }),
/* 70 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
const MVPMat4 = [
    { name: 'model', kind: 'mat4' },
    { name: 'view', kind: 'mat4' },
    { name: 'projection', kind: 'mat4' }
];
/* harmony export (immutable) */ __webpack_exports__["MVPMat4"] = MVPMat4;



/***/ }),
/* 71 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "body", function() { return body; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "main", function() { return main; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_fragment__ = __webpack_require__(72);

var body;
(function (body) {
    function physical1(nPtLights, nDirLights) {
        return [
            __WEBPACK_IMPORTED_MODULE_0__components_fragment__["b" /* lighting */].PBR,
            () => __WEBPACK_IMPORTED_MODULE_0__components_fragment__["a" /* constants */].defineNDirectionalLights(nDirLights),
            () => __WEBPACK_IMPORTED_MODULE_0__components_fragment__["a" /* constants */].defineNPointLights(nPtLights),
            __WEBPACK_IMPORTED_MODULE_0__components_fragment__["b" /* lighting */].makeDirectionalLightStruct,
            __WEBPACK_IMPORTED_MODULE_0__components_fragment__["b" /* lighting */].makePointLightStruct,
        ];
    }
    body.physical1 = physical1;
})(body || (body = {}));
var main;
(function (main) {
    function physical1(albedo, roughness, metallic) {
        return [
            () => __WEBPACK_IMPORTED_MODULE_0__components_fragment__["c" /* main */].makeAlbedo(albedo),
            () => __WEBPACK_IMPORTED_MODULE_0__components_fragment__["c" /* main */].makeRoughness(roughness),
            () => __WEBPACK_IMPORTED_MODULE_0__components_fragment__["c" /* main */].makeMetallic(metallic),
            __WEBPACK_IMPORTED_MODULE_0__components_fragment__["c" /* main */].makeLo,
            __WEBPACK_IMPORTED_MODULE_0__components_fragment__["c" /* main */].makeAmbient,
            __WEBPACK_IMPORTED_MODULE_0__components_fragment__["c" /* main */].startDirectionalLightLoop,
            __WEBPACK_IMPORTED_MODULE_0__components_fragment__["c" /* main */].makeDirectionalLight,
            __WEBPACK_IMPORTED_MODULE_0__components_fragment__["c" /* main */].accumulateLighting,
            __WEBPACK_IMPORTED_MODULE_0__components_fragment__["c" /* main */].closeBrace,
            __WEBPACK_IMPORTED_MODULE_0__components_fragment__["c" /* main */].startPointLightLoop,
            __WEBPACK_IMPORTED_MODULE_0__components_fragment__["c" /* main */].makePointLight,
            __WEBPACK_IMPORTED_MODULE_0__components_fragment__["c" /* main */].accumulateLighting,
            __WEBPACK_IMPORTED_MODULE_0__components_fragment__["c" /* main */].closeBrace,
            __WEBPACK_IMPORTED_MODULE_0__components_fragment__["c" /* main */].makeFinalColor,
            __WEBPACK_IMPORTED_MODULE_0__components_fragment__["c" /* main */].assignFinalColor
        ];
    }
    main.physical1 = physical1;
    function noLighting(albedo) {
        return [
            () => __WEBPACK_IMPORTED_MODULE_0__components_fragment__["c" /* main */].makeAlbedo(albedo),
            __WEBPACK_IMPORTED_MODULE_0__components_fragment__["c" /* main */].assignAlbedo
        ];
    }
    main.noLighting = noLighting;
})(main || (main = {}));


/***/ }),
/* 72 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return main; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__primitives__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lighting__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__constants__ = __webpack_require__(32);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_1__lighting__; });
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_2__constants__; });



function getAmbientName() { return 'ambient'; }
function getLoName() { return 'Lo'; }
function getIntermediateLightingCalcName() { return 'res'; }
function getFinalColorName() { return 'final_color'; }
var main;
(function (main) {
    function makeAlbedo(albedo, resType = 'vec3') {
        return __WEBPACK_IMPORTED_MODULE_0__primitives__["makeTextureOrTBuiltinUniformToT"](albedo, resType);
    }
    main.makeAlbedo = makeAlbedo;
    function makeRoughness(roughness) {
        return __WEBPACK_IMPORTED_MODULE_0__primitives__["makeTextureOrTBuiltinUniformToT"](roughness, 'float');
    }
    main.makeRoughness = makeRoughness;
    function makeMetallic(metallic) {
        return __WEBPACK_IMPORTED_MODULE_0__primitives__["makeTextureOrTBuiltinUniformToT"](metallic, 'float');
    }
    main.makeMetallic = makeMetallic;
    function makeUniform(un, to) {
        return __WEBPACK_IMPORTED_MODULE_0__primitives__["makeTextureOrTUniformToT"](un, to);
    }
    main.makeUniform = makeUniform;
    function assignWhite() {
        return 'gl_FragColor = vec4(1.0);';
    }
    main.assignWhite = assignWhite;
    function assignAlbedo() {
        let albedoName = __WEBPACK_IMPORTED_MODULE_0__primitives__["makeMainNameFromBuiltinUniform"]('albedo');
        return `gl_FragColor = vec4(${albedoName}, 1.0);`;
    }
    main.assignAlbedo = assignAlbedo;
    function makeAmbient(amt = 0.03, resType = 'vec3') {
        let albedoName = __WEBPACK_IMPORTED_MODULE_0__primitives__["makeMainNameFromBuiltinUniform"]('albedo');
        let ambientName = getAmbientName();
        let amtStr = amt.toFixed(2).toString();
        return `${resType} ${ambientName} = ${resType}(${amtStr}) * ${albedoName};`;
    }
    main.makeAmbient = makeAmbient;
    function makeLo(resType = 'vec3') {
        return `${resType} ${getLoName()} = ${resType}(0.0);`;
    }
    main.makeLo = makeLo;
    function rejectAlphaLessThan(value) {
        let name = getFinalColorName();
        return `if (${name}.a) < ${value}) discard;`;
    }
    main.rejectAlphaLessThan = rejectAlphaLessThan;
    function makePointLight(resType = 'vec3') {
        const norm = __WEBPACK_IMPORTED_MODULE_0__primitives__["getVaryingName"]('normal');
        const pos = __WEBPACK_IMPORTED_MODULE_0__primitives__["getVaryingName"]('position');
        const albedo = __WEBPACK_IMPORTED_MODULE_0__primitives__["makeMainNameFromBuiltinUniform"]('albedo');
        const roughness = __WEBPACK_IMPORTED_MODULE_0__primitives__["makeMainNameFromBuiltinUniform"]('roughness');
        const metallic = __WEBPACK_IMPORTED_MODULE_0__primitives__["makeMainNameFromBuiltinUniform"]('metallic');
        const camPos = __WEBPACK_IMPORTED_MODULE_0__primitives__["getBuiltinUniformName"]('camera_position');
        const ptLight = __WEBPACK_IMPORTED_MODULE_0__primitives__["getBuiltinUniformName"]('point');
        const lightPos = __WEBPACK_IMPORTED_MODULE_0__primitives__["getBuiltinUniformName"]('position');
        const lightCol = __WEBPACK_IMPORTED_MODULE_0__primitives__["getBuiltinUniformName"]('color');
        const lightMask = __WEBPACK_IMPORTED_MODULE_0__primitives__["getBuiltinUniformName"]('mask');
        const loName = getLoName();
        const resName = getIntermediateLightingCalcName();
        const res = `
			bool is_directional = false;
			${resType} ${resName} = PBR(${norm}, ${albedo}, ${roughness}, ${metallic}, 
				${camPos}, ${pos}, ${ptLight}[i].${lightPos}, 
				${ptLight}[i].${lightCol}, is_directional);
				${resName} *= ${ptLight}[i].${lightMask};`;
        return res;
    }
    main.makePointLight = makePointLight;
    function startPointLightLoop() {
        const nPtLights = __WEBPACK_IMPORTED_MODULE_1__lighting__["getNPointLightsName"]();
        return `for (int i = 0; i < ${nPtLights}; i++) {`;
    }
    main.startPointLightLoop = startPointLightLoop;
    function startDirectionalLightLoop() {
        const nDirLights = __WEBPACK_IMPORTED_MODULE_1__lighting__["getNDirectionalLightsName"]();
        return `for (int i = 0; i < ${nDirLights}; i++) {`;
    }
    main.startDirectionalLightLoop = startDirectionalLightLoop;
    function closeBrace() {
        return '}';
    }
    main.closeBrace = closeBrace;
    function accumulateLighting() {
        return `${getLoName()} += ${getIntermediateLightingCalcName()};`;
    }
    main.accumulateLighting = accumulateLighting;
    function makeDirectionalLight(resType = 'vec3') {
        const norm = __WEBPACK_IMPORTED_MODULE_0__primitives__["getVaryingName"]('normal');
        const pos = __WEBPACK_IMPORTED_MODULE_0__primitives__["getVaryingName"]('position');
        const albedo = __WEBPACK_IMPORTED_MODULE_0__primitives__["makeMainNameFromBuiltinUniform"]('albedo');
        const roughness = __WEBPACK_IMPORTED_MODULE_0__primitives__["makeMainNameFromBuiltinUniform"]('roughness');
        const metallic = __WEBPACK_IMPORTED_MODULE_0__primitives__["makeMainNameFromBuiltinUniform"]('metallic');
        const camPos = __WEBPACK_IMPORTED_MODULE_0__primitives__["getBuiltinUniformName"]('camera_position');
        const dirLight = __WEBPACK_IMPORTED_MODULE_0__primitives__["getBuiltinUniformName"]('directional');
        const lightDir = __WEBPACK_IMPORTED_MODULE_0__primitives__["getBuiltinUniformName"]('direction');
        const lightCol = __WEBPACK_IMPORTED_MODULE_0__primitives__["getBuiltinUniformName"]('color');
        const lightMask = __WEBPACK_IMPORTED_MODULE_0__primitives__["getBuiltinUniformName"]('mask');
        const loName = getLoName();
        const resName = getIntermediateLightingCalcName();
        const res = `
			bool is_directional = true;
			${resType} ${resName} = PBR(${norm}, ${albedo}, ${roughness}, ${metallic}, 
				${camPos}, ${pos}, ${dirLight}[i].${lightDir}, 
				${dirLight}[i].${lightCol}, is_directional);
				${resName} *= ${dirLight}[i].${lightMask};`;
        return res;
    }
    main.makeDirectionalLight = makeDirectionalLight;
    function makeFinalColor(resType = 'vec3') {
        const finalColor = getFinalColorName();
        const ambientName = getAmbientName();
        const loName = getLoName();
        return `
			${resType} ${finalColor} = ${ambientName} + ${loName};
			${finalColor} = ${finalColor} / (${finalColor} + ${resType}(1.0));
			${finalColor} = pow(${finalColor}, ${resType}(1.0/2.2));`;
    }
    main.makeFinalColor = makeFinalColor;
    function assignFinalColor() {
        return `gl_FragColor = vec4(${getFinalColorName()}, 1.0);`;
    }
    main.assignFinalColor = assignFinalColor;
    function assignAmbient() {
        return `gl_FragColor = ${getAmbientName()};`;
    }
    main.assignAmbient = assignAmbient;
})(main || (main = {}));



/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = fromModel;
/* harmony export (immutable) */ __webpack_exports__["c"] = getSource;
/* harmony export (immutable) */ __webpack_exports__["b"] = fromSource;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__shader_shader__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__primitives__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__vertex__ = __webpack_require__(29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__fragment__ = __webpack_require__(30);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__shader_constants__ = __webpack_require__(74);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_util__ = __webpack_require__(0);






const shaders = {};
function fromModel(model) {
    const sources = getSource(model);
    return fromSource(model.gl, sources.vertex, sources.fragment);
}
function getSource(model) {
    let attributes = ['position'];
    let varying = [];
    let fragUniforms = [];
    const vertexUniforms = __WEBPACK_IMPORTED_MODULE_2__vertex__["library"].MVPMat4;
    const nPointLights = __WEBPACK_IMPORTED_MODULE_4__shader_constants__["b" /* N_POINT_LIGHTS */];
    const nDirLights = __WEBPACK_IMPORTED_MODULE_4__shader_constants__["a" /* N_DIRECTIONAL_LIGHTS */];
    let vertBody = [];
    let vertMain = [];
    let fragBody = [];
    let fragMain = [];
    //
    //	vertex
    //
    if (model.receivesLight) {
        vertMain.push(__WEBPACK_IMPORTED_MODULE_2__vertex__["components"].main.passWorldPosition);
        vertMain.push(__WEBPACK_IMPORTED_MODULE_2__vertex__["components"].main.passNormal);
        attributes.push('normal');
        varying.push('normal');
        varying.push('position');
    }
    if (model.material.hasTexture()) {
        vertMain.push(__WEBPACK_IMPORTED_MODULE_2__vertex__["components"].main.passUV);
        attributes.push('uv');
        varying.push('uv');
    }
    vertMain.push(__WEBPACK_IMPORTED_MODULE_2__vertex__["components"].main.assignPosition);
    //	
    //	fragment
    //
    let lightingModel = model.material.getLightingModel();
    if (lightingModel !== 'physical')
        throw new Error(`Lighting model ${lightingModel} is not yet supported.`);
    const albedoAtt = model.material.getAttribute('albedo');
    let albedoUniform = {
        name: 'albedo',
        kind: albedoAtt.getGLSLType()
    };
    fragUniforms.push(albedoUniform);
    let lightBody = [];
    let lightMain = [];
    const hasRoughness = model.material.hasAttribute('roughness');
    const hasMetallic = model.material.hasAttribute('metallic');
    if (model.receivesLight && hasRoughness && hasMetallic) {
        const roughnessAtt = model.material.getAttribute('roughness');
        const metallicAtt = model.material.getAttribute('metallic');
        const roughness = {
            name: 'roughness',
            kind: roughnessAtt.getGLSLType()
        };
        const metallic = {
            name: 'metallic',
            kind: metallicAtt.getGLSLType()
        };
        fragUniforms.push({ name: 'camera_position', kind: 'vec3' });
        fragUniforms.push({ name: 'directional', kind: 'directional', isArray: true, length: nDirLights });
        fragUniforms.push({ name: 'point', kind: 'point', isArray: true, length: nPointLights });
        fragUniforms.push(roughness);
        fragUniforms.push(metallic);
        lightBody = __WEBPACK_IMPORTED_MODULE_3__fragment__["library"].body.physical1(nPointLights, nDirLights);
        lightMain = __WEBPACK_IMPORTED_MODULE_3__fragment__["library"].main.physical1(albedoUniform, roughness, metallic);
    }
    else {
        lightMain = __WEBPACK_IMPORTED_MODULE_3__fragment__["library"].main.noLighting(albedoUniform);
    }
    lightBody.map(body => fragBody.push(body));
    lightMain.map(main => fragMain.push(main));
    let vertexSource = {
        attributes: attributes,
        varyings: varying,
        uniforms: vertexUniforms,
        userUniforms: [],
        attributeMapFunc: __WEBPACK_IMPORTED_MODULE_1__primitives__["defaultAttributeMapFunc"],
        body: [],
        main: vertMain
    };
    let fragSource = {
        varyings: varying,
        uniforms: fragUniforms,
        userUniforms: [],
        precision: 'mediump',
        body: fragBody,
        main: fragMain
    };
    return {
        vertex: vertexSource,
        fragment: fragSource
    };
}
function fromSource(gl, vert, frag) {
    const vertShaderSource = {
        source: __WEBPACK_IMPORTED_MODULE_2__vertex__["make"](vert),
        type: __WEBPACK_IMPORTED_MODULE_0__shader_shader__["c" /* ShaderTypes */].VERTEX,
        uniforms: __WEBPACK_IMPORTED_MODULE_1__primitives__["getUniformNamesFromUniformArrayT"](vert.uniforms)
    };
    const fragShaderSource = {
        source: __WEBPACK_IMPORTED_MODULE_3__fragment__["make"](frag),
        type: __WEBPACK_IMPORTED_MODULE_0__shader_shader__["c" /* ShaderTypes */].FRAGMENT,
        uniforms: __WEBPACK_IMPORTED_MODULE_1__primitives__["getUniformNamesFromUniformArrayT"](frag.uniforms)
    };
    const hashKey = __WEBPACK_IMPORTED_MODULE_5__util_util__["d" /* common */].unsafeHash(vertShaderSource.source + fragShaderSource.source);
    let cachedShader = shaders[hashKey];
    if (cachedShader !== undefined) {
        console.log('Using cached shader ...');
        return cachedShader;
    }
    const vertShader = new __WEBPACK_IMPORTED_MODULE_0__shader_shader__["a" /* Shader */](gl, vertShaderSource);
    const fragShader = new __WEBPACK_IMPORTED_MODULE_0__shader_shader__["a" /* Shader */](gl, fragShaderSource);
    const prog = new __WEBPACK_IMPORTED_MODULE_0__shader_shader__["b" /* ShaderProgram */](gl);
    prog.attach([vertShader, fragShader]);
    shaders[hashKey] = prog;
    return prog;
}


/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
const N_POINT_LIGHTS = 2;
/* harmony export (immutable) */ __webpack_exports__["b"] = N_POINT_LIGHTS;

const N_DIRECTIONAL_LIGHTS = 1;
/* harmony export (immutable) */ __webpack_exports__["a"] = N_DIRECTIONAL_LIGHTS;



/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Camera; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_gl_matrix__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math_wgl_math__ = __webpack_require__(3);



class Camera {
    constructor() {
        this.yaw = -90.0;
        this.pitch = 0.0;
        this.movementSpeed = 2.5;
        this.rotationSensitivity = 0.1;
        this.target = null;
        this.position = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].fromValues(0, 0, 0);
        this.up = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].fromValues(0, 1, 0);
        this.worldUp = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].fromValues(0, 1, 0);
        this.right = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].create();
        this.front = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].fromValues(0, 0, -1);
        this.updateCameraVectors();
    }
    getViewMatrix() {
        let hasTarget = this.target !== null;
        let target = hasTarget ? this.target : __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].create();
        let view = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].create();
        let position = this.position;
        let front = this.front;
        let up = this.up;
        if (!hasTarget)
            __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].add(target, position, front);
        __WEBPACK_IMPORTED_MODULE_2__math_wgl_math__["e" /* lookAt */](view, position, target, up);
        return view;
    }
    lookAt(where) {
        if (where === null) {
            this.target = null;
            return;
        }
        this.target = __WEBPACK_IMPORTED_MODULE_1__util_util__["i" /* vector */].requireVec3(where);
    }
    setPosition(position) {
        this.position = __WEBPACK_IMPORTED_MODULE_1__util_util__["i" /* vector */].requireVec3(position);
    }
    setPitch(pitch) {
        this.pitch = this.constrainPitch(pitch);
        this.updateCameraVectors();
    }
    setYaw(yaw) {
        this.yaw = yaw;
        this.updateCameraVectors();
    }
    move(direction, dt, speed) {
        if (!speed)
            speed = this.movementSpeed;
        let vel = speed * dt;
        let velocity = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].fromValues(vel, vel, vel);
        let front_ = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].create();
        let right_ = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].create();
        let front = this.front;
        let right = this.right;
        let position = this.position;
        __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].copy(front_, front);
        __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].copy(right_, right);
        if (direction === 'forwards') {
            __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].add(position, position, __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].multiply(front_, front_, velocity));
        }
        else if (direction === 'backwards') {
            __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].sub(position, position, __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].multiply(front_, front_, velocity));
        }
        else if (direction === 'left') {
            __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].sub(position, position, __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].multiply(right_, right_, velocity));
        }
        else if (direction === 'right') {
            __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].add(position, position, __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].multiply(right_, right_, velocity));
        }
    }
    rotate(x, y, sensitivity) {
        if (!sensitivity)
            sensitivity = this.rotationSensitivity;
        this.yaw += (x * sensitivity);
        this.pitch += (y * sensitivity);
        this.pitch = this.constrainPitch(this.pitch);
        this.updateCameraVectors();
    }
    constrainPitch(pitch) {
        if (pitch > 89.0)
            pitch = 89.0;
        if (pitch < -89.0)
            pitch = -89.0;
        return pitch;
    }
    updateCameraVectors() {
        let front_ = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].create();
        let right = this.right;
        let front = this.front;
        let up = this.up;
        let worldUp = this.worldUp;
        let pitch = this.pitch;
        let yaw = this.yaw;
        front_[0] = Math.cos(__WEBPACK_IMPORTED_MODULE_0_gl_matrix__["a" /* glMatrix */].toRadian(yaw)) * Math.cos(__WEBPACK_IMPORTED_MODULE_0_gl_matrix__["a" /* glMatrix */].toRadian(pitch));
        front_[1] = Math.sin(__WEBPACK_IMPORTED_MODULE_0_gl_matrix__["a" /* glMatrix */].toRadian(pitch));
        front_[2] = Math.sin(__WEBPACK_IMPORTED_MODULE_0_gl_matrix__["a" /* glMatrix */].toRadian(yaw));
        __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].copy(front, front_);
        __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].cross(right, front, worldUp);
        __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].normalize(right, right);
        __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].cross(up, right, front);
        __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].normalize(up, up);
    }
}



/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Scene; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__model_model__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__light_light__ = __webpack_require__(26);


class Scene {
    constructor(gl) {
        this.models = [];
        this.lights = [];
        this.modelsSorted = false;
        this.gl = gl;
        this.background = null;
    }
    sortModels(comparator) {
        this.models.sort(comparator);
        this.modelsSorted = true;
    }
    add(element) {
        if (Array.isArray(element)) {
            if (element.length === 0)
                return;
            const self = this;
            element.map(el => self.addOne(el));
        }
        else {
            this.addOne(element);
        }
    }
    addOne(element) {
        if (element instanceof __WEBPACK_IMPORTED_MODULE_0__model_model__["a" /* Model */]) {
            this.addModel(element);
        }
        else if (element instanceof __WEBPACK_IMPORTED_MODULE_1__light_light__["Light"]) {
            this.addLight(element);
        }
    }
    addLight(light) {
        this.lights.push(light);
    }
    addModel(model) {
        this.models.push(model);
        this.modelsSorted = false;
    }
}



/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export FrameStats */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_util__ = __webpack_require__(0);

class FrameStats {
    constructor() {
        this.min = Infinity;
        this.max = -Infinity;
        this.mean = 0;
        this.iterations = 0;
        this.current = NaN;
        this.places = 2;
        this.visible = true;
        this.timer = new __WEBPACK_IMPORTED_MODULE_0__util_util__["g" /* time */].DeltaTimer();
        this.timer.setRatio(__WEBPACK_IMPORTED_MODULE_0__util_util__["g" /* time */].ratios.s());
        this.setupElement();
    }
    setupElement() {
        const el = document.createElement('div');
        const self = this;
        el.style.position = 'fixed';
        el.style.left = '0px';
        el.style.top = '0px';
        el.style.backgroundColor = 'black';
        el.style.opacity = '0.5';
        el.style.color = 'white';
        el.onclick = (evt) => {
            el.style.opacity = self.visible ? '0' : '0.5';
            self.visible = !self.visible;
        };
        document.body.appendChild(el);
        this.el = el;
    }
    update() {
        let wasFirst = this.timer.firstUpdate();
        this.timer.update();
        if (wasFirst)
            return;
        let dt = this.timer.delta();
        if (dt < this.min)
            this.min = dt;
        if (dt > this.max)
            this.max = dt;
        this.current = dt;
        this.mean = ((this.mean * this.iterations) + dt) / (this.iterations + 1);
        this.iterations++;
        this.el.innerHTML = this.getString();
    }
    getString() {
        const places = this.places;
        const self = this;
        const current = this.getTimeFPSString('current', this.current);
        const min = this.getTimeFPSString('min', this.min);
        const max = this.getTimeFPSString('max', this.max);
        const mean = this.getTimeFPSString('mean', this.mean);
        return current + min + max + mean;
    }
    getTimeFPSString(kind, val) {
        let timeUnits = this.timer.getRatio().alias;
        const ms = `${kind}: ${(val).toFixed(this.places)} ${timeUnits}, `;
        const fps = `${(1 / val).toFixed(this.places)} FPS<br>`;
        return ms + fps;
    }
}



/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__functional_renderer__ = __webpack_require__(79);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "functional", function() { return __WEBPACK_IMPORTED_MODULE_0__functional_renderer__["a"]; });




/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__base_renderer__ = __webpack_require__(80);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__shader_shader__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mesh_mesh__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__shader_uniforms__ = __webpack_require__(28);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__model_model__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__material_material__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__fbo_fbo__ = __webpack_require__(33);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__util_util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__shader_builder_shader_builder_index__ = __webpack_require__(27);









/* harmony default export */ __webpack_exports__["a"] = (class extends __WEBPACK_IMPORTED_MODULE_0__base_renderer__["a" /* default */] {
    constructor(gl) {
        super(gl);
        this.lastMesh = null;
        this.lastProgram = null;
        this.lastMaterial = null;
        this.lastFBO = null;
        this.lightIds = {};
        this.textureIds = {};
    }
    reset() {
        this.lastMesh = null;
        this.lastProgram = null;
        this.lastMaterial = null;
        this.clearLightIds();
        this.clearTextureIds();
    }
    render(scene, camera) {
        this.clear();
        if (scene.models.length === 0)
            return;
        if (!scene.modelsSorted)
            scene.sortModels(__WEBPACK_IMPORTED_MODULE_4__model_model__["a" /* Model */].compareMeshUUID);
        const self = this;
        scene.models.map(model => self.requireProgram(model));
        this.clearLightIds();
        for (let model of scene.models) {
            this.drawModel(scene, camera, model);
        }
        this.drawBackground(scene, camera);
    }
    drawBackground(scene, camera) {
        if (!scene.background)
            return;
        const gl = this.gl;
        gl.depthFunc(gl.LEQUAL);
        this.drawModel(scene, camera, scene.background);
        gl.depthFunc(gl.LESS);
    }
    drawModel(scene, camera, model) {
        if (!model.visible)
            return;
        model.onBeforeRender();
        this.clearTextureIds();
        const prog = model.program;
        const material = model.material;
        const mesh = model.mesh;
        let forceUpdate = false;
        if (this.conditionalBindProgram(prog)) {
            forceUpdate = true;
            this.configureCamera(prog, camera);
            this.configureLights(prog, scene.lights, forceUpdate);
        }
        this.configureTransform(prog, model.getWorldMatrix());
        this.configureMaterial(prog, material, forceUpdate);
        this.draw(prog, mesh, forceUpdate);
        model.onAfterRender();
    }
    draw(prog, mesh, force = false) {
        this.conditionalBindProgram(prog);
        this.conditionalBindMesh(prog, mesh, force);
        mesh.draw();
    }
    configureTransform(prog, transformMatrix) {
        this.conditionalBindProgram(prog);
        this.conditionalSetUniform(prog, 'model', transformMatrix);
    }
    configureCamera(prog, camera) {
        this.conditionalBindProgram(prog);
        this.conditionalSetUniform(prog, 'projection', this.projection);
        this.conditionalSetUniform(prog, 'view', camera.getViewMatrix());
        this.conditionalSetUniform(prog, 'camera_position', camera.position);
    }
    configureMaterial(prog, material, force = false) {
        let isNewProg = this.conditionalBindProgram(prog);
        let isNewMat = this.checkNewMaterial(material);
        let attrs = material.enumerateAttributes();
        for (let attr of attrs) {
            if (isNewMat || isNewProg || force || attr.isDirty) {
                this.conditionalSetUniform(prog, attr.name, attr.getValue());
            }
            if (__WEBPACK_IMPORTED_MODULE_7__util_util__["h" /* types */].isTexture(attr.peekValue())) {
                this.configureTexture(prog, attr.getValue());
            }
        }
    }
    configureTexture(prog, tex) {
        this.conditionalBindProgram(prog);
        const index = this.getTextureIndex(prog, tex);
        const gl = this.gl;
        tex.index = index;
        gl.activeTexture(gl.TEXTURE0 + index);
        tex.bind();
    }
    configureLight(prog, light, force = false) {
        let isNewProg = this.conditionalBindProgram(prog);
        if (!light.active)
            return;
        let index = this.getLightIndex(prog, light);
        let attrs = light.enumerateAttributes();
        for (let attr of attrs) {
            if (isNewProg || force || attr.isDirty) {
                let un = __WEBPACK_IMPORTED_MODULE_3__shader_uniforms__["a" /* Map */].getUniform(attr.name);
                let mappedName = __WEBPACK_IMPORTED_MODULE_3__shader_uniforms__["b" /* requireUniformName */](light.getName());
                let unf = `${mappedName}[${index}].${un}`;
                if (prog.hasUniform(unf)) {
                    prog.setUniform(unf, attr.getValue());
                }
            }
        }
    }
    configureLights(prog, lights, force = false) {
        for (let light of lights) {
            this.configureLight(prog, light, force);
        }
    }
    checkNewMaterial(material) {
        let isNullLastMaterial = this.lastMaterial === null;
        let isNewMaterial = isNullLastMaterial ||
            !__WEBPACK_IMPORTED_MODULE_5__material_material__["Material"].equals(material, this.lastMaterial);
        this.lastMaterial = material;
        return isNewMaterial;
    }
    clearLightIds() {
        this.lightIds = {};
    }
    clearTextureIds() {
        this.textureIds = {};
    }
    getLightIndex(prog, light) {
        let ids = this.lightIds[prog.uuid];
        let lightName = light.getName();
        if (ids === undefined) {
            this.lightIds[prog.uuid] = {};
            this.lightIds[prog.uuid][lightName] = [light.uuid];
            return 0;
        }
        let idsThisLightKind = this.lightIds[prog.uuid][lightName];
        if (idsThisLightKind === undefined) {
            this.lightIds[prog.uuid][lightName] = [light.uuid];
            return 0;
        }
        for (let i = 0; i < idsThisLightKind.length; i++) {
            if (idsThisLightKind[i] === light.uuid)
                return i;
        }
        idsThisLightKind.push(light.uuid);
        return idsThisLightKind.length - 1;
    }
    getTextureIndex(prog, tex) {
        let ids = this.textureIds[prog.uuid];
        if (ids === undefined) {
            this.textureIds[prog.uuid] = [tex.uuid];
            return 0;
        }
        for (let i = 0; i < ids.length; i++) {
            if (ids[i] === tex.uuid)
                return i;
        }
        ids.push(tex.uuid);
        return ids.length - 1;
    }
    requireProgram(model) {
        if (model.program === null) {
            model.program = Object(__WEBPACK_IMPORTED_MODULE_8__shader_builder_shader_builder_index__["fromModel"])(model);
        }
    }
    conditionalBindMesh(prog, mesh, force = false) {
        let isNullLastMesh = this.lastMesh === null;
        let isNewBoundProg = !mesh.isBoundTo(prog);
        let isNewMesh = force || isNullLastMesh || !__WEBPACK_IMPORTED_MODULE_2__mesh_mesh__["a" /* Mesh */].equals(mesh, this.lastMesh) || isNewBoundProg;
        if (isNewMesh) {
            if (!isNullLastMesh && this.lastMesh.isBound())
                this.lastMesh.unbind();
            if (!mesh.isBound() || isNewBoundProg)
                mesh.bind(prog);
        }
        this.lastMesh = mesh;
        return isNewMesh;
    }
    conditionalBindProgram(prog, force = false) {
        const isNullProg = prog === null;
        let isNullLastProgram = this.lastProgram === null;
        let isNewProgram = force || isNullLastProgram || !__WEBPACK_IMPORTED_MODULE_1__shader_shader__["b" /* ShaderProgram */].equals(prog, this.lastProgram);
        if (isNewProgram) {
            if (!isNullLastProgram && this.lastProgram.isBound())
                this.lastProgram.unbind();
            if (!isNullProg && !prog.isBound())
                prog.bind();
        }
        this.lastProgram = prog;
        return isNewProgram;
    }
    conditionalBindFBO(fbo, force = false) {
        let isNullLastFBO = this.lastFBO === null;
        let isNewFBO = force || isNullLastFBO || !__WEBPACK_IMPORTED_MODULE_6__fbo_fbo__["a" /* FBO */].equals(fbo, this.lastFBO);
        if (isNewFBO) {
            if (!isNullLastFBO && this.lastFBO.isBound())
                this.lastFBO.unbind();
            if (fbo !== null && !fbo.isBound())
                fbo.bind();
        }
        this.lastFBO = fbo;
        return isNewFBO;
    }
    conditionalSetUniform(prog, name, value) {
        let name_ = __WEBPACK_IMPORTED_MODULE_3__shader_uniforms__["c" /* requireUniformString */](name);
        if (prog.hasUniform(name_)) {
            prog.setUniform(name_, value);
        }
    }
});


/***/ }),
/* 80 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_gl_matrix__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_vector_util__ = __webpack_require__(21);


/* harmony default export */ __webpack_exports__["a"] = (class {
    constructor(gl) {
        this.fov = 45.0;
        this.near = 0.1;
        this.far = 1000.0;
        this.aspect = 1.0;
        this.gl = gl;
        this.projection = this.getProjectionMatrix();
        this.clearColor = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["f" /* vec3 */].fromValues(0.2, 0.2, 0.2);
        this.setup();
    }
    setup() {
        const gl = this.gl;
        gl.enable(gl.DEPTH_TEST);
        this.clearBits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;
    }
    setClearBits(bits) {
        this.clearBits = bits;
    }
    setNearFar(near, far) {
        this.near = near;
        this.far = far;
        this.projection = this.getProjectionMatrix();
    }
    setClearColor(color) {
        this.clearColor = __WEBPACK_IMPORTED_MODULE_1__util_vector_util__["requireVec3"](color);
    }
    clear() {
        const gl = this.gl;
        const cc = this.clearColor;
        const cb = this.clearBits;
        gl.clearColor(cc[0], cc[1], cc[2], 1.0);
        if (cb !== null)
            gl.clear(cb);
    }
    setAspect(ar) {
        this.aspect = ar;
        this.projection = this.getProjectionMatrix();
    }
    getProjectionMatrix() {
        let projection = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].create();
        return __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].perspective(projection, this.fov, this.aspect, this.near, this.far);
    }
});


/***/ }),
/* 81 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Canvas; });
class Canvas {
    constructor(opts = Canvas.Defaults()) {
        if (!opts.width)
            opts.width = window.innerWidth;
        if (!opts.height)
            opts.height = window.innerHeight;
        this.width = opts.width;
        this.height = opts.height;
        this.aspect = this.width / this.height;
        this.dpr = window.devicePixelRatio || 1;
        this.createCanvas();
        this.resize();
    }
    createCanvas() {
        this.element = document.createElement('canvas');
        document.body.appendChild(this.element);
    }
    resize() {
        const el = this.element;
        el.style.width = this.width + 'px';
        el.style.height = this.height + 'px';
        el.width = this.width * this.dpr;
        el.height = this.height * this.dpr;
    }
    static Defaults() {
        return {
            width: null,
            height: null
        };
    }
}



/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__obj_loader__ = __webpack_require__(83);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__texture_loader__ = __webpack_require__(84);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__image_loader__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__text_loader__ = __webpack_require__(34);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "image", function() { return __WEBPACK_IMPORTED_MODULE_2__image_loader__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "OBJ", function() { return __WEBPACK_IMPORTED_MODULE_0__obj_loader__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "TEX", function() { return __WEBPACK_IMPORTED_MODULE_1__texture_loader__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "text", function() { return __WEBPACK_IMPORTED_MODULE_3__text_loader__["a"]; });







/***/ }),
/* 83 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return OBJ; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__text_loader__ = __webpack_require__(34);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__parsers_obj__ = __webpack_require__(35);
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


var OBJ;
(function (OBJ) {
    function loadMesh(gl, url) {
        return __awaiter(this, void 0, void 0, function* () {
            return __WEBPACK_IMPORTED_MODULE_0__text_loader__["a" /* text */].load(url).then((data) => {
                return Object(__WEBPACK_IMPORTED_MODULE_1__parsers_obj__["a" /* obj */])(gl, data);
            });
        });
    }
    OBJ.loadMesh = loadMesh;
})(OBJ || (OBJ = {}));


/***/ }),
/* 84 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TEX; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__texture_texture__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__image_loader__ = __webpack_require__(36);
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


var TEX;
(function (TEX) {
    function load2D(gl, url, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            return __WEBPACK_IMPORTED_MODULE_1__image_loader__["a" /* image */].load(url).then(data => parse2D(gl, data, opts));
        });
    }
    TEX.load2D = load2D;
    function parse2D(gl, data, opts) {
        return __WEBPACK_IMPORTED_MODULE_0__texture_texture__["a" /* Tex2D */](gl, data, opts);
    }
})(TEX || (TEX = {}));


/***/ }),
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__obj__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__collada__ = __webpack_require__(86);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "collada", function() { return __WEBPACK_IMPORTED_MODULE_1__collada__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "obj", function() { return __WEBPACK_IMPORTED_MODULE_0__obj__["a"]; });





/***/ }),
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = collada;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__mesh_mesh__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mesh_vertex__ = __webpack_require__(8);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_assert_util__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_matrix__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__animation_skeleton__ = __webpack_require__(87);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__animation_animator__ = __webpack_require__(88);






function collada(gl, data) {
    const dom = new DOMParser();
    const xml = dom.parseFromString(data, 'text/xml');
    checkParseError(xml);
    const geometries = xml.getElementsByTagName('library_geometries');
    assertNElements(geometries, 1, 'library_geometries');
    const geometry = geometries[0];
    const meshes = geometry.getElementsByTagName('mesh');
    const verts = [];
    const indices = [];
    if (meshes.length !== 1)
        throw new Error('Multi-meshes not yet supported.');
    const animation = parseOneMesh(xml, meshes[0], verts, indices);
    const mesh = new __WEBPACK_IMPORTED_MODULE_0__mesh_mesh__["a" /* Mesh */](gl);
    for (let vert of verts) {
        mesh.addVertex(vert);
    }
    mesh.setTopology(__WEBPACK_IMPORTED_MODULE_1__mesh_vertex__["a" /* Topologies */].TRIANGLES);
    if (indices.length > 0) {
        mesh.setIndices(Uint16Array.from(indices));
    }
    mesh.finalize();
    return {
        mesh,
        skeleton: animation.skeleton,
        animation: animation.animation
    };
}
function parseOneMesh(xml, meshElement, allVerts, allVertIndices) {
    const _vertexInfo = meshElement.getElementsByTagName('polylist');
    assertNElements(_vertexInfo, 1, 'polylist');
    const vertexInfo = _vertexInfo[0];
    const sources = vertexInfo.getElementsByTagName('input');
    const _vCount = vertexInfo.getElementsByTagName('vcount');
    const _vIndices = vertexInfo.getElementsByTagName('p');
    assertNElements(_vCount, 1, 'vcount');
    assertNElements(_vIndices, 1, 'p');
    const vCount = _vCount[0].innerHTML
        .split(' ')
        .map(ind => parseInt(ind))
        .filter(v => !isNaN(v));
    const vIndices = _vIndices[0].innerHTML
        .split(' ')
        .map(ind => parseInt(ind))
        .filter(v => !isNaN(v));
    const stride = sources.length;
    const packedData = {};
    for (let i = 0; i < sources.length; i++) {
        const source = sources[i];
        let id = source.getAttribute('source');
        let el = xml.querySelector(id);
        let arr = el.getElementsByTagName('float_array');
        let meta = el.getElementsByTagName('technique_common');
        let semantic = source.getAttribute('semantic');
        if (arr.length === 0) {
            const alias = el.getElementsByTagName('input');
            assertNElements(alias, 1, 'input');
            id = alias[0].getAttribute('source');
            if (id === '')
                throw new Error('Invalid position data.');
            let src = xml.querySelector(id);
            arr = src.getElementsByTagName('float_array');
            meta = src.getElementsByTagName('technique_common');
        }
        assertNElements(arr, 1, 'float_array');
        assertNElements(meta, 1, 'meta');
        const accessor = meta[0].getElementsByTagName('accessor');
        assertNElements(accessor, 1, 'accessor');
        const stride = parseInt(accessor[0].getAttribute('stride'));
        const offset = parseInt(source.getAttribute('offset'));
        __WEBPACK_IMPORTED_MODULE_2__util_assert_util__["assertNotNaN"](stride, `stride for ${semantic}`);
        __WEBPACK_IMPORTED_MODULE_2__util_assert_util__["assertNotNaN"](offset, `offset for ${semantic}`);
        const dat = arr[0].innerHTML.split(' ')
            .map(val => parseFloat(val))
            .filter(val => !isNaN(val));
        packedData[semantic] = {
            data: dat,
            stride: stride,
            offset: offset
        };
    }
    //
    //  skeleton
    //
    const animationData = parseSkeleton(xml);
    const hasAnimationData = animationData.vertexData.length !== 0;
    // debugger
    //
    //  vertex data
    //
    const vertices = [];
    const aliases = Object.keys(packedData);
    const hashIndices = {};
    const posAlias = 'VERTEX';
    const positionIndex = aliases.indexOf(posAlias);
    if (positionIndex === -1)
        throw new Error(`Mesh must have "${posAlias}" attribute.`);
    let vertexIndex = 0;
    // debugger
    for (let i = 0; i < vIndices.length; i += stride) {
        const inds = [];
        for (let j = 0; j < stride; j++) {
            let alias = aliases[j];
            const offset = packedData[alias].offset;
            const indexIntoVIndices = i + offset;
            const indexIntoData = vIndices[indexIntoVIndices];
            inds.push(indexIntoData);
        }
        const hash = inds.join(',');
        const hashedIndex = hashIndices[hash];
        if (hashedIndex !== undefined) {
            allVertIndices.push(hashedIndex);
            continue;
        }
        allVertIndices.push(vertexIndex);
        hashIndices[hash] = vertexIndex;
        vertexIndex++;
        const vert = new __WEBPACK_IMPORTED_MODULE_1__mesh_vertex__["b" /* Vertex */]();
        for (let j = 0; j < stride; j++) {
            let alias = aliases[j];
            const offset = packedData[alias].offset;
            const _stride = packedData[alias].stride;
            const data = packedData[alias].data;
            const indexIntoVIndices = i + offset;
            const indexIntoData = vIndices[indexIntoVIndices] * _stride;
            const vertData = new Float32Array(_stride);
            for (let k = 0; k < _stride; k++) {
                const dat = data[indexIntoData + k];
                if (isNaN(dat) || dat === undefined || dat === null)
                    throw new Error('Bad vertex data.');
                vertData[k] = dat;
            }
            // //
            // //  correction
            // //
            // if (alias === 'VERTEX') {
            //     let _vertData = vec4.create()
            //     for (let k = 0; k < 3; k++) _vertData[k] = vertData[k]
            //     _vertData[3] = 1
            //     const trans = new matrix.transform().rotate(math.radians(-90), [1, 0, 0]).mat()
            //     _vertData = vec4.transformMat4(_vertData, _vertData, trans)
            //     for (let k = 0; k < 3; k++) vertData[k] = _vertData[k]
            // }
            //
            //
            //
            if (alias === 'VERTEX')
                vert.setPosition(vertData);
            else if (alias === 'NORMAL')
                vert.setNormal(vertData);
            else if (alias === 'TEXCOORD')
                vert.setUV(vertData);
            else if (alias === 'COLOR')
                continue;
            else
                throw new Error(`Unrecognized alias "${alias}".`);
        }
        if (hasAnimationData) {
            const posOffset = packedData[posAlias].offset;
            const posIdx = vIndices[i + posOffset];
            if (posIdx > animationData.vertexData.length - 1 || posIdx < 0)
                throw new Error('Position index was out of bounds.');
            const jointData = animationData.vertexData[posIdx];
            vert.setWeights(Float32Array.from(jointData.weights));
            vert.setIndices(Float32Array.from(jointData.ids));
        }
        allVerts.push(vert);
    }
    return animationData;
}
function parseSkeleton(xml) {
    const libControllers = xml.getElementsByTagName('library_controllers');
    if (libControllers.length === 0)
        return;
    assertNElements(libControllers, 1, 'library controllers');
    const controller = requireOneTag(libControllers[0], 'controller', 'animation controllers');
    const jointData = {};
    const joint = requireOneTag(controller, 'joints', 'joints');
    const inputs = joint.getElementsByTagName('input');
    assertNElements(inputs, 2, 'joint data');
    const jointLinks = filterNodeList(inputs, inp => inp.getAttribute('semantic') === 'JOINT');
    const invBindLinks = filterNodeList(inputs, inp => inp.getAttribute('semantic') === 'INV_BIND_MATRIX');
    __WEBPACK_IMPORTED_MODULE_2__util_assert_util__["assertNValues"](jointLinks, 1, 'joint names');
    __WEBPACK_IMPORTED_MODULE_2__util_assert_util__["assertNValues"](invBindLinks, 1, 'inverse bind matrix data');
    const jointLink = jointLinks[0];
    const invBindLink = invBindLinks[0];
    const jointSource = xml.querySelector(jointLink.getAttribute('source'));
    if (!jointSource)
        throw new Error('No joint name source found.');
    const nameArray = requireOneTag(jointSource, 'Name_array', 'joint names');
    const jointNames = nameArray.innerHTML.split(' ');
    const invBindSource = xml.querySelector(invBindLink.getAttribute('source'));
    if (!invBindSource)
        throw new Error('No joint inverse bind matrices found');
    const invBindTechnique = requireOneTag(invBindSource, 'technique_common', 'inverse bind technique');
    const invBindAccessor = requireOneTag(invBindTechnique, 'accessor', 'inverse bind accessor');
    const invBindMatStride = parseInt(invBindAccessor.getAttribute('stride'));
    if (invBindMatStride !== 16)
        throw new Error(`mat4 inverse bind transform stride must be 16; was ${invBindMatStride}`);
    const invBindArrays = requireOneTag(invBindSource, 'float_array', 'inverse bind array source');
    const inverseBindMatrices = invBindArrays.innerHTML.split(' ')
        .map(el => parseFloat(el))
        .filter(el => !isNaN(el));
    if (inverseBindMatrices.length !== parseInt(invBindArrays.getAttribute('count')))
        throw new Error('Wrong number of parsed inverse bind matrix data elements.');
    const invStride = invBindSource.getElementsByTagName('technique_common');
    for (let j = 0; j < jointNames.length; j++) {
        const name = jointNames[j];
        const ind = j * invBindMatStride;
        const invBindMat = getMat4FromLinearData(inverseBindMatrices, ind);
        // //
        // //  correction
        // //
        // const trans = new matrix.transform().rotate(math.radians(-90), [1, 0, 0]).mat()
        // invBindMat = mat4.mul(invBindMat, invBindMat, trans)
        // //
        // //
        // //
        jointData[name] = {
            index: j,
            inverseBindT: invBindMat
        };
    }
    //
    //  get weights
    //
    const vertexWeights = requireOneTag(controller, 'vertex_weights', 'vertex weights');
    const vCounts = requireOneTag(vertexWeights, 'vcount', 'vertex counts').innerHTML
        .split(' ')
        .map(val => parseInt(val))
        .filter(val => !isNaN(val));
    const vIndices = requireOneTag(vertexWeights, 'v', 'vertex indices').innerHTML
        .split(' ')
        .map(val => parseInt(val))
        .filter(val => !isNaN(val));
    const vSources = vertexWeights.getElementsByTagName('input');
    const vJointSources = filterNodeList(vSources, el => el.getAttribute('semantic') === 'JOINT');
    const vWeightSources = filterNodeList(vSources, el => el.getAttribute('semantic') === 'WEIGHT');
    __WEBPACK_IMPORTED_MODULE_2__util_assert_util__["assertNValues"](vJointSources, 1, 'the joint source');
    __WEBPACK_IMPORTED_MODULE_2__util_assert_util__["assertNValues"](vWeightSources, 1, 'the weight source');
    const vJointSource = vJointSources[0];
    const vWeightSource = vWeightSources[0];
    const vWeights = requireOneTag(xml.querySelector(vWeightSource.getAttribute('source')), 'float_array', 'weight data')
        .innerHTML
        .split(' ')
        .map(val => parseFloat(val))
        .filter(val => !isNaN(val));
    const jointOffset = parseInt(vJointSource.getAttribute('offset'));
    const weightOffset = parseInt(vWeightSource.getAttribute('offset'));
    __WEBPACK_IMPORTED_MODULE_2__util_assert_util__["assertNotNaN"](jointOffset, 'joint offset');
    __WEBPACK_IMPORTED_MODULE_2__util_assert_util__["assertNotNaN"](weightOffset, 'weight offset');
    let vJointDataInd = 0;
    let vJointData = [];
    for (let i = 0; i < vCounts.length; i++) {
        const currentNAffected = vCounts[i];
        const vertData = { weights: [], ids: [] };
        for (let j = 0; j < currentNAffected; j++) {
            const weightInd = vIndices[vJointDataInd + weightOffset];
            const weight = vWeights[weightInd];
            const jointId = vIndices[vJointDataInd + jointOffset];
            vertData.weights.push(weight);
            vertData.ids.push(jointId);
            vJointDataInd += 2;
        }
        vJointData.push(requireNWeights(vertData, 3));
    }
    //
    //  get hierarchy
    //
    const armatureNode = xml.getElementById('Armature');
    const root = filterNodeList(armatureNode.children, el => el.getAttribute('type') === 'JOINT');
    __WEBPACK_IMPORTED_MODULE_2__util_assert_util__["assertNValues"](root, 1, 'the root joint');
    const tree = buildJointSkeleton(root[0], jointData, null);
    const skeleton = new __WEBPACK_IMPORTED_MODULE_4__animation_skeleton__["c" /* Skeleton */](tree);
    //
    //  get key frames
    //
    const animNode = requireOneTag(xml, 'library_animations', 'key frames parent node');
    const keyFrameNodes = animNode.getElementsByTagName('animation');
    const keyFrames = {};
    const animation = new __WEBPACK_IMPORTED_MODULE_5__animation_animator__["b" /* SkeletalAnimation */](skeleton, 0);
    let duration = -Infinity;
    for (let i = 0; i < keyFrameNodes.length; i++) {
        const _keyFrames = processOneAnimationNode(xml, keyFrameNodes[i]);
        const times = _keyFrames.keyFrames.times;
        const transforms = _keyFrames.keyFrames.transforms;
        const jointTransforms = transforms.map(trans => __WEBPACK_IMPORTED_MODULE_4__animation_skeleton__["b" /* JointTransform */].fromMat4(trans));
        const frame = new __WEBPACK_IMPORTED_MODULE_5__animation_animator__["a" /* KeyFrames */](times, jointTransforms);
        const lastT = frame.getLastTime();
        if (lastT > duration)
            duration = lastT;
        keyFrames[_keyFrames.name] = frame;
        animation.addSource(_keyFrames.name, frame);
    }
    if (duration === -Infinity) {
        console.warn('Invalid key frame data detected.');
    }
    else {
        animation.duration = duration;
    }
    return {
        keyFrames,
        animation,
        skeleton: skeleton,
        vertexData: vJointData
    };
}
function getMat4FromLinearData(data, ind = 0) {
    return __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["c" /* mat4 */].fromValues(data[ind + 0], data[ind + 4], data[ind + 8], data[ind + 12], 
    // 
    data[ind + 1], data[ind + 5], data[ind + 9], data[ind + 13], 
    //
    data[ind + 2], data[ind + 6], data[ind + 10], data[ind + 14], 
    //
    data[ind + 3], data[ind + 7], data[ind + 11], data[ind + 15]);
}
function processOneAnimationNode(xml, node) {
    const armStr = 'Armature_';
    const id = node.getAttribute('id');
    const armIndex = id.indexOf(armStr);
    const poseMatIndex = id.indexOf('_pose_matrix');
    if (armIndex === -1 || poseMatIndex === -1)
        throw new Error('Invalid joint name format in animation node id.');
    const name = id.substr(armIndex + armStr.length, poseMatIndex - armStr.length);
    const times = xml.getElementById(id + '-input')
        .getElementsByTagName('float_array')[0]
        .innerHTML
        .split(' ')
        .map(val => parseFloat(val))
        .filter(val => !isNaN(val));
    const transformData = xml.getElementById(id + '-output')
        .getElementsByTagName('float_array')[0]
        .innerHTML
        .split(' ')
        .map(val => parseFloat(val))
        .filter(val => !isNaN(val));
    if (times.length * 16 !== transformData.length)
        throw new Error(`Failed to parse transformation / key frame time data for "${id}".`);
    const keyFrames = {
        times: [],
        transforms: []
    };
    for (let i = 0; i < times.length; i++) {
        const ind = i * 16;
        keyFrames.times.push(times[i]);
        keyFrames.transforms.push(getMat4FromLinearData(transformData, ind));
    }
    return {
        name,
        keyFrames
    };
}
function buildJointSkeleton(node, flatJointData, parent) {
    const children = filterNodeList(node.children, el => el.getAttribute('type') === 'JOINT');
    const current = getTreeJointData(node, flatJointData);
    for (let i = 0; i < children.length; i++) {
        buildJointSkeleton(children[i], flatJointData, current);
    }
    if (!parent)
        parent = current;
    else
        parent.addChild(current);
    return parent;
}
function getTreeJointData(node, flatData) {
    const name = node.getAttribute('sid');
    return new __WEBPACK_IMPORTED_MODULE_4__animation_skeleton__["a" /* Joint */](name, flatData[name].index, flatData[name].inverseBindT);
}
function requireNWeights(vertData, N) {
    if (vertData.weights.length === N) {
        return vertData;
    }
    else if (vertData.weights.length < N) {
        const n = N - vertData.weights.length;
        for (let i = 0; i < n; i++) {
            vertData.ids.push(0);
            vertData.weights.push(0);
        }
        return vertData;
    }
    const fixedData = { weights: [], ids: [] };
    const weightsWithIndices = [];
    for (let i = 0; i < vertData.weights.length; i++) {
        weightsWithIndices[i] = [vertData.weights[i], i];
    }
    weightsWithIndices.sort((a, b) => b[0] - a[0]);
    let sum = 0;
    for (let i = 0; i < N; i++) {
        let index = weightsWithIndices[i][1];
        const weight = vertData.weights[index];
        fixedData.weights[i] = weight;
        fixedData.ids[i] = vertData.ids[index];
        sum += weight;
    }
    for (let i = 0; i < N; i++) {
        fixedData.weights[i] /= sum;
    }
    return fixedData;
}
function requireOneTag(el, tagName, alias) {
    let child = el.getElementsByTagName(tagName);
    assertNElements(child, 1, alias);
    return child[0];
}
function filterNodeList(els, func) {
    const out = [];
    for (let i = 0; i < els.length; i++) {
        if (func(els[i]))
            out.push(els[i]);
    }
    return out;
}
function checkParseError(xml) {
    if (xml.getElementsByTagName('parsererror').length !== 0) {
        throw new Error('Failed to parse XML structure.');
    }
}
function assertNElements(els, n, alias) {
    if (els.length !== n)
        throw new Error(`Expected ${n} elements of kind "${alias}", but there were ${els.length}.`);
}
function assertHasAttribute(el, attr, alias = '(unspecified)') {
    if (!el.hasAttribute(attr))
        throw new Error(`Attribute "${attr}" does not exist on element of type "${alias}".`);
}


/***/ }),
/* 87 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_gl_matrix__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_matrix_util__ = __webpack_require__(22);

// import { transform } from '../util/matrix-util';

class JointTransform {
    constructor(components) {
        this.transform = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].create();
        this.components = components;
        this.updateTransform();
    }
    updateTransform() {
        __WEBPACK_IMPORTED_MODULE_1__util_matrix_util__["recompose"](this.transform, this.components);
    }
    getTransform() {
        return this.transform;
    }
    static fromMat4(a) {
        const comp = __WEBPACK_IMPORTED_MODULE_1__util_matrix_util__["decompose"](a);
        if (!comp.success)
            throw new Error(`Failed to decompose joint-transformation matrix.`);
        const trans = new JointTransform(comp);
        return trans;
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = JointTransform;

class Joint {
    constructor(name, index, inverseBindTransform) {
        this.children = [];
        this.name = name;
        this.index = index;
        this.inverseBindTransform = inverseBindTransform;
        this.localTransform = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].create();
        this.animationTransform = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].create();
    }
    addChild(joint) {
        this.children.push(joint);
    }
    setLocalTransform(transform) {
        for (let i = 0; i < transform.length; i++) {
            this.localTransform[i] = transform[i];
        }
    }
    getAnimationTransform() {
        return this.animationTransform;
    }
    applyTransforms(parentT) {
        const locT = this.localTransform;
        const current = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].multiply(locT, parentT, locT);
        for (const child of this.children) {
            child.applyTransforms(current);
        }
        this.updateAnimationTransform();
    }
    updateAnimationTransform() {
        const animTrans = this.animationTransform;
        const localTrans = this.localTransform;
        const invBindTrans = this.inverseBindTransform;
        this.animationTransform = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].multiply(animTrans, localTrans, invBindTrans);
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = Joint;

class Skeleton {
    constructor(root) {
        this.joints = {};
        this.root = root;
        this._size = 0;
        this.rootTransform = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].create();
        this.assignJoints(this.root);
    }
    applyTransforms() {
        this.root.applyTransforms(this.rootTransform);
    }
    size() {
        return this._size;
    }
    traverse(func) {
        this._traverse(this.root, func);
    }
    _traverse(node, func) {
        const children = node.children;
        for (const child of children) {
            this._traverse(child, func);
        }
        func(node);
    }
    assignJoints(node) {
        const children = node.children;
        for (const child of children) {
            this.assignJoints(child);
        }
        this.joints[node.name] = node;
        this._size++;
    }
}
/* harmony export (immutable) */ __webpack_exports__["c"] = Skeleton;



/***/ }),
/* 88 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_gl_matrix__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util_array_util__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_util__ = __webpack_require__(0);



class KeyFrames {
    constructor(times, transforms) {
        if (times.length !== transforms.length)
            throw new Error('Animation times and transforms must be arrays of the same length.');
        this.times = times;
        this.transforms = transforms;
        this.sortByTimes();
    }
    sortByTimes() {
        const index = __WEBPACK_IMPORTED_MODULE_1__util_array_util__["getSortedIndex"](this.times, (a, b) => a[0] - b[0]);
        this.times = __WEBPACK_IMPORTED_MODULE_1__util_array_util__["arrange"](this.times, index);
        this.transforms = __WEBPACK_IMPORTED_MODULE_1__util_array_util__["arrange"](this.transforms, index);
    }
    getLastTime() {
        if (this.times.length === 0)
            return NaN;
        return this.times[this.times.length - 1];
    }
    getIndexBefore(t) {
        const times = this.times;
        let diffs = times.map(time => t - time);
        let mins = __WEBPACK_IMPORTED_MODULE_1__util_array_util__["min"](__WEBPACK_IMPORTED_MODULE_1__util_array_util__["keep"](diffs, __WEBPACK_IMPORTED_MODULE_1__util_array_util__["test"](diffs, x => x > 0)));
        let minInd = __WEBPACK_IMPORTED_MODULE_1__util_array_util__["find"](__WEBPACK_IMPORTED_MODULE_1__util_array_util__["test"](diffs, diff => diff === mins));
        if (minInd.length === 0)
            return this.transforms.length - 1;
        if (minInd.length !== 1)
            console.warn('Multiple key frames shared the same time.');
        return minInd[0];
    }
    getIndexAfter(t) {
        const times = this.times;
        let diffs = times.map(time => time - t);
        let mins = __WEBPACK_IMPORTED_MODULE_1__util_array_util__["min"](__WEBPACK_IMPORTED_MODULE_1__util_array_util__["keep"](diffs, __WEBPACK_IMPORTED_MODULE_1__util_array_util__["test"](diffs, x => x >= 0)));
        let minInd = __WEBPACK_IMPORTED_MODULE_1__util_array_util__["find"](__WEBPACK_IMPORTED_MODULE_1__util_array_util__["test"](diffs, diff => diff === mins));
        if (minInd.length === 0)
            return 0;
        if (minInd.length !== 1)
            console.warn('Multiple key frames shared the same time.');
        return minInd[0];
    }
    getPrevIndex(afterIndex) {
        let prev = afterIndex - 1;
        return prev >= 0 ? prev : this.times.length - 1;
    }
    getNextIndex(beforeIndex) {
        let next = beforeIndex + 1;
        return next > this.times.length - 1 ? 0 : next;
    }
    getTransformBefore(t) {
        return this.transforms[this.getIndexBefore(t)];
    }
    getTransformAfter(t) {
        return this.transforms[this.getIndexAfter(t)];
    }
}
/* harmony export (immutable) */ __webpack_exports__["a"] = KeyFrames;

class SkeletalAnimation {
    constructor(skeleton, duration) {
        this.sources = {};
        this.skeleton = skeleton;
        this.timer = new __WEBPACK_IMPORTED_MODULE_2__util_util__["g" /* time */].DeltaTimer();
        this.timer.setRatio(__WEBPACK_IMPORTED_MODULE_2__util_util__["g" /* time */].ratios.s());
        this.currentTime = 0;
        this.duration = duration;
        this.tmpTransform = __WEBPACK_IMPORTED_MODULE_0_gl_matrix__["c" /* mat4 */].create();
    }
    addSource(name, source) {
        this.sources[name] = source;
    }
    getSource(name) {
        const frames = this.sources[name];
        if (frames === undefined)
            console.warn(`No sources matched the name "${name}".`);
        return frames;
    }
    update() {
        this.updateTime();
        const self = this;
        const skeleton = this.skeleton;
        const timer = this.timer;
        skeleton.traverse(joint => {
            const frames = self.getSource(joint.name);
            const currentTime = self.currentTime;
            const beforeIdx = frames.getIndexBefore(currentTime);
            const beforeT = frames.times[beforeIdx];
            const before = frames.transforms[beforeIdx];
            const afterIdx = frames.getNextIndex(beforeIdx);
            const afterT = frames.times[afterIdx];
            const after = frames.transforms[afterIdx];
            let fracT;
            if (afterIdx < beforeIdx) {
                const denom = self.duration - beforeT;
                fracT = denom === 0 ? 0 : (currentTime - afterT) / denom;
            }
            else {
                fracT = (currentTime - beforeT) / (afterT - beforeT);
            }
            const interp = __WEBPACK_IMPORTED_MODULE_2__util_util__["f" /* matrix */].lerp(before.components, after.components, fracT);
            const animTrans = __WEBPACK_IMPORTED_MODULE_2__util_util__["f" /* matrix */].recompose(self.tmpTransform, interp);
            joint.setLocalTransform(animTrans);
        });
        skeleton.applyTransforms();
    }
    updateTime() {
        this.timer.update();
        const currentTime = this.timer.delta() + this.currentTime;
        this.currentTime = currentTime > this.duration ? 0 : currentTime;
    }
}
/* harmony export (immutable) */ __webpack_exports__["b"] = SkeletalAnimation;



/***/ }),
/* 89 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__input_xy__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__keyboard__ = __webpack_require__(39);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Touch", function() { return __WEBPACK_IMPORTED_MODULE_0__input_xy__["d"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "DoubleTapDetector", function() { return __WEBPACK_IMPORTED_MODULE_0__input_xy__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Mouse", function() { return __WEBPACK_IMPORTED_MODULE_0__input_xy__["b"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "PointerLock", function() { return __WEBPACK_IMPORTED_MODULE_0__input_xy__["c"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Keyboard", function() { return __WEBPACK_IMPORTED_MODULE_1__keyboard__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Keys", function() { return __WEBPACK_IMPORTED_MODULE_1__keyboard__["b"]; });





/***/ }),
/* 90 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Orbit", function() { return Orbit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Movement", function() { return Movement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Rotation", function() { return Rotation; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__keyboard__ = __webpack_require__(39);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__input_xy__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util_time_util__ = __webpack_require__(24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_gl_matrix__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__math_wgl_math__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__util_util__ = __webpack_require__(0);






var Orbit;
(function (Orbit_1) {
    class Orbit2 {
        constructor(input, camera, opts) {
            this.input = input;
            this.camera = camera;
            this.timer = new __WEBPACK_IMPORTED_MODULE_2__util_time_util__["DeltaTimer"]();
            if (!opts)
                opts = Orbit2.Defaults();
            this.released = false;
            this.lastCoordinates = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(0, 0);
            this.currentCoordinates = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(0, 0);
            this.tmpCurrentCoordinates = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(0, 0);
            this.velocity = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(0, 0);
            this.totalVelocity = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(0, 0);
            this.delta = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(0, 0);
            this.dts = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(0, 0);
            this.onBeforeRotate = () => { };
            this.opts = opts;
            this.timer.setRatio(__WEBPACK_IMPORTED_MODULE_2__util_time_util__["ratios"].ms());
            this.setup();
        }
        update() {
            const input = this.input;
            const timer = this.timer;
            const camera = this.camera;
            const tmpCoords = this.tmpCurrentCoordinates;
            const coords = this.currentCoordinates;
            const lastCoords = this.lastCoordinates;
            const velocity = this.velocity;
            const totalVelocity = this.totalVelocity;
            const delta = this.delta;
            const dts = this.dts;
            const speedMultipler = this.opts.speed;
            const decaySens = this.opts.velocityDecaySensitivity;
            timer.update();
            tmpCoords.set(coords);
            __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].subtract(delta, tmpCoords, lastCoords);
            const dt = timer.delta();
            dts[0] = dt;
            dts[1] = dt;
            if (dt > 0)
                __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].divide(velocity, delta, dts);
            velocity[0] = __WEBPACK_IMPORTED_MODULE_2__util_time_util__["Ratio"].scale(timer.getRatio(), velocity[0]);
            velocity[1] = __WEBPACK_IMPORTED_MODULE_2__util_time_util__["Ratio"].scale(timer.getRatio(), velocity[1]);
            __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].mul(velocity, velocity, [speedMultipler, speedMultipler]);
            __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].add(totalVelocity, totalVelocity, velocity);
            let targetVelocity = this.opts.smooth ? totalVelocity : velocity;
            this.onBeforeRotate(targetVelocity);
            if (input.shouldInvert()) {
                camera.rotate(-targetVelocity[0], targetVelocity[1]);
            }
            else {
                camera.rotate(targetVelocity[0], -targetVelocity[1]);
            }
            lastCoords.set(tmpCoords);
            totalVelocity[0] /= decaySens;
            totalVelocity[1] /= decaySens;
            if (Math.abs(totalVelocity[0]) < 0.00001)
                totalVelocity[0] = 0;
            if (Math.abs(totalVelocity[1]) < 0.00001)
                totalVelocity[1] = 0;
        }
        setup() {
            const input = this.input;
            const self = this;
            input.start((evt) => {
                self.released = false;
                self.currentCoordinates = self.input.getPrimaryCoordinates(evt);
                self.lastCoordinates.set(self.currentCoordinates);
            });
            input.move((evt) => {
                evt.preventDefault();
                self.currentCoordinates = self.input.getPrimaryCoordinates(evt);
            });
            input.end((evt) => {
                self.released = true;
            });
        }
        static Defaults() {
            return {
                nVelocitySamples: 100,
                velocityDecaySensitivity: 1.2,
                maxVelocity: 4000,
                speed: 2,
                smooth: true
            };
        }
    }
    Orbit_1.Orbit2 = Orbit2;
    //
    //	regular
    //
    class _Orbit {
        constructor(input, timer, opts) {
            this.input = input;
            this.timer = timer;
            this.began = false;
            this.released = false;
            this.velocities = [];
            this.velocity = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(0, 0);
            this.nVelocitySamples = opts.nVelocitySamples;
            this.velocityDecaySensitivity = opts.velocityDecaySensitivity;
            this.speed = opts.speed;
            this.maxVelocity = opts.maxVelocity;
            this.meanVelocity = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(0, 0);
            this.coordinates = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(0, 0);
            this.deltas = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(0, 0);
            this.setup();
        }
        getMeanVelocity() {
            if (this.velocities.length > 0) {
                this.meanVelocity = __WEBPACK_IMPORTED_MODULE_4__math_wgl_math__["i" /* vecmean */](this.velocities);
            }
            else {
                this.meanVelocity = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(0, 0);
            }
            return this.meanVelocity;
        }
        setup() {
            const input = this.input;
            const self = this;
            input.start((evt) => {
                if (self.began || !self.shouldBegin(evt))
                    return;
                let coords = self.getCoordinates(evt);
                self.coordinates[0] = coords[0];
                self.coordinates[1] = coords[1];
                self.timer.update();
                self.began = true;
                self.released = false;
                self.deltas[0] = 0;
                self.deltas[1] = 0;
                self.velocities = [];
            });
            input.move((evt) => {
                evt.preventDefault();
                self.timer.update();
                let currentCoordinates = self.getCoordinates(evt);
                self.deltas = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].subtract(self.deltas, currentCoordinates, self.coordinates);
                let deltaT = self.timer.delta();
                if (deltaT > 0) {
                    let velocity = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].copy(self.velocity, self.deltas);
                    __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].divide(velocity, velocity, __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(deltaT, deltaT));
                    //	keep values in range [-Infinity, maxVelocity], preserving sign
                    __WEBPACK_IMPORTED_MODULE_4__math_wgl_math__["h" /* signedClamp */](velocity, -Infinity, self.maxVelocity);
                    if (self.velocities.length === self.nVelocitySamples)
                        self.velocities.shift();
                    self.velocities.push(velocity);
                }
                if (self.velocities.length > 0) {
                    self.meanVelocity = __WEBPACK_IMPORTED_MODULE_4__math_wgl_math__["i" /* vecmean */](self.velocities);
                }
                else {
                    self.meanVelocity = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(0, 0);
                }
                self.coordinates = currentCoordinates;
            });
            input.end((evt) => {
                self.released = true;
                self.began = false;
            });
        }
        static Defaults() {
            return {
                nVelocitySamples: 100,
                velocityDecaySensitivity: 1.1,
                maxVelocity: 4000,
                speed: 4,
                smooth: true
            };
        }
    }
    class OrbitMouse extends _Orbit {
        getCoordinates(evt) {
            return __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(evt.clientX, evt.clientY);
        }
        shouldBegin(evt) {
            return true;
        }
        shouldInvert() {
            return false;
        }
    }
    class OrbitTouch extends _Orbit {
        getCoordinates(evt) {
            if (evt.touches.length === 0)
                throw new Error('Attempted to get coordinates when there were 0 touch-points.');
            let touch0 = evt.touches[0];
            return __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(touch0.clientX, touch0.clientY);
        }
        shouldBegin(evt) {
            return evt.touches.length === 1;
        }
        shouldInvert() {
            return true;
        }
    }
    class Orbit {
        constructor(input, camera, opts = _Orbit.Defaults()) {
            this.input = input;
            this.camera = camera;
            this.timer = new __WEBPACK_IMPORTED_MODULE_2__util_time_util__["DeltaTimer"]();
            if (input instanceof __WEBPACK_IMPORTED_MODULE_1__input_xy__["b" /* Mouse */]) {
                this.orbit = new OrbitMouse(input, this.timer, opts);
            }
            else if (input instanceof __WEBPACK_IMPORTED_MODULE_1__input_xy__["d" /* Touch */]) {
                this.orbit = new OrbitTouch(input, this.timer, opts);
            }
        }
        update() {
            const orbit = this.orbit;
            const deltas = orbit.deltas;
            const camera = this.camera;
            const ratio = this.timer.getRatio();
            const decaySens = this.orbit.velocityDecaySensitivity;
            if (!orbit.released) {
                if (orbit.shouldInvert()) {
                    camera.rotate(-deltas[0], deltas[1]);
                }
                else {
                    camera.rotate(deltas[0], -deltas[1]);
                }
                deltas[0] = 0;
                deltas[1] = 0;
            }
            else {
                let vel = orbit.meanVelocity;
                let xvel = (vel[0] * ratio.second) / ratio.first * orbit.speed;
                let yvel = (vel[1] * ratio.second) / ratio.first * orbit.speed;
                if (orbit.shouldInvert()) {
                    camera.rotate(-xvel, yvel);
                }
                else {
                    camera.rotate(xvel, -yvel);
                }
                vel[0] /= decaySens;
                vel[1] /= decaySens;
                if (Math.abs(vel[0]) < 0.00001)
                    vel[0] = 0;
                if (Math.abs(vel[1]) < 0.00001)
                    vel[1] = 0;
            }
        }
    }
    Orbit_1.Orbit = Orbit;
})(Orbit || (Orbit = {}));
var Movement;
(function (Movement) {
    class movement {
        constructor(input, camera, speed) {
            this.timer = new __WEBPACK_IMPORTED_MODULE_2__util_time_util__["DeltaTimer"]();
            this.input = input;
            this.camera = camera;
            this.speed = speed;
        }
    }
    Movement.movement = movement;
    class Keyboard extends movement {
        constructor(kb, camera, speed) {
            super(kb, camera, speed);
            this.Keys = {
                forwards: __WEBPACK_IMPORTED_MODULE_0__keyboard__["b" /* Keys */].W,
                backwards: __WEBPACK_IMPORTED_MODULE_0__keyboard__["b" /* Keys */].S,
                left: __WEBPACK_IMPORTED_MODULE_0__keyboard__["b" /* Keys */].A,
                right: __WEBPACK_IMPORTED_MODULE_0__keyboard__["b" /* Keys */].D
            };
        }
        update() {
            const timer = this.timer;
            timer.update();
            const input = this.input;
            const camera = this.camera;
            const keys = this.Keys;
            const speed = this.speed;
            const dt = timer.delta();
            Object.keys(keys).map(dir => {
                let keyN = Keyboard.get(keys, dir);
                if (input.isDown(keyN)) {
                    camera.move(dir, dt, speed);
                }
            });
        }
        static get(obj, name) {
            return obj[name];
        }
    }
    Movement.Keyboard = Keyboard;
    class Touch extends movement {
        constructor(touch, camera, speed) {
            super(touch, camera, speed);
            this.dist = 0;
            this.began = false;
            this.setup();
        }
        setup() {
            const touch = this.input;
            const self = this;
            const getDistance = (evt) => {
                let currX1 = evt.touches[0].clientX, currX2 = evt.touches[1].clientX, currY1 = evt.touches[0].clientY, currY2 = evt.touches[1].clientY;
                let pt1 = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(currX1, currY1);
                let pt2 = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(currX2, currY2);
                return __WEBPACK_IMPORTED_MODULE_4__math_wgl_math__["c" /* distance */](pt1, pt2);
            };
            touch.start(evt => {
                if (self.began || evt.touches.length !== 2)
                    return;
                self.began = true;
                self.dist = getDistance(evt);
                self.timer.update();
            });
            touch.move(evt => {
                evt.preventDefault();
                self.timer.update();
                if (evt.touches.length !== 2)
                    return;
                let currDist = getDistance(evt);
                let offDist = currDist - self.dist;
                let dt = self.timer.delta();
                let dir = offDist > 0 ? 'forwards' : 'backwards';
                self.camera.move(dir, dt, self.speed);
                self.dist = currDist;
            });
            touch.end(evt => {
                self.began = false;
            });
        }
        update() {
            this.timer.update();
        }
    }
    Movement.Touch = Touch;
})(Movement || (Movement = {}));
var Rotation;
(function (Rotation) {
    class Touch extends Movement.movement {
        constructor(touch, camera, speed) {
            super(touch, camera, speed);
            this.velocities = [];
            this.nVelocities = 100;
            this.didTap = false;
            this.tapDetector = new __WEBPACK_IMPORTED_MODULE_1__input_xy__["a" /* DoubleTapDetector */](touch);
            this.last = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].create();
            this.current = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].create();
            this.lastVel = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].create();
            this.setup();
        }
        update() {
            this.timer.update();
        }
        setup() {
            const touch = this.input;
            const self = this;
            const camera = this.camera;
            const detector = this.tapDetector;
            const reset = (evt) => {
                self.didTap = true;
                self.last[0] = evt.touches[0].clientX;
                self.last[1] = evt.touches[0].clientY;
                self.velocities = [];
            };
            // detector.doubletap(evt => {
            // 	reset(evt)
            // })
            // touch.start(evt => {
            // 	self.timer.update()
            // })
            touch.start(evt => {
                if (evt.touches.length !== 3)
                    return;
                reset(evt);
                self.timer.update();
            });
            touch.move(evt => {
                if (!self.didTap || evt.touches.length !== 3)
                    return;
                evt.preventDefault();
                evt.stopPropagation();
                self.timer.update();
                const clone = __WEBPACK_IMPORTED_MODULE_5__util_util__["d" /* common */].clone;
                let touch0 = evt.touches[0];
                let focusPoint = [0, 0, 0];
                let pos = clone(camera.position);
                let camFocus = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["f" /* vec3 */].subtract(__WEBPACK_IMPORTED_MODULE_3_gl_matrix__["f" /* vec3 */].create(), pos, focusPoint);
                let right = clone(camera.right);
                let up = clone(camera.up);
                let newPos = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["f" /* vec3 */].create();
                right = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["f" /* vec3 */].normalize(right, right);
                up = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["f" /* vec3 */].normalize(up, up);
                let deltaPos = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(touch0.clientX, touch0.clientY);
                let dt = self.timer.delta();
                let vel = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(0, 0);
                deltaPos = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].subtract(deltaPos, deltaPos, self.last);
                if (dt > 0) {
                    vel = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].divide(vel, deltaPos, __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(dt, dt));
                }
                else {
                    vel.set(this.lastVel);
                }
                let speed = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].copy(__WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].create(), vel);
                __WEBPACK_IMPORTED_MODULE_4__math_wgl_math__["a" /* abs */](speed);
                if (self.velocities.length > 0) {
                    speed = __WEBPACK_IMPORTED_MODULE_4__math_wgl_math__["i" /* vecmean */](self.velocities);
                }
                else {
                    speed[0] = vel[0];
                    speed[1] = vel[1];
                }
                let yaw = vel[0] * 0.002;
                let pitch = vel[1] * 0.002;
                // let yaw = speed[0] === 0 ? 0 : vel[0] / speed[0]
                // let pitch = speed[1] === 0 ? 0 : vel[1] / speed[1]
                let mat = new __WEBPACK_IMPORTED_MODULE_5__util_util__["f" /* matrix */].transform()
                    .rotate(__WEBPACK_IMPORTED_MODULE_4__math_wgl_math__["g" /* radians */](yaw), up)
                    .rotate(__WEBPACK_IMPORTED_MODULE_4__math_wgl_math__["g" /* radians */](pitch), right)
                    .mat();
                let camFocus4 = __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["g" /* vec4 */].fromValues(camFocus[0], camFocus[1], camFocus[2], 1);
                __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["g" /* vec4 */].transformMat4(camFocus4, camFocus4, mat);
                __WEBPACK_IMPORTED_MODULE_3_gl_matrix__["g" /* vec4 */].add(camFocus4, camFocus4, [focusPoint[0], focusPoint[1], focusPoint[2], 0]);
                newPos[0] = camFocus4[0];
                newPos[1] = camFocus4[1];
                newPos[2] = camFocus4[2];
                camera.setPosition(newPos);
                self.last[0] = touch0.clientX;
                self.last[1] = touch0.clientY;
                self.lastVel.set(vel);
                if (self.velocities.length === self.nVelocities)
                    self.velocities.shift();
                self.velocities.push(__WEBPACK_IMPORTED_MODULE_3_gl_matrix__["e" /* vec2 */].fromValues(speed[0], speed[1]));
            });
            touch.end(evt => {
                self.didTap = false;
            });
        }
    }
    Rotation.Touch = Touch;
})(Rotation || (Rotation = {}));


/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__texture__ = __webpack_require__(10);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__texture_factory__ = __webpack_require__(92);
/* unused harmony reexport Texture */
/* unused harmony reexport TextureOpts */
/* unused harmony reexport Tex2D */
/* unused harmony reexport Factory */





/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export Factory */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__texture__ = __webpack_require__(10);

var Factory;
(function (Factory) {
    function makeShadows(gl, sz) {
        let opts = __WEBPACK_IMPORTED_MODULE_0__texture__["c" /* TextureOpts */].Default2D(gl);
        opts.width = sz;
        opts.height = sz;
        opts.internalFormat = gl.DEPTH_COMPONENT;
        opts.sourceFormat = gl.DEPTH_COMPONENT;
        opts.dataType = gl.UNSIGNED_SHORT;
        opts.generateMips = false;
        opts.wrapS = gl.CLAMP_TO_EDGE;
        opts.wrapT = gl.CLAMP_TO_EDGE;
        opts.magFilter = gl.NEAREST;
        opts.minFilter = gl.NEAREST;
        return opts;
    }
    Factory.makeShadows = makeShadows;
    function makeVolume(gl, w, h) {
        let opts = __WEBPACK_IMPORTED_MODULE_0__texture__["c" /* TextureOpts */].Default2D(gl);
        opts.width = w;
        opts.height = h;
        opts.dataType = gl.UNSIGNED_BYTE;
        opts.generateMips = false;
        opts.wrapS = gl.CLAMP_TO_EDGE;
        opts.wrapT = gl.CLAMP_TO_EDGE;
        opts.magFilter = gl.LINEAR;
        return opts;
    }
    Factory.makeVolume = makeVolume;
    function makeImage(gl, data) {
        let opts = __WEBPACK_IMPORTED_MODULE_0__texture__["c" /* TextureOpts */].Default2D(gl);
        opts.width = data.width;
        opts.height = data.height;
        return opts;
    }
    Factory.makeImage = makeImage;
})(Factory || (Factory = {}));


/***/ }),
/* 93 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__heightmaps__ = __webpack_require__(94);
/* unused harmony reexport HeightMap */




/***/ }),
/* 94 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util_util__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__math_wgl_math__ = __webpack_require__(3);


class HeightMap {
    constructor(data, width, depth) {
        this.data = Float32Array.from(data);
        this.width = width;
        this.depth = depth;
    }
    valueAtXZ(x, z) {
        __WEBPACK_IMPORTED_MODULE_0__util_util__["b" /* assert */].assertInteger(x, 'terrain x coordinate');
        __WEBPACK_IMPORTED_MODULE_0__util_util__["b" /* assert */].assertInteger(z, 'terrain y coordinate');
        let index = (z * (this.width) + x);
        return this.data[index];
    }
    valueAtNearestXZ(x, z) {
        x = __WEBPACK_IMPORTED_MODULE_1__math_wgl_math__["b" /* clampScalar */](x, 0, 1);
        z = __WEBPACK_IMPORTED_MODULE_1__math_wgl_math__["b" /* clampScalar */](z, 0, 1);
        let ix = Math.floor((this.width - 1) * x);
        let iz = Math.floor((this.depth - 1) * z);
        return this.valueAtXZ(ix, iz);
    }
    static fromImageElement(img) {
        let imageData = new __WEBPACK_IMPORTED_MODULE_0__util_util__["e" /* image */].Image(img);
        let rData = new Float32Array(imageData.size());
        for (let i = 0; i < imageData.size(); i++) {
            let pix = imageData.valuesAt(i);
            let fracMax = (pix[0] + pix[1] + pix[2]) / 3 / imageData.maxValue;
            rData[i] = -1 + fracMax * 2;
        }
        return new HeightMap(rData, imageData.width, imageData.height);
    }
}
/* unused harmony export HeightMap */



/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,